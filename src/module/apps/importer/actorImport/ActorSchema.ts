type Many<T> = T[];
type MaybeEmpty<T> = T | null;
type OneOrMany<T> = T | Many<T>;
type TruthyString = "True" | "False";

export type ActorFile = {
    "?xml": {
        "@version": string;
        "@encoding": string;
    };
    characters: {
        character: OneOrMany<ActorSchema>;
    };
}

export type ActorSchema = {
    settings: string;
    buildmethod: string;
    imageformat: string;
    metatype: string;
    metatype_english: string;
    metatype_guid: string;
    metavariant: MaybeEmpty<string>;
    metavariant_english: MaybeEmpty<string>;
    metavariant_guid: string;
    movement: string;
    walk: string;
    run: string;
    sprint: string;
    movementwalk: string;
    movementswim: string;
    movementfly: string;
    prioritymetatype: string;
    priorityattributes: string;
    priorityspecial: string;
    priorityskills: [
        string,
        MaybeEmpty<{ priorityskill: OneOrMany<string>; }>
    ];
    priorityresources: string;
    primaryarm: string;
    name: string;
    mainmugshotbase64?: MaybeEmpty<string>;
    hasothermugshots?: TruthyString;
    othermugshots?: MaybeEmpty<{
        mugshot: OneOrMany<{
            stringbase64: string;
        }>;
    }>;
    gender: MaybeEmpty<string>;
    age: MaybeEmpty<string>;
    eyes: MaybeEmpty<string>;
    height: MaybeEmpty<string>;
    weight: MaybeEmpty<string>;
    skin: MaybeEmpty<string>;
    hair: MaybeEmpty<string>;
    description: MaybeEmpty<string>;
    background: MaybeEmpty<string>;
    concept: MaybeEmpty<string>;
    notes: MaybeEmpty<string>;
    alias: MaybeEmpty<string>;
    playername: MaybeEmpty<string>;
    gamenotes: MaybeEmpty<string>;
    limitphysical: string;
    limitmental: string;
    limitsocial: string;
    limitastral: string;
    contactpoints: string;
    contactpointsused: string;
    cfplimit: string;
    ainormalprogramlimit: string;
    aiadvancedprogramlimit: string;
    spelllimit: string;
    karma: string;
    totalkarma: string;
    special: string;
    totalspecial: string;
    attributes: [
        MaybeEmpty<string>,
        {
            attributecategory_english: MaybeEmpty<string>;
            attribute: Many<{
                name_english: string;
                name: string;
                base: string;
                total: string;
                min: string;
                max: string;
                aug: string;
                bp: string;
                metatypecategory: string;
            }>;
        }
    ];
    totalattributes: string;
    edgeused: string;
    edgeremaining: string;
    streetcred: string;
    calculatedstreetcred: string;
    totalstreetcred: string;
    burntstreetcred: string;
    notoriety: string;
    calculatednotoriety: string;
    totalnotoriety: string;
    publicawareness: string;
    calculatedpublicawareness: string;
    totalpublicawareness: string;
    astralreputation: string;
    totalastralreputation: string;
    wildreputation: string;
    totalwildreputation: string;
    created: TruthyString;
    nuyen: string;
    adept: TruthyString;
    magician: TruthyString;
    technomancer: TruthyString;
    ai: TruthyString;
    cyberwaredisabled: TruthyString;
    critter: TruthyString;
    totaless: string;
    tradition?: MaybeEmpty<{
        guid: string;
        sourceid: string;
        istechnomancertradition: string;
        name: string;
        name_english: string;
        fullname: string;
        fullname_english: string;
        extra: MaybeEmpty<string>;
        extra_english: MaybeEmpty<string>;
        spiritcombat?: string;
        spiritdetection?: string;
        spirithealth?: string;
        spiritillusion?: string;
        spiritmanipulation?: string;
        spiritform?: string;
        spiritcombat_english?: string;
        spiritdetection_english?: string;
        spirithealth_english?: string;
        spiritillusion_english?: string;
        spiritmanipulation_english?: string;
        spiritform_english?: string;
        drainattributes: string;
        drainattributes_english: string;
        drainvalue: string;
        source: MaybeEmpty<string>;
        page: MaybeEmpty<string>;
    }>;
    dodge: string;
    armor: string;
    firearmor: string;
    coldarmor: string;
    electricityarmor: string;
    acidarmor: string;
    fallingarmor: string;
    armordicestun: string;
    firearmordicestun: string;
    coldarmordicestun: string;
    electricityarmordicestun: string;
    acidarmordicestun: string;
    fallingarmordicestun: string;
    armordicephysical: string;
    firearmordicephysical: string;
    coldarmordicephysical: string;
    electricityarmordicephysical: string;
    acidarmordicephysical: string;
    fallingarmordicephysical: string;
    physicalcm: string;
    physicalcmiscorecm: TruthyString;
    stuncm: string;
    stuncmismatrixcm: TruthyString;
    physicalcmfilled: string;
    stuncmfilled: string;
    cmthreshold: string;
    physicalcmthresholdoffset: string;
    stuncmthresholdoffset: string;
    cmoverflow: string;
    psyche: TruthyString;
    init: string;
    initdice: string;
    initvalue: string;
    initbonus: string;
    astralinit?: string;
    astralinitdice?: string;
    astralinitvalue?: string;
    matrixarinit: string;
    matrixarinitdice: string;
    matrixarinitvalue: string;
    matrixcoldinit: string;
    matrixcoldinitdice: string;
    matrixcoldinitvalue: string;
    matrixhotinit: string;
    matrixhotinitdice: string;
    matrixhotinitvalue: string;
    riggerinit: string;
    magenabled: TruthyString;
    initiategrade: string;
    resenabled: TruthyString;
    submersiongrade: string;
    depenabled: TruthyString;
    groupmember: TruthyString;
    groupname: MaybeEmpty<string>;
    groupnotes?: MaybeEmpty<string>;
    surprise: string;
    composure: string;
    judgeintentions: string;
    judgeintentionsresist: string;
    liftandcarry: string;
    memory: string;
    liftweight: string;
    carryweight: string;
    totalcarriedweight: string;
    fatigueresist: string;
    radiationresist: string;
    sonicresist: string;
    toxincontactresist: string;
    toxiningestionresist: string;
    toxininhalationresist: string;
    toxininjectionresist: string;
    pathogencontactresist: string;
    pathogeningestionresist: string;
    pathogeninhalationresist: string;
    pathogeninjectionresist: string;
    physiologicaladdictionresistfirsttime: string;
    physiologicaladdictionresistalreadyaddicted: string;
    psychologicaladdictionresistfirsttime: string;
    psychologicaladdictionresistalreadyaddicted: string;
    physicalcmnaturalrecovery: string;
    stuncmnaturalrecovery: string;
    indirectdefenseresist: string;
    directmanaresist: string;
    directphysicalresist: string;
    detectionspellresist: string;
    decreasebodresist: string;
    decreaseagiresist: string;
    decreaserearesist: string;
    decreasestrresist: string;
    decreasecharesist: string;
    decreaseintresist: string;
    decreaselogresist: string;
    decreasewilresist: string;
    illusionmanaresist: string;
    illusionphysicalresist: string;
    manipulationmentalresist: string;
    manipulationphysicalresist: string;
    skills: {
        skill: Many<{
            guid: string;
            suid: string;
            name: string;
            name_english: string;
            skillgroup: string;
            skillgroup_english: string;
            skillcategory: string;
            skillcategory_english: string;
            grouped: TruthyString;
            default: TruthyString;
            requiresgroundmovement: TruthyString;
            requiresswimmovement: TruthyString;
            requiresflymovement: TruthyString;
            rating: string;
            ratingmax: string;
            specializedrating: string;
            total: string;
            knowledge: TruthyString;
            exotic: TruthyString;
            buywithkarma: TruthyString;
            base: string;
            karma: string;
            spec: MaybeEmpty<string>;
            attribute: string;
            displayattribute: string;
            notes?: MaybeEmpty<string>;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            attributemod: string;
            ratingmod: string;
            poolmod: string;
            islanguage: TruthyString;
            isnativelanguage: TruthyString;
            bp: string;
            skillspecializations: MaybeEmpty<{
                skillspecialization: OneOrMany<{
                    guid: string;
                    name: string;
                    free: TruthyString;
                    expertise: TruthyString;
                    specbonus: string;
                }>;
            }>;
        }>;
        skillgroup?: OneOrMany<{
            guid: string;
            name: string;
            name_english: string;
            rating: string;
            ratingmax: string;
            base: string;
            karma: string;
            isbroken: TruthyString;
        }>;
    };
    contacts: MaybeEmpty<{
        contact: OneOrMany<{
            guid: string;
            name: MaybeEmpty<string>;
            role: MaybeEmpty<string>;
            location: MaybeEmpty<string>;
            connection: string;
            loyalty: string;
            metatype: MaybeEmpty<string>;
            gender: MaybeEmpty<string>;
            age: MaybeEmpty<string>;
            contacttype: MaybeEmpty<string>;
            preferredpayment: MaybeEmpty<string>;
            hobbiesvice: MaybeEmpty<string>;
            personallife: MaybeEmpty<string>;
            type: string;
            forcedloyalty: string;
            blackmail: TruthyString;
            family: TruthyString;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    limitmodifiersphys: MaybeEmpty<{
        limitmodifier: OneOrMany<{
            guid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            bonus: string;
            limit: string;
            condition: MaybeEmpty<string>;
            condition_english: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    limitmodifiersment: MaybeEmpty<{
        limitmodifier: OneOrMany<{
            guid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            bonus: string;
            limit: string;
            condition: string;
            condition_english: string;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    limitmodifierssoc: MaybeEmpty<{
        limitmodifier: OneOrMany<{
            guid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            bonus: string;
            limit: string;
            condition: string;
            condition_english: string;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    mentorspirits: MaybeEmpty<{
        mentorspirit: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            mentortype: string;
            advantage: string;
            advantage_english: string;
            disadvantage: string;
            disadvantage_english: string;
            extra: MaybeEmpty<string>;
            extrachoice1: MaybeEmpty<string>;
            extrachoice2: MaybeEmpty<string>;
            extra_english: MaybeEmpty<string>;
            extrachoice1_english: MaybeEmpty<string>;
            extrachoice2_english: MaybeEmpty<string>;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            mentormask: TruthyString;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    spells: MaybeEmpty<{
        spell: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            descriptors: string;
            descriptors_english: string;
            description?: MaybeEmpty<string>;
            category: string;
            category_english: string;
            type: string;
            type_english: string;
            range: string;
            range_english: string;
            damage: string;
            damage_english: string;
            duration: string;
            duration_english: string;
            dv: string;
            dv_english: string;
            alchemy: TruthyString;
            limited: TruthyString;
            barehandedadept: TruthyString;
            dicepool: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            extra: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    powers: MaybeEmpty<{
        power: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            extra: MaybeEmpty<string>;
            extra_english: MaybeEmpty<string>;
            pointsperlevel: string;
            adeptway: string;
            rating: string;
            totalpoints: string;
            action: MaybeEmpty<string>;
            action_english: MaybeEmpty<string>;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
            enhancements: MaybeEmpty<{
                enhancement: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    fullname: string;
                    fullname_english: string;
                    source: MaybeEmpty<string>;
                    page: MaybeEmpty<string>;
                    improvementsource: string;
                    notes?: MaybeEmpty<string>;
                }>;
            }>;
        }>;
    }>;
    spirits: MaybeEmpty<{
        spirit: OneOrMany<{
            guid: string;
            name: string;
            name_english: string;
            crittername: MaybeEmpty<string>;
            fettered: TruthyString;
            bound: [TruthyString, TruthyString];
            services: string;
            force: string;
            ratinglabel: string;
            spiritattributes: {
                bod: string;
                agi: string;
                rea: string;
                str: string;
                cha: string;
                int: string;
                wil: string;
                log: string;
                ini: string;
            },
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            type: string;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    complexforms: MaybeEmpty<{
        complexform: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            duration: string;
            duration_english: string;
            fv: string;
            fv_english: string;
            target: string;
            target_english: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    aiprograms: MaybeEmpty<{
        aiprogram: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            requiresprogram: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    martialarts: MaybeEmpty<{
        martialart: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            cost: string;
            martialarttechniques: MaybeEmpty<{
                martialarttechnique: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    source: MaybeEmpty<string>;
                    page: MaybeEmpty<string>;
                    notes?: MaybeEmpty<string>;
                }>
            }>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    armors: MaybeEmpty<{
        armor: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            category: string;
            category_english: string;
            armor: string;
            totalarmorcapacity: string;
            calculatedcapacity: string;
            capacityremaining: string;
            avail: string;
            cost: string;
            owncost: string;
            weight: string;
            ownweight: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            armorname: MaybeEmpty<string>;
            equipped: TruthyString;
            ratinglabel: string;
            wirelesson: TruthyString;
            armormods: MaybeEmpty<{
                armormod: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    fullname: string;
                    fullname_english: string;
                    category: string;
                    category_english: string;
                    armor: string;
                    maxrating: string;
                    rating: string;
                    ratinglabel: string;
                    avail: string;
                    cost: string;
                    owncost: string;
                    weight: string;
                    ownweight: string;
                    source: MaybeEmpty<string>;
                    page: MaybeEmpty<string>;
                    included: string;
                    equipped: TruthyString;
                    wirelesson: string;
                    gears: ActorSchema['gears'];
                    extra: MaybeEmpty<string>;
                    notes?: MaybeEmpty<string>;
                }>;
            }>;
            gears: ActorSchema['gears'];
            extra: MaybeEmpty<string>;
            location: MaybeEmpty<string>;
            attack: string;
            sleaze: string;
            dataprocessing: string;
            firewall: string;
            devicerating: string;
            programlimit: string;
            iscommlink: TruthyString;
            isprogram: TruthyString;
            active: TruthyString;
            homenode: TruthyString;
            conditionmonitor: string;
            matrixcmfilled: string;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    weapons: MaybeEmpty<{
        weapon: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            category: string;
            category_english: string;
            type: string;
            reach: string;
            rawreach: string;
            accuracy: string;
            accuracy_noammo: string;
            accuracy_english: string;
            accuracy_english_noammo: string;
            rawaccuracy: string;
            damage: string;
            damage_noammo: string;
            damage_english: string;
            damage_noammo_english: string;
            rawdamage: string;
            ap: string;
            ap_noammo: string;
            ap_english: string;
            ap_english_noammo: string;
            rawap: string;
            mode: MaybeEmpty<string>;
            mode_noammo: MaybeEmpty<string>;
            mode_english: MaybeEmpty<string>;
            mode_english_noammo: MaybeEmpty<string>;
            rc: string;
            rc_noammo: string;
            rc_english: string;
            rc_english_noammo: string;
            rawrc: string;
            ammo: string;
            ammo_english: string;
            maxammo: string;
            conceal: string;
            rawconceal: string;
            availablemounts: string;
            availablemounts_english: string;
            avail: string;
            avail_english: string;
            cost: string;
            owncost: string;
            weight: string;
            ownweight: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            weaponname: MaybeEmpty<string>;
            location: MaybeEmpty<string>;
            attack: string;
            sleaze: string;
            dataprocessing: string;
            firewall: string;
            devicerating: string;
            programlimit: string;
            iscommlink: TruthyString;
            isprogram: TruthyString;
            active: TruthyString;
            homenode: TruthyString;
            conditionmonitor: string;
            matrixcmfilled: string;
            accessories?: {
                accessory: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    fullname: string;
                    fullname_english: string;
                    mount: string;
                    extramount: string;
                    addmount: MaybeEmpty<string>;
                    damage: string;
                    rc: MaybeEmpty<string>;
                    ap: string;
                    conceal: string;
                    avail: string;
                    ratinglabel: string;
                    cost: string;
                    owncost: string;
                    weight: string;
                    ownweight: string;
                    included: TruthyString;
                    source: MaybeEmpty<string>;
                    page: MaybeEmpty<string>;
                    accuracy: string;
                    gears?: ActorSchema['gears'];
                    notes?: MaybeEmpty<string>;
                }>;
            };
            ranges: OneOrMany<{
                name: string;
                name_english: string;
                short: MaybeEmpty<string>;
                medium: MaybeEmpty<string>;
                long: MaybeEmpty<string>;
                extreme: MaybeEmpty<string>;
            }>;
            alternateranges: OneOrMany<{
                name: MaybeEmpty<string>;
                name_english: MaybeEmpty<string>;
                short: MaybeEmpty<string>;
                medium: MaybeEmpty<string>;
                long: MaybeEmpty<string>;
                extreme: MaybeEmpty<string>;
            }>;
            underbarrel?: ActorSchema['weapons'];
            availableammo: string;
            currentammo: string;
            currentammo_english: string;
            clips: MaybeEmpty<{
                clip: OneOrMany<{
                    name: string;
                    english_name: string;
                    count: string;
                    location: MaybeEmpty<string>;
                    id: string;
                    ammotype?: {
                        weaponbonusdamage: string;
                        weaponbonusdamage_english: string;
                        weaponbonusap: string;
                        weaponbonusap_english: string;
                        weaponbonusacc: string;
                        weaponbonusrange: string;
                        weaponbonuspool: MaybeEmpty<string>;
                        weaponbonussmartlinkpool: MaybeEmpty<string>;
                        flechetteweaponbonusdamage: string;
                        flechetteweaponbonusdamage_english: string;
                        flechetteweaponbonusap: string;
                        flechetteweaponbonusap_english: string;
                        flechetteweaponbonusacc: string;
                        flechetteweaponbonusrange: string;
                        flechetteweaponbonuspool: MaybeEmpty<string>;
                        flechetteweaponbonussmartlinkpool: MaybeEmpty<string>;
                        DV: string;
                        BonusRange: string;
                    };
                }>;    
            }>;
            dicepool: string;
            dicepool_noammo: string;
            skill: MaybeEmpty<string>;
            wirelesson: TruthyString;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    cyberwares: MaybeEmpty<{
        cyberware: OneOrMany<{
            guid?: string;
            sourceid?: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            category: string;
            category_english: string;
            ess: string;
            capacity: string;
            avail: string;
            cost: string;
            owncost: string;
            weight: string;
            ownweight: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            rating: string;
            minrating: string;
            maxrating: string;
            ratinglabel: string;
            allowsubsystems: MaybeEmpty<string>;
            wirelesson: TruthyString;
            grade: string;
            location: MaybeEmpty<string>;
            extra: MaybeEmpty<string>;
            improvementsource: MaybeEmpty<string>;
            isgeneware: TruthyString;
            attack: string;
            sleaze: string;
            dataprocessing: string;
            firewall: string;
            devicerating: string;
            programlimit: string;
            iscommlink: TruthyString;
            isprogram: TruthyString;
            active: TruthyString;
            homenode: TruthyString;
            conditionmonitor: string;
            matrixcmfilled: string;
            gears?: ActorSchema['gears'];
            children: ActorSchema['cyberwares'];
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    qualities: MaybeEmpty<{
        quality: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            extra: MaybeEmpty<string>;
            extra_english: MaybeEmpty<string>;
            bp: string;
            qualitytype: string;
            qualitytype_english: string;
            qualitysource: MaybeEmpty<string>;
            metagenic: TruthyString;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    lifestyles: MaybeEmpty<{
        lifestyle: OneOrMany<{
            guid: string;
            sourceid: string;
            name: MaybeEmpty<string>;
            city: MaybeEmpty<string>;
            district: MaybeEmpty<string>;
            borough: MaybeEmpty<string>;
            cost: string;
            totalmonthlycost: string;
            totalcost: string;
            dice: string;
            multiplier: string;
            months: string;
            purchased: TruthyString;
            type: string;
            increment: string;
            bonuslp: string;
            baselifestyle: string;
            baselifestyle_english: string;
            trustfund: TruthyString;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            qualities: MaybeEmpty<{
                quality: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    fullname: string;
                    fullname_english: string;
                    formattedname: string;
                    formattedname_english: string;
                    extra: MaybeEmpty<string>;
                    lp: string;
                    cost: string;
                    lifestylequalitytype: string;
                    lifestylequalitytype_english: string;
                    lifestylequalitysource: MaybeEmpty<string>;
                    free: TruthyString;
                    freebylifestyle: TruthyString;
                    isfreegrid: TruthyString;
                    source: MaybeEmpty<string>;
                    page: MaybeEmpty<string>;
                    notes?: MaybeEmpty<string>;
                }>;
            }>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    gears: MaybeEmpty<{
        gear: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            category: string;
            category_english: string;
            ispersona: TruthyString;
            isammo: TruthyString;
            issin: TruthyString;
            capacity: MaybeEmpty<string>;
            armorcapacity: MaybeEmpty<string>;
            maxrating: MaybeEmpty<string>;
            rating: string;
            qty: string;
            avail: string;
            avail_english: string;
            cost: string;
            owncost: string;
            weight: string;
            ownweight: string;
            extra: MaybeEmpty<string>;
            bonded: TruthyString;
            equipped: TruthyString;
            wirelesson: TruthyString;
            location: MaybeEmpty<string>;
            gearname: MaybeEmpty<string>;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            attack: string;
            sleaze: string;
            dataprocessing: string;
            firewall: string;
            devicerating: string;
            programlimit: string;
            iscommlink: TruthyString;
            isprogram: TruthyString;
            active: TruthyString;
            homenode: TruthyString;
            conditionmonitor: string;
            matrixcmfilled: string;
            children: ActorSchema['gears'];
            weaponbonusdamage?: string;
            weaponbonusdamage_english?: string;
            weaponbonusap?: string;
            weaponbonusap_english?: string;
            weaponbonusacc?: string;
            weaponbonusrange?: string;
            weaponbonuspool?: MaybeEmpty<string>;
            weaponbonussmartlinkpool?: MaybeEmpty<string>;
            flechetteweaponbonusdamage?: string;
            flechetteweaponbonusdamage_english?: string;
            flechetteweaponbonusap?: string;
            flechetteweaponbonusap_english?: string;
            flechetteweaponbonusacc?: string;
            flechetteweaponbonusrange?: string;
            flechetteweaponbonuspool?: MaybeEmpty<string>;
            flechetteweaponbonussmartlinkpool?: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    drugs: MaybeEmpty<{
        drug: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            category: string;
            category_english: string;
            grade: string;
            qty: string;
            addictionthreshold: string;
            addictionrating: string;
            initiative: string;
            initiativedice: string;
            speed: string;
            duration: string;
            duration_english: string;
            crashdamage: string;
            avail: string;
            avail_english: string;
            cost: string;
            attributes: MaybeEmpty<{
                attribute: OneOrMany<{
                    name: string;
                    name_english: string;
                    value: string;
                }>;
            }>;
            limits: MaybeEmpty<{
                limit: OneOrMany<{
                    name: string;
                    name_english: string;
                    value: string;
                }>;
            }>;
            qualities: MaybeEmpty<{
                quality: OneOrMany<{
                    name: string;
                    name_english: string;
                }>;
            }>;
            infos: MaybeEmpty<{
                info: OneOrMany<{
                    name: string;
                    name_english: string;
                }>;
            }>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    vehicles: MaybeEmpty<{
        vehicle: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            category: string;
            category_english: string;
            isdrone: TruthyString;
            handling: string;
            accel: string;
            speed: string;
            pilot: string;
            body: string;
            armor: string;
            seats: string;
            sensor: string;
            avail: string;
            cost: string;
            owncost: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            physicalcm: string;
            physicalcmfilled: string;
            vehiclename: MaybeEmpty<string>;
            maneuver: string;
            location: MaybeEmpty<string>;
            attack: string;
            sleaze: string;
            dataprocessing: string;
            firewall: string;
            devicerating: string;
            programlimit: string;
            iscommlink: TruthyString;
            isprogram: TruthyString;
            active: TruthyString;
            homenode: TruthyString;
            matrixcm: string;
            matrixcmfilled: string;
            mods: MaybeEmpty<{
                mod: OneOrMany<{
                    guid: string;
                    sourceid: string;
                    name: string;
                    name_english: string;
                    fullname: string;
                    fullname_english: string;
                    category: string;
                    category_english: string;
                    limit: MaybeEmpty<string>;
                    slots: string;
                    rating?: string;
                    ratinglabel?: string;
                    avail: string;
                    cost: string;
                    owncost: string;
                    source: MaybeEmpty<string>;
                    wirelesson?: TruthyString;
                    page: MaybeEmpty<string>;
                    location?: MaybeEmpty<string>;
                    included: TruthyString;
                    weapons: ActorSchema['weapons'];
                    cyberwares?: ActorSchema['cyberwares'];
                    notes?: MaybeEmpty<string>;
                    mods?: null;
                }>;
            }>;
            gears: ActorSchema['gears'];
            weapons: ActorSchema['weapons'];
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    initiationgrade: MaybeEmpty<{
        initiationgrade: OneOrMany<{
            guid: string;
            grade: string;
            group: TruthyString;
            ordeal: TruthyString;
            schooling: TruthyString;
            technomancer: TruthyString;
            notes?: MaybeEmpty<string>;
        }>;
        metamagics: OneOrMany<MaybeEmpty<{
            metamagic: {
                guid: string;
                sourceid: string;
                name: string;
                name_english: string;
                fullname: string;
                fullname_english: string;
                source: MaybeEmpty<string>;
                page: MaybeEmpty<string>;
                grade: string;
                improvementsource: MaybeEmpty<string>;
                notes?: MaybeEmpty<string>;
            };
        }>>;
        arts: OneOrMany<MaybeEmpty<{
            art: {
                guid: string;
                sourceid: string;
                name: string;
                name_english: string;
                fullname: string;
                fullname_english: string;
                source: MaybeEmpty<string>;
                page: MaybeEmpty<string>;
                improvementsource: MaybeEmpty<string>;
                notes?: MaybeEmpty<string>;
            };
        }>>;
        enhancements: OneOrMany<MaybeEmpty<{
            enhancement: {
                guid: string;
                sourceid: string;
                name: string;   
                name_english: string;
                fullname: string;
                fullname_english: string;
                source: MaybeEmpty<string>;
                page: MaybeEmpty<string>;
                improvementsource: MaybeEmpty<string>;
                notes?: MaybeEmpty<string>;
            };
        }>>;
    }>;
    metamagics: MaybeEmpty<{
        metamagic: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            grade: string;
            improvementsource: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    arts: MaybeEmpty<{
        art: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            improvementsource: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    enhancements: MaybeEmpty<{
        enhancement: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;   
            name_english: string;
            fullname: string;
            fullname_english: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            improvementsource: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    critterpowers: MaybeEmpty<{
        critterpower: OneOrMany<{
            guid: string;
            sourceid: string;
            name: string;
            name_english: string;
            fullname: string;
            fullname_english: string;
            extra: MaybeEmpty<string>;
            extra_english: MaybeEmpty<string>;
            category: string;
            category_english: string;
            type: string;
            type_english: string;
            action: MaybeEmpty<string>;
            action_english: MaybeEmpty<string>;
            range: MaybeEmpty<string>;
            range_english: MaybeEmpty<string>;
            duration: MaybeEmpty<string>;
            duration_english: MaybeEmpty<string>;
            karma: string;
            source: MaybeEmpty<string>;
            page: MaybeEmpty<string>;
            notes?: MaybeEmpty<string>;
        }>;
    }>;
    sustainedobjects: MaybeEmpty<{
        sustainedobject: OneOrMany<{
            name: string;
            name_english: string;
            fullname: string;
            force: string;
            nethits: string;
            self: string;
        }>;
    }>;
    otherarmors: MaybeEmpty<{
        otherarmor: OneOrMany<{
            guid: string;
            sourcename: string;
            objectname: string;
            objectname_english: string;
            armor: string;
            improvesource: MaybeEmpty<string>;
            enabled: TruthyString;
            customname: MaybeEmpty<string>;
            customgroup: MaybeEmpty<string>;
        }>;
    }>;
    calendar: MaybeEmpty<{
        week: OneOrMany<{
            guid: string;
            year: string;
            week: string;
        }>;
    }>;
}
