{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/base64-js/index.js","node_modules/browser-resolve/empty.js","node_modules/buffer/index.js","node_modules/core-util-is/lib/util.js","node_modules/events/events.js","node_modules/ieee754/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/isarray/index.js","node_modules/process-nextick-args/index.js","node_modules/process/browser.js","node_modules/readable-stream/duplex-browser.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/lib/internal/streams/BufferList.js","node_modules/readable-stream/lib/internal/streams/destroy.js","node_modules/readable-stream/lib/internal/streams/stream-browser.js","node_modules/readable-stream/passthrough.js","node_modules/readable-stream/readable-browser.js","node_modules/readable-stream/transform.js","node_modules/readable-stream/writable-browser.js","node_modules/regenerator-runtime/runtime.js","node_modules/safe-buffer/index.js","node_modules/sax/lib/sax.js","node_modules/stream-browserify/index.js","node_modules/string_decoder/lib/string_decoder.js","node_modules/timers-browserify/main.js","node_modules/util-deprecate/browser.js","node_modules/xml2js/lib/bom.js","node_modules/xml2js/lib/builder.js","node_modules/xml2js/lib/defaults.js","node_modules/xml2js/lib/parser.js","node_modules/xml2js/lib/processors.js","node_modules/xml2js/lib/xml2js.js","node_modules/xmlbuilder/lib/DocumentPosition.js","node_modules/xmlbuilder/lib/NodeType.js","node_modules/xmlbuilder/lib/Utility.js","node_modules/xmlbuilder/lib/WriterState.js","node_modules/xmlbuilder/lib/XMLAttribute.js","node_modules/xmlbuilder/lib/XMLCData.js","node_modules/xmlbuilder/lib/XMLCharacterData.js","node_modules/xmlbuilder/lib/XMLComment.js","node_modules/xmlbuilder/lib/XMLDOMConfiguration.js","node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js","node_modules/xmlbuilder/lib/XMLDOMImplementation.js","node_modules/xmlbuilder/lib/XMLDOMStringList.js","node_modules/xmlbuilder/lib/XMLDTDAttList.js","node_modules/xmlbuilder/lib/XMLDTDElement.js","node_modules/xmlbuilder/lib/XMLDTDEntity.js","node_modules/xmlbuilder/lib/XMLDTDNotation.js","node_modules/xmlbuilder/lib/XMLDeclaration.js","node_modules/xmlbuilder/lib/XMLDocType.js","node_modules/xmlbuilder/lib/XMLDocument.js","node_modules/xmlbuilder/lib/XMLDocumentCB.js","node_modules/xmlbuilder/lib/XMLDummy.js","node_modules/xmlbuilder/lib/XMLElement.js","node_modules/xmlbuilder/lib/XMLNamedNodeMap.js","node_modules/xmlbuilder/lib/XMLNode.js","node_modules/xmlbuilder/lib/XMLNodeList.js","node_modules/xmlbuilder/lib/XMLProcessingInstruction.js","node_modules/xmlbuilder/lib/XMLRaw.js","node_modules/xmlbuilder/lib/XMLStreamWriter.js","node_modules/xmlbuilder/lib/XMLStringWriter.js","node_modules/xmlbuilder/lib/XMLStringifier.js","node_modules/xmlbuilder/lib/XMLText.js","node_modules/xmlbuilder/lib/XMLWriterBase.js","node_modules/xmlbuilder/lib/index.js","src/module/actor/SR5Actor.ts","src/module/actor/SR5ActorSheet.ts","src/module/actor/prep/ActorPrepFactory.ts","src/module/actor/prep/BaseActorPrep.ts","src/module/actor/prep/CharacterPrep.ts","src/module/actor/prep/CritterPrep.ts","src/module/actor/prep/SpiritPrep.ts","src/module/actor/prep/SpritePrep.ts","src/module/actor/prep/VehiclePrep.ts","src/module/actor/prep/functions/AttributesPrep.ts","src/module/actor/prep/functions/ConditionMonitorsPrep.ts","src/module/actor/prep/functions/InitiativePrep.ts","src/module/actor/prep/functions/ItemPrep.ts","src/module/actor/prep/functions/LimitsPrep.ts","src/module/actor/prep/functions/MatrixPrep.ts","src/module/actor/prep/functions/ModifiersPrep.ts","src/module/actor/prep/functions/MovementPrep.ts","src/module/actor/prep/functions/NPCPrep.ts","src/module/actor/prep/functions/SkillsPrep.ts","src/module/actor/prep/functions/WoundsPrep.ts","src/module/apps/ChangelogApplication.ts","src/module/apps/characterImport/CharacterImporter.js","src/module/apps/characterImport/CharacterInfoUpdater.js","src/module/apps/characterImport/ItemsParser.js","src/module/apps/characterImport/gearImport/BaseGearParser.ts","src/module/apps/characterImport/gearImport/DeviceParser.ts","src/module/apps/characterImport/gearImport/GearsParser.ts","src/module/apps/characterImport/gearImport/ParserSelector.ts","src/module/apps/characterImport/gearImport/ProgramParser.ts","src/module/apps/characterImport/gearImport/SinParser.ts","src/module/apps/chummer-import-form.js","src/module/apps/dialogs/DamageApplicationDialog.ts","src/module/apps/dialogs/DeleteConfirmationDialog.ts","src/module/apps/dialogs/FormDialog.ts","src/module/apps/dialogs/ShadowrunActorDialogs.ts","src/module/apps/dialogs/ShadowrunItemDialog.ts","src/module/apps/dialogs/ShadowrunTestDialog.ts","src/module/apps/gmtools/OverwatchScoreTracker.js","src/module/apps/skills/KnowledgeSkillEditForm.ts","src/module/apps/skills/LanguageSkillEditForm.ts","src/module/apps/skills/SkillEditForm.ts","src/module/canvas.ts","src/module/chat.ts","src/module/combat/SR5Combat.ts","src/module/config.ts","src/module/constants.ts","src/module/dataTemplates.ts","src/module/dataWrappers/DataWrapper.ts","src/module/handlebars/BasicHelpers.ts","src/module/handlebars/HandlebarManager.ts","src/module/handlebars/HandlebarTemplates.ts","src/module/handlebars/ItemLineHelpers.ts","src/module/handlebars/RollAndLabelHelpers.ts","src/module/handlebars/SkillLineHelpers.ts","src/module/helpers.ts","src/module/hooks.ts","src/module/importer/apps/import-form.ts","src/module/importer/helper/ImportHelper.ts","src/module/importer/helper/ImportStrategy.ts","src/module/importer/helper/JSONStrategy.ts","src/module/importer/helper/XMLStrategy.ts","src/module/importer/importer/AmmoImporter.ts","src/module/importer/importer/ArmorImporter.ts","src/module/importer/importer/ComplexFormImporter.ts","src/module/importer/importer/Constants.ts","src/module/importer/importer/CritterPowerImporter.ts","src/module/importer/importer/DataImporter.ts","src/module/importer/importer/DeviceImporter.ts","src/module/importer/importer/EquipmentImporter.ts","src/module/importer/importer/ModImporter.ts","src/module/importer/importer/QualityImporter.ts","src/module/importer/importer/SpellImporter.ts","src/module/importer/importer/WareImporter.ts","src/module/importer/importer/WeaponImporter.ts","src/module/importer/parser/Parser.ts","src/module/importer/parser/ParserMap.ts","src/module/importer/parser/armor/ArmorParserBase.ts","src/module/importer/parser/complex-form/ComplexFormParserBase.ts","src/module/importer/parser/critter-power/CritterPowerParserBase.ts","src/module/importer/parser/item/ItemParserBase.ts","src/module/importer/parser/item/TechnologyItemParserBase.ts","src/module/importer/parser/mod/ModParserBase.ts","src/module/importer/parser/quality/QualityParserBase.ts","src/module/importer/parser/spell/CombatSpellParser.ts","src/module/importer/parser/spell/DetectionSpellImporter.ts","src/module/importer/parser/spell/IllusionSpellParser.ts","src/module/importer/parser/spell/ManipulationSpellParser.ts","src/module/importer/parser/spell/SpellParserBase.ts","src/module/importer/parser/ware/CyberwareParser.ts","src/module/importer/parser/weapon/MeleeParser.ts","src/module/importer/parser/weapon/RangedParser.ts","src/module/importer/parser/weapon/ThrownParser.ts","src/module/importer/parser/weapon/WeaponParserBase.ts","src/module/item/ChatData.ts","src/module/item/SR5Item.ts","src/module/item/SR5ItemDataWrapper.ts","src/module/item/SR5ItemSheet.ts","src/module/macros.ts","src/module/main.ts","src/module/migrator/Migrator.ts","src/module/migrator/VersionMigration.ts","src/module/migrator/versions/LegacyMigration.ts","src/module/migrator/versions/Version0_6_10.ts","src/module/migrator/versions/Version0_6_5.ts","src/module/migrator/versions/Version0_7_2.ts","src/module/parts/PartsList.ts","src/module/rolls/ShadowrunRoller.ts","src/module/settings.ts","src/module/template.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxjvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxlrqzuhvnxlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplhhjxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","module.exports = require('events').EventEmitter;\n","module.exports = require('./readable').PassThrough\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./lib/_stream_writable.js');\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  exports.stripBOM = function(str) {\n    if (str[0] === '\\uFEFF') {\n      return str.substring(1);\n    } else {\n      return str;\n    }\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,\n    hasProp = {}.hasOwnProperty;\n\n  builder = require('xmlbuilder');\n\n  defaults = require('./defaults').defaults;\n\n  requiresCDATA = function(entry) {\n    return typeof entry === \"string\" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);\n  };\n\n  wrapCDATA = function(entry) {\n    return \"<![CDATA[\" + (escapeCDATA(entry)) + \"]]>\";\n  };\n\n  escapeCDATA = function(entry) {\n    return entry.replace(']]>', ']]]]><![CDATA[>');\n  };\n\n  exports.Builder = (function() {\n    function Builder(opts) {\n      var key, ref, value;\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n    }\n\n    Builder.prototype.buildObject = function(rootObj) {\n      var attrkey, charkey, render, rootElement, rootName;\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {\n        rootName = Object.keys(rootObj)[0];\n        rootObj = rootObj[rootName];\n      } else {\n        rootName = this.options.rootName;\n      }\n      render = (function(_this) {\n        return function(element, obj) {\n          var attr, child, entry, index, key, value;\n          if (typeof obj !== 'object') {\n            if (_this.options.cdata && requiresCDATA(obj)) {\n              element.raw(wrapCDATA(obj));\n            } else {\n              element.txt(obj);\n            }\n          } else if (Array.isArray(obj)) {\n            for (index in obj) {\n              if (!hasProp.call(obj, index)) continue;\n              child = obj[index];\n              for (key in child) {\n                entry = child[key];\n                element = render(element.ele(key), entry).up();\n              }\n            }\n          } else {\n            for (key in obj) {\n              if (!hasProp.call(obj, key)) continue;\n              child = obj[key];\n              if (key === attrkey) {\n                if (typeof child === \"object\") {\n                  for (attr in child) {\n                    value = child[attr];\n                    element = element.att(attr, value);\n                  }\n                }\n              } else if (key === charkey) {\n                if (_this.options.cdata && requiresCDATA(child)) {\n                  element = element.raw(wrapCDATA(child));\n                } else {\n                  element = element.txt(child);\n                }\n              } else if (Array.isArray(child)) {\n                for (index in child) {\n                  if (!hasProp.call(child, index)) continue;\n                  entry = child[index];\n                  if (typeof entry === 'string') {\n                    if (_this.options.cdata && requiresCDATA(entry)) {\n                      element = element.ele(key).raw(wrapCDATA(entry)).up();\n                    } else {\n                      element = element.ele(key, entry).up();\n                    }\n                  } else {\n                    element = render(element.ele(key), entry).up();\n                  }\n                }\n              } else if (typeof child === \"object\") {\n                element = render(element.ele(key), child).up();\n              } else {\n                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {\n                  element = element.ele(key).raw(wrapCDATA(child)).up();\n                } else {\n                  if (child == null) {\n                    child = '';\n                  }\n                  element = element.ele(key, child.toString()).up();\n                }\n              }\n            }\n          }\n          return element;\n        };\n      })(this);\n      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n        headless: this.options.headless,\n        allowSurrogateChars: this.options.allowSurrogateChars\n      });\n      return render(rootElement, rootObj).end(this.options.renderOpts);\n    };\n\n    return Builder;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      emptyTag: ''\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      preserveChildrenOrder: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      rootName: 'root',\n      xmldec: {\n        'version': '1.0',\n        'encoding': 'UTF-8',\n        'standalone': true\n      },\n      doctype: null,\n      renderOpts: {\n        'pretty': true,\n        'indent': '  ',\n        'newline': '\\n'\n      },\n      headless: false,\n      chunkSize: 10000,\n      emptyTag: '',\n      cdata: false\n    }\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  sax = require('sax');\n\n  events = require('events');\n\n  bom = require('./bom');\n\n  processors = require('./processors');\n\n  setImmediate = require('timers').setImmediate;\n\n  defaults = require('./defaults').defaults;\n\n  isEmpty = function(thing) {\n    return typeof thing === \"object\" && (thing != null) && Object.keys(thing).length === 0;\n  };\n\n  processItem = function(processors, item, key) {\n    var i, len, process;\n    for (i = 0, len = processors.length; i < len; i++) {\n      process = processors[i];\n      item = process(item, key);\n    }\n    return item;\n  };\n\n  exports.Parser = (function(superClass) {\n    extend(Parser, superClass);\n\n    function Parser(opts) {\n      this.parseStringPromise = bind(this.parseStringPromise, this);\n      this.parseString = bind(this.parseString, this);\n      this.reset = bind(this.reset, this);\n      this.assignOrPush = bind(this.assignOrPush, this);\n      this.processAsync = bind(this.processAsync, this);\n      var key, ref, value;\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n      if (this.options.normalizeTags) {\n        if (!this.options.tagNameProcessors) {\n          this.options.tagNameProcessors = [];\n        }\n        this.options.tagNameProcessors.unshift(processors.normalize);\n      }\n      this.reset();\n    }\n\n    Parser.prototype.processAsync = function() {\n      var chunk, err;\n      try {\n        if (this.remaining.length <= this.options.chunkSize) {\n          chunk = this.remaining;\n          this.remaining = '';\n          this.saxParser = this.saxParser.write(chunk);\n          return this.saxParser.close();\n        } else {\n          chunk = this.remaining.substr(0, this.options.chunkSize);\n          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n          this.saxParser = this.saxParser.write(chunk);\n          return setImmediate(this.processAsync);\n        }\n      } catch (error1) {\n        err = error1;\n        if (!this.saxParser.errThrown) {\n          this.saxParser.errThrown = true;\n          return this.emit(err);\n        }\n      }\n    };\n\n    Parser.prototype.assignOrPush = function(obj, key, newValue) {\n      if (!(key in obj)) {\n        if (!this.options.explicitArray) {\n          return obj[key] = newValue;\n        } else {\n          return obj[key] = [newValue];\n        }\n      } else {\n        if (!(obj[key] instanceof Array)) {\n          obj[key] = [obj[key]];\n        }\n        return obj[key].push(newValue);\n      }\n    };\n\n    Parser.prototype.reset = function() {\n      var attrkey, charkey, ontext, stack;\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      this.saxParser.errThrown = false;\n      this.saxParser.onerror = (function(_this) {\n        return function(error) {\n          _this.saxParser.resume();\n          if (!_this.saxParser.errThrown) {\n            _this.saxParser.errThrown = true;\n            return _this.emit(\"error\", error);\n          }\n        };\n      })(this);\n      this.saxParser.onend = (function(_this) {\n        return function() {\n          if (!_this.saxParser.ended) {\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      this.saxParser.ended = false;\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      this.saxParser.onopentag = (function(_this) {\n        return function(node) {\n          var key, newValue, obj, processedKey, ref;\n          obj = {};\n          obj[charkey] = \"\";\n          if (!_this.options.ignoreAttrs) {\n            ref = node.attributes;\n            for (key in ref) {\n              if (!hasProp.call(ref, key)) continue;\n              if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                obj[attrkey] = {};\n              }\n              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n              if (_this.options.mergeAttrs) {\n                _this.assignOrPush(obj, processedKey, newValue);\n              } else {\n                obj[attrkey][processedKey] = newValue;\n              }\n            }\n          }\n          obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n          if (_this.options.xmlns) {\n            obj[_this.options.xmlnskey] = {\n              uri: node.uri,\n              local: node.local\n            };\n          }\n          return stack.push(obj);\n        };\n      })(this);\n      this.saxParser.onclosetag = (function(_this) {\n        return function() {\n          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n          obj = stack.pop();\n          nodeName = obj[\"#name\"];\n          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n            delete obj[\"#name\"];\n          }\n          if (obj.cdata === true) {\n            cdata = obj.cdata;\n            delete obj.cdata;\n          }\n          s = stack[stack.length - 1];\n          if (obj[charkey].match(/^\\s*$/) && !cdata) {\n            emptyStr = obj[charkey];\n            delete obj[charkey];\n          } else {\n            if (_this.options.trim) {\n              obj[charkey] = obj[charkey].trim();\n            }\n            if (_this.options.normalize) {\n              obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n            }\n            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n              obj = obj[charkey];\n            }\n          }\n          if (isEmpty(obj)) {\n            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;\n          }\n          if (_this.options.validator != null) {\n            xpath = \"/\" + ((function() {\n              var i, len, results;\n              results = [];\n              for (i = 0, len = stack.length; i < len; i++) {\n                node = stack[i];\n                results.push(node[\"#name\"]);\n              }\n              return results;\n            })()).concat(nodeName).join(\"/\");\n            (function() {\n              var err;\n              try {\n                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n              } catch (error1) {\n                err = error1;\n                return _this.emit(\"error\", err);\n              }\n            })();\n          }\n          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n            if (!_this.options.preserveChildrenOrder) {\n              node = {};\n              if (_this.options.attrkey in obj) {\n                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                delete obj[_this.options.attrkey];\n              }\n              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                node[_this.options.charkey] = obj[_this.options.charkey];\n                delete obj[_this.options.charkey];\n              }\n              if (Object.getOwnPropertyNames(obj).length > 0) {\n                node[_this.options.childkey] = obj;\n              }\n              obj = node;\n            } else if (s) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              objClone = {};\n              for (key in obj) {\n                if (!hasProp.call(obj, key)) continue;\n                objClone[key] = obj[key];\n              }\n              s[_this.options.childkey].push(objClone);\n              delete obj[\"#name\"];\n              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                obj = obj[charkey];\n              }\n            }\n          }\n          if (stack.length > 0) {\n            return _this.assignOrPush(s, nodeName, obj);\n          } else {\n            if (_this.options.explicitRoot) {\n              old = obj;\n              obj = {};\n              obj[nodeName] = old;\n            }\n            _this.resultObject = obj;\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      ontext = (function(_this) {\n        return function(text) {\n          var charChild, s;\n          s = stack[stack.length - 1];\n          if (s) {\n            s[charkey] += text;\n            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, '').trim() !== '')) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              charChild = {\n                '#name': '__text__'\n              };\n              charChild[charkey] = text;\n              if (_this.options.normalize) {\n                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n              }\n              s[_this.options.childkey].push(charChild);\n            }\n            return s;\n          }\n        };\n      })(this);\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = (function(_this) {\n        return function(text) {\n          var s;\n          s = ontext(text);\n          if (s) {\n            return s.cdata = true;\n          }\n        };\n      })(this);\n    };\n\n    Parser.prototype.parseString = function(str, cb) {\n      var err;\n      if ((cb != null) && typeof cb === \"function\") {\n        this.on(\"end\", function(result) {\n          this.reset();\n          return cb(null, result);\n        });\n        this.on(\"error\", function(err) {\n          this.reset();\n          return cb(err);\n        });\n      }\n      try {\n        str = str.toString();\n        if (str.trim() === '') {\n          this.emit(\"end\", null);\n          return true;\n        }\n        str = bom.stripBOM(str);\n        if (this.options.async) {\n          this.remaining = str;\n          setImmediate(this.processAsync);\n          return this.saxParser;\n        }\n        return this.saxParser.write(str).close();\n      } catch (error1) {\n        err = error1;\n        if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n          this.emit('error', err);\n          return this.saxParser.errThrown = true;\n        } else if (this.saxParser.ended) {\n          throw err;\n        }\n      }\n    };\n\n    Parser.prototype.parseStringPromise = function(str) {\n      return new Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.parseString(str, function(err, value) {\n            if (err) {\n              return reject(err);\n            } else {\n              return resolve(value);\n            }\n          });\n        };\n      })(this));\n    };\n\n    return Parser;\n\n  })(events);\n\n  exports.parseString = function(str, a, b) {\n    var cb, options, parser;\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n      options = {};\n    }\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n\n  exports.parseStringPromise = function(str, a) {\n    var options, parser;\n    if (typeof a === 'object') {\n      options = a;\n    }\n    parser = new exports.Parser(options);\n    return parser.parseStringPromise(str);\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var prefixMatch;\n\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function(str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function(str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function(str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n    return str;\n  };\n\n  exports.parseBooleans = function(str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n    return str;\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, parser, processors,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  defaults = require('./defaults');\n\n  builder = require('./builder');\n\n  parser = require('./parser');\n\n  processors = require('./processors');\n\n  exports.defaults = defaults.defaults;\n\n  exports.processors = processors;\n\n  exports.ValidationError = (function(superClass) {\n    extend(ValidationError, superClass);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n\n  })(Error);\n\n  exports.Builder = builder.Builder;\n\n  exports.Parser = parser.Parser;\n\n  exports.parseString = parser.parseString;\n\n  exports.parseStringPromise = parser.parseStringPromise;\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Disconnected: 1,\n    Preceding: 2,\n    Following: 4,\n    Contains: 8,\n    ContainedBy: 16,\n    ImplementationSpecific: 32\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Element: 1,\n    Attribute: 2,\n    Text: 3,\n    CData: 4,\n    EntityReference: 5,\n    EntityDeclaration: 6,\n    ProcessingInstruction: 7,\n    Comment: 8,\n    Document: 9,\n    DocType: 10,\n    DocumentFragment: 11,\n    NotationDeclaration: 12,\n    Declaration: 201,\n    Raw: 202,\n    AttributeDeclaration: 203,\n    ElementDeclaration: 204,\n    Dummy: 205\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function() {\n    var i, key, len, source, sources, target;\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    None: 0,\n    OpenTag: 1,\n    InsideTag: 2,\n    CloseTag: 3\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLNode;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLAttribute = (function() {\n    function XMLAttribute(parent, name, value) {\n      this.parent = parent;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.value = this.stringify.attValue(value);\n      this.type = NodeType.Attribute;\n      this.isId = false;\n      this.schemaTypeInfo = null;\n    }\n\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function() {\n        return true;\n      }\n    });\n\n    XMLAttribute.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLAttribute.prototype.toString = function(options) {\n      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLAttribute.prototype.debugInfo = function(name) {\n      name = name || this.name;\n      if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else {\n        return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLAttribute.prototype.isEqualNode = function(node) {\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.value !== this.value) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLAttribute;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCData, XMLCharacterData,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLCData = (function(superClass) {\n    extend(XMLCData, superClass);\n\n    function XMLCData(parent, text) {\n      XMLCData.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    XMLCData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCData.prototype.toString = function(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLCData;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLCharacterData, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLCharacterData = (function(superClass) {\n    extend(XMLCharacterData, superClass);\n\n    function XMLCharacterData(parent) {\n      XMLCharacterData.__super__.constructor.call(this, parent);\n      this.value = '';\n    }\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function() {\n        return this.value.length;\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    XMLCharacterData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCharacterData.prototype.substringData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.appendData = function(arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.insertData = function(offset, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.deleteData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.isEqualNode = function(node) {\n      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.data !== this.data) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLCharacterData;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLComment,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n\n  XMLDOMStringList = require('./XMLDOMStringList');\n\n  module.exports = XMLDOMConfiguration = (function() {\n    function XMLDOMConfiguration() {\n      var clonedSelf;\n      this.defaultParams = {\n        \"canonical-form\": false,\n        \"cdata-sections\": false,\n        \"comments\": false,\n        \"datatype-normalization\": false,\n        \"element-content-whitespace\": true,\n        \"entities\": true,\n        \"error-handler\": new XMLDOMErrorHandler(),\n        \"infoset\": true,\n        \"validate-if-schema\": false,\n        \"namespaces\": true,\n        \"namespace-declarations\": true,\n        \"normalize-characters\": false,\n        \"schema-location\": '',\n        \"schema-type\": '',\n        \"split-cdata-sections\": true,\n        \"validate\": false,\n        \"well-formed\": true\n      };\n      this.params = clonedSelf = Object.create(this.defaultParams);\n    }\n\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n\n    XMLDOMConfiguration.prototype.getParameter = function(name) {\n      if (this.params.hasOwnProperty(name)) {\n        return this.params[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n      return true;\n    };\n\n    XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n      if (value != null) {\n        return this.params[name] = value;\n      } else {\n        return delete this.params[name];\n      }\n    };\n\n    return XMLDOMConfiguration;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMErrorHandler;\n\n  module.exports = XMLDOMErrorHandler = (function() {\n    function XMLDOMErrorHandler() {}\n\n    XMLDOMErrorHandler.prototype.handleError = function(error) {\n      throw new Error(error);\n    };\n\n    return XMLDOMErrorHandler;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = (function() {\n    function XMLDOMImplementation() {}\n\n    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n      return true;\n    };\n\n    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLDOMImplementation;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMStringList;\n\n  module.exports = XMLDOMStringList = (function() {\n    function XMLDOMStringList(arr) {\n      this.arr = arr || [];\n    }\n\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\n      get: function() {\n        return this.arr.length;\n      }\n    });\n\n    XMLDOMStringList.prototype.item = function(index) {\n      return this.arr[index] || null;\n    };\n\n    XMLDOMStringList.prototype.contains = function(str) {\n      return this.arr.indexOf(str) !== -1;\n    };\n\n    return XMLDOMStringList;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = (function(superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDElement, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDElement = (function(superClass) {\n    extend(XMLDTDElement, superClass);\n\n    function XMLDTDElement(parent, name, value) {\n      XMLDTDElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    XMLDTDElement.prototype.toString = function(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDElement;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDEntity = (function(superClass) {\n    extend(XMLDTDEntity, superClass);\n\n    function XMLDTDEntity(parent, pe, name, value) {\n      XMLDTDEntity.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n      }\n      if (value == null) {\n        throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n      }\n      this.pe = !!pe;\n      this.name = this.stringify.name(name);\n      this.type = NodeType.EntityDeclaration;\n      if (!isObject(value)) {\n        this.value = this.stringify.dtdEntityValue(value);\n        this.internal = true;\n      } else {\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        if (value.pubID && !value.sysID) {\n          throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n        }\n        this.internal = false;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n        if (value.nData != null) {\n          this.nData = this.stringify.dtdNData(value.nData);\n        }\n        if (this.pe && this.nData) {\n          throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n        }\n      }\n    }\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDTDEntity.prototype.toString = function(options) {\n      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDEntity;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDNotation = (function(superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.NotationDeclaration;\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    XMLDTDNotation.prototype.toString = function(options) {\n      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDNotation;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDeclaration = (function(superClass) {\n    extend(XMLDeclaration, superClass);\n\n    function XMLDeclaration(parent, version, encoding, standalone) {\n      var ref;\n      XMLDeclaration.__super__.constructor.call(this, parent);\n      if (isObject(version)) {\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    XMLDeclaration.prototype.toString = function(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDeclaration;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLDocType = (function(superClass) {\n    extend(XMLDocType, superClass);\n\n    function XMLDocType(parent, pubID, sysID) {\n      var child, i, len, ref, ref1, ref2;\n      XMLDocType.__super__.constructor.call(this, parent);\n      this.type = NodeType.DocType;\n      if (parent.children) {\n        ref = parent.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.Element) {\n            this.name = child.name;\n            break;\n          }\n        }\n      }\n      this.documentObject = parent;\n      if (isObject(pubID)) {\n        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n      }\n      if (sysID == null) {\n        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];\n      }\n      if (pubID != null) {\n        this.pubID = this.stringify.dtdPubID(pubID);\n      }\n      if (sysID != null) {\n        this.sysID = this.stringify.dtdSysID(sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLDocType.prototype.element = function(name, value) {\n      var child;\n      child = new XMLDTDElement(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var child;\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.entity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, false, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.pEntity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, true, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.notation = function(name, value) {\n      var child;\n      child = new XMLDTDNotation(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.toString = function(options) {\n      return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocType.prototype.ele = function(name, value) {\n      return this.element(name, value);\n    };\n\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n    };\n\n    XMLDocType.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocType.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocType.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    XMLDocType.prototype.up = function() {\n      return this.root() || this.documentObject;\n    };\n\n    XMLDocType.prototype.isEqualNode = function(node) {\n      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.name !== this.name) {\n        return false;\n      }\n      if (node.publicId !== this.publicId) {\n        return false;\n      }\n      if (node.systemId !== this.systemId) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLDocType;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isPlainObject = require('./Utility').isPlainObject;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  module.exports = XMLDocument = (function(superClass) {\n    extend(XMLDocument, superClass);\n\n    function XMLDocument(options) {\n      XMLDocument.__super__.constructor.call(this, null);\n      this.name = \"#document\";\n      this.type = NodeType.Document;\n      this.documentURI = null;\n      this.domConfig = new XMLDOMConfiguration();\n      options || (options = {});\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n    }\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDocument.prototype.end = function(writer) {\n      var writerOptions;\n      writerOptions = {};\n      if (!writer) {\n        writer = this.options.writer;\n      } else if (isPlainObject(writer)) {\n        writerOptions = writer;\n        writer = this.options.writer;\n      }\n      return writer.document(this, writer.filterOptions(writerOptions));\n    };\n\n    XMLDocument.prototype.toString = function(options) {\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocument.prototype.createElement = function(tagName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createDocumentFragment = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTextNode = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createComment = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createCDATASection = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttribute = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEntityReference = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.importNode = function(importedNode, deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementById = function(elementId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.adoptNode = function(source) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.normalizeDocument = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEvent = function(eventInterface) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createRange = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLDocument;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n\n  NodeType = require('./NodeType');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLElement = require('./XMLElement');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLDocumentCB = (function() {\n    function XMLDocumentCB(options, onData, onEnd) {\n      var writerOptions;\n      this.name = \"?xml\";\n      this.type = NodeType.Document;\n      options || (options = {});\n      writerOptions = {};\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      } else if (isPlainObject(options.writer)) {\n        writerOptions = options.writer;\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.writer = options.writer;\n      this.writerOptions = this.writer.filterOptions(writerOptions);\n      this.stringify = new XMLStringifier(options);\n      this.onDataCallback = onData || function() {};\n      this.onEndCallback = onEnd || function() {};\n      this.currentNode = null;\n      this.currentLevel = -1;\n      this.openTags = {};\n      this.documentStarted = false;\n      this.documentCompleted = false;\n      this.root = null;\n    }\n\n    XMLDocumentCB.prototype.createChildNode = function(node) {\n      var att, attName, attributes, child, i, len, ref1, ref2;\n      switch (node.type) {\n        case NodeType.CData:\n          this.cdata(node.value);\n          break;\n        case NodeType.Comment:\n          this.comment(node.value);\n          break;\n        case NodeType.Element:\n          attributes = {};\n          ref1 = node.attribs;\n          for (attName in ref1) {\n            if (!hasProp.call(ref1, attName)) continue;\n            att = ref1[attName];\n            attributes[attName] = att.value;\n          }\n          this.node(node.name, attributes);\n          break;\n        case NodeType.Dummy:\n          this.dummy();\n          break;\n        case NodeType.Raw:\n          this.raw(node.value);\n          break;\n        case NodeType.Text:\n          this.text(node.value);\n          break;\n        case NodeType.ProcessingInstruction:\n          this.instruction(node.target, node.value);\n          break;\n        default:\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n      }\n      ref2 = node.children;\n      for (i = 0, len = ref2.length; i < len; i++) {\n        child = ref2[i];\n        this.createChildNode(child);\n        if (child.type === NodeType.Element) {\n          this.up();\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dummy = function() {\n      return this;\n    };\n\n    XMLDocumentCB.prototype.node = function(name, attributes, text) {\n      var ref1;\n      if (name == null) {\n        throw new Error(\"Missing node name.\");\n      }\n      if (this.root && this.currentLevel === -1) {\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n      }\n      this.openCurrent();\n      name = getValue(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];\n      }\n      this.currentNode = new XMLElement(this, name, attributes);\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      if (text != null) {\n        this.text(text);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.element = function(name, attributes, text) {\n      var child, i, len, oldValidationFlag, ref1, root;\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        this.dtdElement.apply(this, arguments);\n      } else {\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n          oldValidationFlag = this.options.noValidation;\n          this.options.noValidation = true;\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\n          root.element(name);\n          this.options.noValidation = oldValidationFlag;\n          ref1 = root.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            this.createChildNode(child);\n            if (child.type === NodeType.Element) {\n              this.up();\n            }\n          }\n        } else {\n          this.node(name, attributes, text);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (!this.currentNode || this.currentNode.children) {\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.text = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLText(this, value);\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.cdata = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLCData(this, value);\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.comment = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLComment(this, value);\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.raw = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLRaw(this, value);\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.instruction = function(target, value) {\n      var i, insTarget, insValue, len, node;\n      this.openCurrent();\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (i = 0, len = target.length; i < len; i++) {\n          insTarget = target[i];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        node = new XMLProcessingInstruction(this, target, value);\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n      var node;\n      this.openCurrent();\n      if (this.documentStarted) {\n        throw new Error(\"declaration() must be the first node.\");\n      }\n      node = new XMLDeclaration(this, version, encoding, standalone);\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n      this.openCurrent();\n      if (root == null) {\n        throw new Error(\"Missing root node name.\");\n      }\n      if (this.root) {\n        throw new Error(\"dtd() must come before the root node.\");\n      }\n      this.currentNode = new XMLDocType(this, pubID, sysID);\n      this.currentNode.rootNodeName = root;\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dtdElement = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDElement(this, name, value);\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.entity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, false, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.pEntity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, true, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.notation = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDNotation(this, name, value);\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.up = function() {\n      if (this.currentLevel < 0) {\n        throw new Error(\"The document node has no parent.\");\n      }\n      if (this.currentNode) {\n        if (this.currentNode.children) {\n          this.closeNode(this.currentNode);\n        } else {\n          this.openNode(this.currentNode);\n        }\n        this.currentNode = null;\n      } else {\n        this.closeNode(this.openTags[this.currentLevel]);\n      }\n      delete this.openTags[this.currentLevel];\n      this.currentLevel--;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.end = function() {\n      while (this.currentLevel >= 0) {\n        this.up();\n      }\n      return this.onEnd();\n    };\n\n    XMLDocumentCB.prototype.openCurrent = function() {\n      if (this.currentNode) {\n        this.currentNode.children = true;\n        return this.openNode(this.currentNode);\n      }\n    };\n\n    XMLDocumentCB.prototype.openNode = function(node) {\n      var att, chunk, name, ref1;\n      if (!node.isOpen) {\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n          this.root = node;\n        }\n        chunk = '';\n        if (node.type === NodeType.Element) {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\n          ref1 = node.attribs;\n          for (name in ref1) {\n            if (!hasProp.call(ref1, name)) continue;\n            att = ref1[name];\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n          }\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\n          this.writerOptions.state = WriterState.InsideTag;\n        } else {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\n          if (node.pubID && node.sysID) {\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\n          }\n          if (node.children) {\n            chunk += ' [';\n            this.writerOptions.state = WriterState.InsideTag;\n          } else {\n            this.writerOptions.state = WriterState.CloseTag;\n            chunk += '>';\n          }\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.onData(chunk, this.currentLevel);\n        return node.isOpen = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.closeNode = function(node) {\n      var chunk;\n      if (!node.isClosed) {\n        chunk = '';\n        this.writerOptions.state = WriterState.CloseTag;\n        if (node.type === NodeType.Element) {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        } else {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.writerOptions.state = WriterState.None;\n        this.onData(chunk, this.currentLevel);\n        return node.isClosed = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.onData = function(chunk, level) {\n      this.documentStarted = true;\n      return this.onDataCallback(chunk, level + 1);\n    };\n\n    XMLDocumentCB.prototype.onEnd = function() {\n      this.documentCompleted = true;\n      return this.onEndCallback();\n    };\n\n    XMLDocumentCB.prototype.debugInfo = function(name) {\n      if (name == null) {\n        return \"\";\n      } else {\n        return \"node: <\" + name + \">\";\n      }\n    };\n\n    XMLDocumentCB.prototype.ele = function() {\n      return this.element.apply(this, arguments);\n    };\n\n    XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n      return this.doctype(root, pubID, sysID);\n    };\n\n    XMLDocumentCB.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLDocumentCB.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.att = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.a = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocumentCB.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocumentCB.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    return XMLDocumentCB;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDummy, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDummy = (function(superClass) {\n    extend(XMLDummy, superClass);\n\n    function XMLDummy(parent) {\n      XMLDummy.__super__.constructor.call(this, parent);\n      this.type = NodeType.Dummy;\n    }\n\n    XMLDummy.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLDummy.prototype.toString = function(options) {\n      return '';\n    };\n\n    return XMLDummy;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLElement = (function(superClass) {\n    extend(XMLElement, superClass);\n\n    function XMLElement(parent, name, attributes) {\n      var child, j, len, ref1;\n      XMLElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing element name. \" + this.debugInfo());\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.Element;\n      this.attribs = {};\n      this.schemaTypeInfo = null;\n      if (attributes != null) {\n        this.attribute(attributes);\n      }\n      if (parent.type === NodeType.Document) {\n        this.isRoot = true;\n        this.documentObject = parent;\n        parent.rootObject = this;\n        if (parent.children) {\n          ref1 = parent.children;\n          for (j = 0, len = ref1.length; j < len; j++) {\n            child = ref1[j];\n            if (child.type === NodeType.DocType) {\n              child.name = this.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    XMLElement.prototype.clone = function() {\n      var att, attName, clonedSelf, ref1;\n      clonedSelf = Object.create(this);\n      if (clonedSelf.isRoot) {\n        clonedSelf.documentObject = null;\n      }\n      clonedSelf.attribs = {};\n      ref1 = this.attribs;\n      for (attName in ref1) {\n        if (!hasProp.call(ref1, attName)) continue;\n        att = ref1[attName];\n        clonedSelf.attribs[attName] = att.clone();\n      }\n      clonedSelf.children = [];\n      this.children.forEach(function(child) {\n        var clonedChild;\n        clonedChild = child.clone();\n        clonedChild.parent = clonedSelf;\n        return clonedSelf.children.push(clonedChild);\n      });\n      return clonedSelf;\n    };\n\n    XMLElement.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLElement.prototype.removeAttribute = function(name) {\n      var attName, j, len;\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo());\n      }\n      name = getValue(name);\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          attName = name[j];\n          delete this.attribs[attName];\n        }\n      } else {\n        delete this.attribs[name];\n      }\n      return this;\n    };\n\n    XMLElement.prototype.toString = function(options) {\n      return this.options.writer.element(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLElement.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.getAttribute = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].value;\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttribute = function(name, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNode = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttributeNode = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.hasAttribute = function(name) {\n      return this.attribs.hasOwnProperty(name);\n    };\n\n    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttribute = function(name, isId) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].isId;\n      } else {\n        return isId;\n      }\n    };\n\n    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.isEqualNode = function(node) {\n      var i, j, ref1;\n      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.attribs.length !== this.attribs.length) {\n        return false;\n      }\n      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {\n        if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    return XMLElement;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNamedNodeMap;\n\n  module.exports = XMLNamedNodeMap = (function() {\n    function XMLNamedNodeMap(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\n      get: function() {\n        return Object.keys(this.nodes).length || 0;\n      }\n    });\n\n    XMLNamedNodeMap.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n      return this.nodes[name];\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n      var oldNode;\n      oldNode = this.nodes[node.nodeName];\n      this.nodes[node.nodeName] = node;\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n      var oldNode;\n      oldNode = this.nodes[name];\n      delete this.nodes[name];\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.item = function(index) {\n      return this.nodes[Object.keys(this.nodes)[index]] || null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLNamedNodeMap;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,\n    hasProp = {}.hasOwnProperty;\n\n  ref1 = require('./Utility'), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n\n  XMLElement = null;\n\n  XMLCData = null;\n\n  XMLComment = null;\n\n  XMLDeclaration = null;\n\n  XMLDocType = null;\n\n  XMLRaw = null;\n\n  XMLText = null;\n\n  XMLProcessingInstruction = null;\n\n  XMLDummy = null;\n\n  NodeType = null;\n\n  XMLNodeList = null;\n\n  XMLNamedNodeMap = null;\n\n  DocumentPosition = null;\n\n  module.exports = XMLNode = (function() {\n    function XMLNode(parent1) {\n      this.parent = parent1;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      this.value = null;\n      this.children = [];\n      this.baseURI = null;\n      if (!XMLElement) {\n        XMLElement = require('./XMLElement');\n        XMLCData = require('./XMLCData');\n        XMLComment = require('./XMLComment');\n        XMLDeclaration = require('./XMLDeclaration');\n        XMLDocType = require('./XMLDocType');\n        XMLRaw = require('./XMLRaw');\n        XMLText = require('./XMLText');\n        XMLProcessingInstruction = require('./XMLProcessingInstruction');\n        XMLDummy = require('./XMLDummy');\n        NodeType = require('./NodeType');\n        XMLNodeList = require('./XMLNodeList');\n        XMLNamedNodeMap = require('./XMLNamedNodeMap');\n        DocumentPosition = require('./DocumentPosition');\n      }\n    }\n\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\n      get: function() {\n        return this.value;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\n      get: function() {\n        if (!this.childNodeList || !this.childNodeList.nodes) {\n          this.childNodeList = new XMLNodeList(this.children);\n        }\n        return this.childNodeList;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\n      get: function() {\n        return this.children[0] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\n      get: function() {\n        return this.children[this.children.length - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i + 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\n      get: function() {\n        return this.document() || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\n      get: function() {\n        var child, j, len, ref2, str;\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n          str = '';\n          ref2 = this.children;\n          for (j = 0, len = ref2.length; j < len; j++) {\n            child = ref2[j];\n            if (child.textContent) {\n              str += child.textContent;\n            }\n          }\n          return str;\n        } else {\n          return null;\n        }\n      },\n      set: function(value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLNode.prototype.setParent = function(parent) {\n      var child, j, len, ref2, results;\n      this.parent = parent;\n      if (parent) {\n        this.options = parent.options;\n        this.stringify = parent.stringify;\n      }\n      ref2 = this.children;\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        results.push(child.setParent(this));\n      }\n      return results;\n    };\n\n    XMLNode.prototype.element = function(name, attributes, text) {\n      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n      lastChild = null;\n      if (attributes === null && (text == null)) {\n        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];\n      }\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          item = name[j];\n          lastChild = this.element(item);\n        }\n      } else if (isFunction(name)) {\n        lastChild = this.element(name.apply());\n      } else if (isObject(name)) {\n        for (key in name) {\n          if (!hasProp.call(name, key)) continue;\n          val = name[key];\n          if (isFunction(val)) {\n            val = val.apply();\n          }\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n            lastChild = this.dummy();\n          } else if (isObject(val) && isEmpty(val)) {\n            lastChild = this.element(key);\n          } else if (!this.options.keepNullNodes && (val == null)) {\n            lastChild = this.dummy();\n          } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n            for (k = 0, len1 = val.length; k < len1; k++) {\n              item = val[k];\n              childNode = {};\n              childNode[key] = item;\n              lastChild = this.element(childNode);\n            }\n          } else if (isObject(val)) {\n            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n              lastChild = this.element(val);\n            } else {\n              lastChild = this.element(key);\n              lastChild.element(val);\n            }\n          } else {\n            lastChild = this.element(key, val);\n          }\n        }\n      } else if (!this.options.keepNullNodes && text === null) {\n        lastChild = this.dummy();\n      } else {\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n          lastChild = this.text(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n          lastChild = this.cdata(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n          lastChild = this.comment(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n          lastChild = this.raw(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n        } else {\n          lastChild = this.node(name, attributes, text);\n        }\n      }\n      if (lastChild == null) {\n        throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n      }\n      return lastChild;\n    };\n\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, newChild, refChild, removed;\n      if (name != null ? name.type : void 0) {\n        newChild = name;\n        refChild = attributes;\n        newChild.setParent(this);\n        if (refChild) {\n          i = children.indexOf(refChild);\n          removed = children.splice(i);\n          children.push(newChild);\n          Array.prototype.push.apply(children, removed);\n        } else {\n          children.push(newChild);\n        }\n        return newChild;\n      } else {\n        if (this.isRoot) {\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n        }\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        child = this.parent.element(name, attributes, text);\n        Array.prototype.push.apply(this.parent.children, removed);\n        return child;\n      }\n    };\n\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, removed;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n      }\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.element(name, attributes, text);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return child;\n    };\n\n    XMLNode.prototype.remove = function() {\n      var i, ref2;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;\n      return this.parent;\n    };\n\n    XMLNode.prototype.node = function(name, attributes, text) {\n      var child, ref2;\n      if (name != null) {\n        name = getValue(name);\n      }\n      attributes || (attributes = {});\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];\n      }\n      child = new XMLElement(this, name, attributes);\n      if (text != null) {\n        child.text(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLNode.prototype.text = function(value) {\n      var child;\n      if (isObject(value)) {\n        this.element(value);\n      }\n      child = new XMLText(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.cdata = function(value) {\n      var child;\n      child = new XMLCData(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.comment = function(value) {\n      var child;\n      child = new XMLComment(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.commentBefore = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.commentAfter = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.raw = function(value) {\n      var child;\n      child = new XMLRaw(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.dummy = function() {\n      var child;\n      child = new XMLDummy(this);\n      return child;\n    };\n\n    XMLNode.prototype.instruction = function(target, value) {\n      var insTarget, insValue, instruction, j, len;\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (j = 0, len = target.length; j < len; j++) {\n          insTarget = target[j];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        instruction = new XMLProcessingInstruction(this, target, value);\n        this.children.push(instruction);\n      }\n      return this;\n    };\n\n    XMLNode.prototype.instructionBefore = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.instructionAfter = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {\n      var doc, xmldec;\n      doc = this.document();\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n      if (doc.children.length === 0) {\n        doc.children.unshift(xmldec);\n      } else if (doc.children[0].type === NodeType.Declaration) {\n        doc.children[0] = xmldec;\n      } else {\n        doc.children.unshift(xmldec);\n      }\n      return doc.root() || doc;\n    };\n\n    XMLNode.prototype.dtd = function(pubID, sysID) {\n      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n      doc = this.document();\n      doctype = new XMLDocType(doc, pubID, sysID);\n      ref2 = doc.children;\n      for (i = j = 0, len = ref2.length; j < len; i = ++j) {\n        child = ref2[i];\n        if (child.type === NodeType.DocType) {\n          doc.children[i] = doctype;\n          return doctype;\n        }\n      }\n      ref3 = doc.children;\n      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {\n        child = ref3[i];\n        if (child.isRoot) {\n          doc.children.splice(i, 0, doctype);\n          return doctype;\n        }\n      }\n      doc.children.push(doctype);\n      return doctype;\n    };\n\n    XMLNode.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLNode.prototype.root = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node.rootObject;\n        } else if (node.isRoot) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.document = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.end = function(options) {\n      return this.document().end(options);\n    };\n\n    XMLNode.prototype.prev = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node. \" + this.debugInfo());\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLNode.prototype.next = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node. \" + this.debugInfo());\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLNode.prototype.importDocument = function(doc) {\n      var clonedRoot;\n      clonedRoot = doc.root().clone();\n      clonedRoot.parent = this;\n      clonedRoot.isRoot = false;\n      this.children.push(clonedRoot);\n      return this;\n    };\n\n    XMLNode.prototype.debugInfo = function(name) {\n      var ref2, ref3;\n      name = name || this.name;\n      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n        return \"\";\n      } else if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n        return \"node: <\" + name + \">\";\n      } else {\n        return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLNode.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLNode.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLNode.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLNode.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.u = function() {\n      return this.up();\n    };\n\n    XMLNode.prototype.importXMLBuilder = function(doc) {\n      return this.importDocument(doc);\n    };\n\n    XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.removeChild = function(oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.appendChild = function(newChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.hasChildNodes = function() {\n      return this.children.length !== 0;\n    };\n\n    XMLNode.prototype.cloneNode = function(deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.normalize = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isSupported = function(feature, version) {\n      return true;\n    };\n\n    XMLNode.prototype.hasAttributes = function() {\n      return this.attribs.length !== 0;\n    };\n\n    XMLNode.prototype.compareDocumentPosition = function(other) {\n      var ref, res;\n      ref = this;\n      if (ref === other) {\n        return 0;\n      } else if (this.document() !== other.document()) {\n        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n        if (Math.random() < 0.5) {\n          res |= DocumentPosition.Preceding;\n        } else {\n          res |= DocumentPosition.Following;\n        }\n        return res;\n      } else if (ref.isAncestor(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Preceding;\n      } else if (ref.isDescendant(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Following;\n      } else if (ref.isPreceding(other)) {\n        return DocumentPosition.Preceding;\n      } else {\n        return DocumentPosition.Following;\n      }\n    };\n\n    XMLNode.prototype.isSameNode = function(other) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isEqualNode = function(node) {\n      var i, j, ref2;\n      if (node.nodeType !== this.nodeType) {\n        return false;\n      }\n      if (node.children.length !== this.children.length) {\n        return false;\n      }\n      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {\n        if (!this.children[i].isEqualNode(node.children[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    XMLNode.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.setUserData = function(key, data, handler) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.getUserData = function(key) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.contains = function(other) {\n      if (!other) {\n        return false;\n      }\n      return other === this || this.isDescendant(other);\n    };\n\n    XMLNode.prototype.isDescendant = function(node) {\n      var child, isDescendantChild, j, len, ref2;\n      ref2 = this.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (node === child) {\n          return true;\n        }\n        isDescendantChild = child.isDescendant(node);\n        if (isDescendantChild) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    XMLNode.prototype.isAncestor = function(node) {\n      return node.isDescendant(this);\n    };\n\n    XMLNode.prototype.isPreceding = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos < thisPos;\n      }\n    };\n\n    XMLNode.prototype.isFollowing = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos > thisPos;\n      }\n    };\n\n    XMLNode.prototype.treePosition = function(node) {\n      var found, pos;\n      pos = 0;\n      found = false;\n      this.foreachTreeNode(this.document(), function(childNode) {\n        pos++;\n        if (!found && childNode === node) {\n          return found = true;\n        }\n      });\n      if (found) {\n        return pos;\n      } else {\n        return -1;\n      }\n    };\n\n    XMLNode.prototype.foreachTreeNode = function(node, func) {\n      var child, j, len, ref2, res;\n      node || (node = this.document());\n      ref2 = node.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (res = func(child)) {\n          return res;\n        } else {\n          res = this.foreachTreeNode(child, func);\n          if (res) {\n            return res;\n          }\n        }\n      }\n    };\n\n    return XMLNode;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNodeList;\n\n  module.exports = XMLNodeList = (function() {\n    function XMLNodeList(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\n      get: function() {\n        return this.nodes.length || 0;\n      }\n    });\n\n    XMLNodeList.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNodeList.prototype.item = function(index) {\n      return this.nodes[index] || null;\n    };\n\n    return XMLNodeList;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLProcessingInstruction = (function(superClass) {\n    extend(XMLProcessingInstruction, superClass);\n\n    function XMLProcessingInstruction(parent, target, value) {\n      XMLProcessingInstruction.__super__.constructor.call(this, parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    XMLProcessingInstruction.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLProcessingInstruction.prototype.toString = function(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLProcessingInstruction;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLNode, XMLRaw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = (function(superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLStreamWriter = (function(superClass) {\n    extend(XMLStreamWriter, superClass);\n\n    function XMLStreamWriter(stream, options) {\n      this.stream = stream;\n      XMLStreamWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStreamWriter.prototype.endline = function(node, options, level) {\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n        return '';\n      } else {\n        return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n      }\n    };\n\n    XMLStreamWriter.prototype.document = function(doc, options) {\n      var child, i, j, k, len, len1, ref, ref1, results;\n      ref = doc.children;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        child = ref[i];\n        child.isLastRootNode = i === doc.children.length - 1;\n      }\n      options = this.filterOptions(options);\n      ref1 = doc.children;\n      results = [];\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        child = ref1[k];\n        results.push(this.writeChildNode(child, options, 0));\n      }\n      return results;\n    };\n\n    XMLStreamWriter.prototype.attribute = function(att, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n    };\n\n    XMLStreamWriter.prototype.cdata = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.comment = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.declaration = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.docType = function(node, options, level) {\n      var child, j, len, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level));\n      this.stream.write('<!DOCTYPE ' + node.root().name);\n      if (node.pubID && node.sysID) {\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n      } else if (node.sysID) {\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n      }\n      if (node.children.length > 0) {\n        this.stream.write(' [');\n        this.stream.write(this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (j = 0, len = ref.length; j < len; j++) {\n          child = ref[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(']');\n      }\n      options.state = WriterState.CloseTag;\n      this.stream.write(options.spaceBeforeSlash + '>');\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level) + '<' + node.name);\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          this.stream.write('>');\n          options.state = WriterState.CloseTag;\n          this.stream.write('</' + node.name + '>');\n        } else {\n          options.state = WriterState.CloseTag;\n          this.stream.write(options.spaceBeforeSlash + '/>');\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        this.stream.write('>');\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        this.stream.write('</' + node.name + '>');\n      } else {\n        this.stream.write('>' + this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref1 = node.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\n      }\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.raw = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.text = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n    };\n\n    return XMLStreamWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  module.exports = XMLStringWriter = (function(superClass) {\n    extend(XMLStringWriter, superClass);\n\n    function XMLStringWriter(options) {\n      XMLStringWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStringWriter.prototype.document = function(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    };\n\n    return XMLStringWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var regex, res;\n      if (this.options.noValidation) {\n        return str;\n      }\n      regex = '';\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function(str) {\n      var regex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLText,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = (function(superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function(options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function(offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function(content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  assign = require('./Utility').assign;\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLWriterBase = (function() {\n    function XMLWriterBase(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    XMLWriterBase.prototype.filterOptions = function(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    };\n\n    XMLWriterBase.prototype.indent = function(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    };\n\n    XMLWriterBase.prototype.endline = function(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    };\n\n    XMLWriterBase.prototype.attribute = function(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      r = ' ' + att.name + '=\"' + att.value + '\"';\n      this.closeAttribute(att, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.cdata = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.comment = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.declaration = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.docType = function(node, options, level) {\n      var child, i, len, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n      level || (level = 0);\n      prettySuppressed = false;\n      r = '';\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r += this.indent(node, options, level) + '<' + node.name;\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        r += this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        if (options.dontPrettyTextNodes) {\n          ref1 = node.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref2 = node.children;\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\n          child = ref2[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    };\n\n    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.raw = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.text = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.openNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n\n    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n\n    return XMLWriterBase;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n\n  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    doc = new XMLDocument(options);\n    root = doc.element(name);\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  module.exports.begin = function(options, onData, onEnd) {\n    var ref1;\n    if (isFunction(options)) {\n      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n","import {ShadowrunRoll, ShadowrunRoller} from '../rolls/ShadowrunRoller';\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModList = Shadowrun.ModList;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport {SYSTEM_NAME, FLAGS, SR} from '../constants';\r\nimport SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { PartsList } from '../parts/PartsList';\r\nimport { ActorPrepFactory } from './prep/ActorPrepFactory';\r\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\r\nimport VehicleActorData = Shadowrun.VehicleActorData;\r\nimport VehicleStat = Shadowrun.VehicleStat;\r\nimport {ShadowrunActorDialogs} from \"../apps/dialogs/ShadowrunActorDialogs\";\r\nimport {createRollChatMessage} from \"../chat\";\r\nimport Attributes = Shadowrun.Attributes;\r\nimport Limits = Shadowrun.Limits;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport TrackType = Shadowrun.TrackType;\r\nimport OverflowTrackType = Shadowrun.OverflowTrackType;\r\nimport {SR5Combat} from \"../combat/SR5Combat\";\r\nimport SpellDefenseOptions = Shadowrun.SpellDefenseOptions;\r\nimport NumberOrEmpty = Shadowrun.NumberOrEmpty;\r\nimport CharacterActorData = Shadowrun.CharacterActorData;\r\nimport SR5VehicleType = Shadowrun.SR5VehicleType;\r\nimport VehicleStats = Shadowrun.VehicleStats;\r\nimport SR5CharacterType = Shadowrun.SR5CharacterType;\r\nimport ActorArmorData = Shadowrun.ActorArmorData;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport SR5SpiritType = Shadowrun.SR5SpiritType;\r\nimport SR5SpriteType = Shadowrun.SR5SpriteType;\r\nimport SR5CritterType = Shadowrun.SR5CritterType;\r\n\r\nexport class SR5Actor extends Actor {\r\n    data: SR5ActorType;\r\n\r\n    getOverwatchScore() {\r\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\r\n        return os !== undefined ? os : 0;\r\n    }\r\n\r\n    async setOverwatchScore(value) {\r\n        const num = parseInt(value);\r\n        if (!isNaN(num)) {\r\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\r\n        }\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n\r\n        const actorData = this.data as SR5ActorType;\r\n        const prepper = ActorPrepFactory.Create(actorData);\r\n        if (prepper) {\r\n            prepper.prepare();\r\n        }\r\n    }\r\n\r\n    getModifier(modifierName: string): NumberOrEmpty {\r\n        return this.data.data.modifiers[modifierName];\r\n    }\r\n\r\n    findActiveSkill(skillName?: string): SkillField | undefined {\r\n        if (skillName === undefined) return undefined;\r\n        return this.data.data.skills.active[skillName];\r\n    }\r\n\r\n    findAttribute(attributeName?: string): AttributeField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        return this.data.data.attributes[attributeName];\r\n    }\r\n\r\n    findVehicleStat(statName?: string): VehicleStat | undefined {\r\n        if (statName === undefined) return;\r\n\r\n        const vehicleStats = this.getVehicleStats();\r\n        if (vehicleStats)\r\n            return vehicleStats[statName];\r\n    }\r\n\r\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        const attribute = this.findAttribute(attributeName);\r\n        if (!attribute?.limit) return undefined;\r\n        return this.findLimit(attribute.limit);\r\n    }\r\n\r\n    findLimit(limitName?: string): LimitField | undefined {\r\n        if (!limitName) return undefined;\r\n        return this.data.data.limits[limitName];\r\n    }\r\n\r\n    getWoundModifier(): number {\r\n        if (!(\"wounds\" in this.data.data)) return 0;\r\n        return -1 * this.data.data.wounds.value || 0;\r\n    }\r\n\r\n    /** Use edge on actors that have an edge attribute.\r\n     *\r\n     * NOTE: This doesn't only include characters but spirits, critters and more.\r\n     */\r\n    async useEdge(by: number = -1) {\r\n        const edge = this.getEdge();\r\n        if (edge && edge.value === 0) return;\r\n        // NOTE: There used to be a bug which could lower edge usage below zero. Let's quietly ignore and reset. :)\r\n        const usesLeft = edge.uses > 0 ? edge.uses : 0;\r\n        const uses = Math.min(edge.value, usesLeft + by);\r\n\r\n        await this.update({'data.attributes.edge.uses': uses});\r\n    }\r\n\r\n    getEdge(): EdgeAttributeField {\r\n        return this.data.data.attributes.edge;\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return \"armor\" in this.data.data;\r\n    }\r\n\r\n    getArmor(): ActorArmorData | undefined {\r\n        if (\"armor\" in this.data.data)\r\n            return this.data.data.armor;\r\n    }\r\n\r\n    getOwnedSR5Item(itemId: string): SR5Item | null {\r\n        return (super.getOwnedItem(itemId) as unknown) as SR5Item;\r\n    }\r\n\r\n    getMatrixDevice(): SR5Item | undefined | null {\r\n        if (!(\"matrix\" in this.data.data)) return;\r\n        const matrix = this.data.data.matrix;\r\n        if (matrix.device) return this.getOwnedSR5Item(matrix.device);\r\n    }\r\n\r\n    getFullDefenseAttribute(): AttributeField | undefined {\r\n        if (this.isVehicle()) {\r\n            return this.findVehicleStat('pilot');\r\n        } else if (this.isCharacter()) {\r\n            const character = this.asCharacterData();\r\n            if (character) {\r\n                let att = character.data.full_defense_attribute;\r\n                if (!att) att = 'willpower';\r\n                return this.findAttribute(att);\r\n            }\r\n        }\r\n    }\r\n\r\n    getEquippedWeapons(): SR5Item[] {\r\n        // @ts-ignore // TODO: How to define SR5Actor.items as SR5Item[]?\r\n        return this.items.filter((item: SR5Item) => item.isEquipped() && item.isWeapon());\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        let total = 1; // always get 1\r\n        const strength = this.findAttribute('strength');\r\n        if (strength) {\r\n            total += Math.ceil(strength.value / 3);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getDeviceRating(): number {\r\n        if (!(\"matrix\" in this.data.data)) return 0;\r\n        // @ts-ignore // parseInt does indeed allow number types.\r\n        return parseInt(this.data.data.matrix.rating);\r\n    }\r\n\r\n    getAttributes(): Attributes {\r\n        return this.data.data.attributes;\r\n    }\r\n\r\n    getAttribute(name: string): AttributeField {\r\n        const attributes = this.getAttributes();\r\n        return attributes[name];\r\n    }\r\n\r\n    getLimits(): Limits {\r\n        return this.data.data.limits;\r\n    }\r\n\r\n    getLimit(name: string): LimitField {\r\n        const limits = this.getLimits();\r\n        return limits[name];\r\n    }\r\n\r\n    /** Return actor type, which can be different kind of actors from 'character' to 'vehicle'.\r\n     *  Please check SR5ActorType for reference.\r\n     */\r\n    getType(): string {\r\n        return this.data.type;\r\n    }\r\n\r\n    isCharacter(): boolean {\r\n        return this.getType() === 'character';\r\n    }\r\n\r\n    isSpirit(): boolean {\r\n        return this.getType() === 'spirit';\r\n    }\r\n\r\n    isSprite(): boolean {\r\n        return this.getType() === 'sprite';\r\n    }\r\n\r\n    isVehicle() {\r\n        return this.getType() === 'vehicle';\r\n    }\r\n\r\n    isGrunt() {\r\n        if (!(\"is_npc\" in this.data.data) || !(\"npc\" in this.data.data)) return false;\r\n\r\n        return this.data.data.is_npc && this.data.data.npc.is_grunt;\r\n    }\r\n\r\n    isCritter() {\r\n        return this.getType() === 'critter';\r\n    }\r\n\r\n    getVehicleTypeSkillName(): string | undefined {\r\n        if (!(\"vehicleType\" in this.data.data)) return;\r\n\r\n        switch (this.data.data.vehicleType) {\r\n            case 'air':\r\n                return 'pilot_aircraft';\r\n            case 'ground':\r\n                return 'pilot_ground_craft';\r\n            case 'water':\r\n                return 'pilot_water_craft';\r\n            case 'aerospace':\r\n                return 'pilot_aerospace';\r\n            case 'walker':\r\n                return 'pilot_walker';\r\n            case 'exotic':\r\n                return'pilot_exotic_vehicle';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getVehicleTypeSkill(): SkillField | undefined {\r\n        if (this.isVehicle()) return;\r\n\r\n        const name = this.getVehicleTypeSkillName();\r\n        return this.findActiveSkill(name);\r\n    }\r\n\r\n    getSkill(skillId: string): SkillField | undefined {\r\n        const { skills } = this.data.data;\r\n        if (skills.active.hasOwnProperty(skillId)) {\r\n            return skills.active[skillId];\r\n        }\r\n        if (skills.language.value.hasOwnProperty(skillId)) {\r\n            return skills.language.value[skillId];\r\n        }\r\n        // Knowledge skills are de-normalized into categories (street, hobby, ...)\r\n        for (const categoryKey in skills.knowledge) {\r\n            if (skills.knowledge.hasOwnProperty(categoryKey)) {\r\n                const category = skills.knowledge[categoryKey];\r\n                if (category.value.hasOwnProperty(skillId)) {\r\n                    return category.value[skillId];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getSkillLabel(skillId: string): string {\r\n        const skill = this.getSkill(skillId);\r\n        if (!skill) {\r\n            return '';\r\n        }\r\n\r\n        return skill.label ? skill.label : skill.name ? skill.name : '';\r\n    }\r\n\r\n    async addKnowledgeSkill(category, skill?) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.knowledge.${category}.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n\r\n        await this.update(updateData);\r\n    }\r\n\r\n    removeLanguageSkill(skillId) {\r\n        const value = {};\r\n        value[skillId] = { _delete: true };\r\n        this.update({ 'data.skills.language.value': value });\r\n    }\r\n\r\n    async addLanguageSkill(skill) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.language.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n\r\n        await this.update(updateData);\r\n    }\r\n\r\n    async removeKnowledgeSkill(skillId, category) {\r\n        const value = {};\r\n        const updateData = {};\r\n\r\n        const dataString = `data.skills.knowledge.${category}.value`;\r\n        value[skillId] = { _delete: true };\r\n        updateData[dataString] = value;\r\n\r\n        await this.update(updateData);\r\n    }\r\n\r\n    async rollFade(options: ActorRollOptions = {}, incoming = -1): Promise<ShadowrunRoll|undefined> {\r\n        const wil = duplicate(this.data.data.attributes.willpower);\r\n        const res = duplicate(this.data.data.attributes.resonance);\r\n        const data = this.data.data;\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(wil.label, wil.value);\r\n        parts.addUniquePart(res.label, res.value);\r\n        if (data.modifiers.fade) parts.addUniquePart('SR5.Bonus', data.modifiers.fade);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Fade')}`;\r\n\r\n        const actor = this;\r\n        const roll = await ShadowrunRoller.advancedRoll({\r\n            parts: parts.list,\r\n            actor,\r\n            title: title,\r\n            wounds: false,\r\n            hideRollMessage: true\r\n        });\r\n\r\n        if (!roll) return;\r\n\r\n        // Reduce damage by soak roll and inform user.\r\n        const incomingDamage = Helpers.createDamageData(incoming, 'stun');\r\n        const damage = Helpers.modifyDamageByHits(incomingDamage, roll.hits, 'SR5.Fade');\r\n\r\n        await createRollChatMessage({title, roll, actor, damage});\r\n\r\n        return roll;\r\n    }\r\n\r\n    async rollDrain(options: ActorRollOptions = {}, incoming = -1): Promise<ShadowrunRoll|undefined> {\r\n        if (!this.isCharacter()) return;\r\n\r\n        const data = this.data.data as CharacterActorData;\r\n\r\n        const wil = duplicate(data.attributes.willpower);\r\n        const drainAtt = duplicate(data.attributes[data.magic.attribute]);\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(wil.label, wil.value);\r\n        parts.addPart(drainAtt.label, drainAtt.value);\r\n        if (data.modifiers.drain) parts.addUniquePart('SR5.Bonus', data.modifiers.drain);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Drain')}`;\r\n        const actor = this;\r\n        const roll = await ShadowrunRoller.advancedRoll({\r\n            parts: parts.list,\r\n            title,\r\n            actor,\r\n            wounds: false,\r\n            hideRollMessage: true\r\n        });\r\n\r\n        if (!roll) return;\r\n\r\n        // Reduce damage by soak roll and inform user.\r\n        const incomingDamage = Helpers.createDamageData(incoming, 'stun');\r\n        const damage = Helpers.modifyDamageByHits(incomingDamage, roll.hits, 'SR5.Drain');\r\n\r\n        await createRollChatMessage({title, roll, actor, damage});\r\n\r\n        return roll;\r\n    }\r\n\r\n    rollArmor(options: ActorRollOptions = {}, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addArmorParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: game.i18n.localize('SR5.Armor'),\r\n            wounds: false,\r\n        });\r\n    }\r\n\r\n    /** A ranged defense is anything against visible ranged attacks (ranged weapons, indirect spell attacks, ...)\r\n     */\r\n    async rollRangedDefense(options: DefenseRollOptions = {}, partsProps: ModList<number> = []): Promise<ShadowrunRoll | undefined> {\r\n        const {attack} = options;\r\n\r\n        const defenseDialog = await ShadowrunActorDialogs.createDefenseDialog(this, options, partsProps);\r\n        const defenseActionData = await defenseDialog.select();\r\n\r\n        if (defenseDialog.canceled) return;\r\n\r\n        const roll = await ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            actor: this,\r\n            parts: defenseActionData.parts.list,\r\n            title: game.i18n.localize('SR5.DefenseTest'),\r\n            incomingAttack: attack,\r\n            combat: defenseActionData.combat\r\n        });\r\n\r\n        if (!roll) return;\r\n\r\n        // Reduce initiative after a successful roll, but before attack handling, to allow for the standalone sheet\r\n        // defense action to still reduce the initiative.\r\n        if (defenseActionData.combat.initiative) {\r\n            await this.changeCombatInitiative(defenseActionData.combat.initiative);\r\n        }\r\n\r\n        if (!attack) return;\r\n\r\n        // Collect defense information.\r\n        let defenderHits = roll.total;\r\n        let attackerHits = attack.hits || 0;\r\n        let netHits = Math.max(attackerHits - defenderHits, 0);\r\n\r\n        const damage = attack.damage;\r\n\r\n        if (netHits > 0) {\r\n            damage.mod = PartsList.AddUniquePart(damage.mod, 'SR5.NetHits', netHits);\r\n            damage.value = Helpers.calcTotal(damage);\r\n        }\r\n\r\n        const soakRollOptions = {\r\n            event: options.event,\r\n            damage,\r\n        };\r\n\r\n        await this.rollSoak(soakRollOptions);\r\n    }\r\n\r\n    async rollDirectSpellDefense(spell: SR5Item, options: SpellDefenseOptions): Promise<ShadowrunRoll | undefined> {\r\n        if (!spell.isDirectCombatSpell()) return;\r\n\r\n        // Prepare the actual roll.\r\n        options.hideRollMessage = options.hideRollMessage ?? true;\r\n        const attribute = spell.isManaSpell() ?\r\n            SR.defense.spell.direct.mana :\r\n            SR.defense.spell.direct.physical;\r\n\r\n        const roll = await this.rollSingleAttribute(attribute, options);\r\n\r\n        if (!roll) return;\r\n\r\n        // Prepare the resulting damage message.\r\n        const title = spell.isManaSpell() ?\r\n            game.i18n.localize('SR5.SpellDefenseDirectMana') :\r\n            game.i18n.localize('SR5.SpellDefenseDirectPhysical');\r\n        const modificationLabel = 'SR5.SpellDefense';\r\n        const actor = this;\r\n        const damage = Helpers.modifyDamageByHits(options.attack.damage, roll.hits, modificationLabel);\r\n\r\n        await createRollChatMessage({title, roll, actor, damage});\r\n\r\n        return roll;\r\n    }\r\n\r\n    async rollIndirectSpellDefense(spell: SR5Item, options: SpellDefenseOptions): Promise<ShadowrunRoll | undefined> {\r\n        if (!spell.isIndirectCombatSpell()) return;\r\n\r\n        const opposedParts = spell.getOpposedTestMod();\r\n\r\n        // TODO: indirect LOS spell defense works like a ranged weapon defense, but indirect LOS(A) spell defense\r\n        //       work like grenade attack (no defense, but soak, with the threshold net hits modifying damage.)\r\n        //       Grenades: SR5#181 Combat Spells: SR5#283\r\n        return await this.rollRangedDefense(options, opposedParts.list);\r\n    }\r\n\r\n    // TODO: Abstract handling of const damage : ModifiedDamageData\r\n    async rollSoak(options: SoakRollOptions, partsProps: ModList<number> = []): Promise<ShadowrunRoll|undefined> {\r\n        const soakDialog = await ShadowrunActorDialogs.createSoakDialog(this, options, partsProps);\r\n        const soakActionData = await soakDialog.select();\r\n\r\n        if (soakDialog.canceled) return;\r\n\r\n        // Show the actual Soak Test.\r\n        const title = game.i18n.localize('SR5.SoakTest');\r\n        const actor = this;\r\n        const roll = await ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor,\r\n            parts: soakActionData.parts.list,\r\n            title,\r\n            wounds: false,\r\n            hideRollMessage: true\r\n        });\r\n\r\n        if (!roll) return;\r\n\r\n        // Reduce damage by damage resist\r\n        const incoming = soakActionData.soak;\r\n        // Avoid cross referencing.\r\n        const damage = Helpers.modifyDamageByHits(incoming, roll.hits, 'SR5.SoakTest');\r\n\r\n        await createRollChatMessage({title, roll, actor, damage});\r\n\r\n        return roll;\r\n    }\r\n\r\n    rollSingleAttribute(attId, options: ActorRollOptions) {\r\n        const attr = duplicate(this.data.data.attributes[attId]);\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(attr.label, attr.value);\r\n        this._addMatrixParts(parts, attr);\r\n        this._addGlobalParts(parts);\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            actor: this,\r\n            parts: parts.list,\r\n            event: options?.event,\r\n            title: options.title ?? Helpers.label(attId),\r\n            hideRollMessage: options.hideRollMessage\r\n        });\r\n    }\r\n\r\n    rollTwoAttributes([id1, id2], options: ActorRollOptions) {\r\n        const attr1 = duplicate(this.data.data.attributes[id1]);\r\n        const attr2 = duplicate(this.data.data.attributes[id2]);\r\n        const label1 = Helpers.label(id1);\r\n        const label2 = Helpers.label(id2);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(attr1.label, attr1.value);\r\n        parts.addPart(attr2.label, attr2.value);\r\n        this._addMatrixParts(parts, [attr1, attr2]);\r\n        this._addGlobalParts(parts);\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            actor: this,\r\n            parts: parts.list,\r\n            event: options?.event,\r\n            title: options.title ?? `${label1} + ${label2}`,\r\n            hideRollMessage: options.hideRollMessage\r\n        });\r\n    }\r\n\r\n    rollNaturalRecovery(track, options?: ActorRollOptions) {\r\n        if (!this.isCharacter()) return;\r\n\r\n        let id1 = 'body';\r\n        let id2 = 'willpower';\r\n        let title = 'Natural Recover';\r\n        if (track === 'physical') {\r\n            id2 = 'body';\r\n            title += ' - Physical - 1 Day';\r\n        } else {\r\n            title += ' - Stun - 1 Hour';\r\n        }\r\n        let att1 = duplicate(this.data.data.attributes[id1]);\r\n        let att2 = duplicate(this.data.data.attributes[id2]);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(att1.label, att1.value);\r\n        parts.addPart(att2.label, att2.value);\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: title,\r\n            extended: true,\r\n            after: async (roll: Roll | undefined) => {\r\n                if (!roll) return;\r\n                let hits = roll.total;\r\n                const data = this.data.data as CharacterActorData;\r\n                let current = data.track[track].value;\r\n\r\n                current = Math.max(current - hits, 0);\r\n\r\n                let key = `data.track.${track}.value`;\r\n\r\n                let u = {};\r\n                u[key] = current;\r\n                await this.update(u);\r\n            },\r\n        });\r\n    }\r\n\r\n    async rollMatrixAttribute(attr, options?: ActorRollOptions) {\r\n        if (!(\"matrix\" in this.data.data)) return;\r\n\r\n        let matrix_att = duplicate(this.data.data.matrix[attr]);\r\n        let title = game.i18n.localize(CONFIG.SR5.matrixAttributes[attr]);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(CONFIG.SR5.matrixAttributes[attr], matrix_att.value);\r\n\r\n        if (options && options.event && options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n        if (Helpers.hasModifiers(options?.event)) {\r\n            return ShadowrunRoller.advancedRoll({\r\n                event: options?.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                title: title,\r\n            });\r\n        }\r\n        const attributes = Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0);\r\n        const attribute = 'willpower';\r\n\r\n        let dialogData = {\r\n            attribute: attribute,\r\n            attributes: attributes,\r\n        };\r\n        const buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/matrix-roll.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Test`,\r\n                content: dlg,\r\n                buttons: buttons,\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=attribute]').val());\r\n                    let att: AttributeField | undefined = undefined;\r\n                    if (newAtt) {\r\n                        att = this.data.data.attributes[newAtt];\r\n                        title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\r\n                    }\r\n                    if (att !== undefined) {\r\n                        if (att.value && att.label) parts.addPart(att.label, att.value);\r\n                        this._addMatrixParts(parts, true);\r\n                        this._addGlobalParts(parts);\r\n                        return ShadowrunRoller.advancedRoll({\r\n                            event: options?.event,\r\n                            actor: this,\r\n                            parts: parts.list,\r\n                            title: title,\r\n                        });\r\n                    }\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    promptRoll(options?: ActorRollOptions) {\r\n        const rollProps = {\r\n            event: options?.event,\r\n            title: 'Roll',\r\n            parts: [],\r\n            actor: this\r\n        };\r\n        const dialogOptions = {\r\n            pool: true\r\n        }\r\n        return ShadowrunRoller.advancedRoll(rollProps, dialogOptions);\r\n    }\r\n\r\n    rollDeviceRating(options?: ActorRollOptions) {\r\n        const title = game.i18n.localize('SR5.Labels.ActorSheet.DeviceRating');\r\n        const parts = new PartsList<number>();\r\n        const rating = this.getDeviceRating();\r\n        // add device rating twice as this is the most common roll\r\n        parts.addPart(title, rating);\r\n        parts.addPart(title, rating);\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            title,\r\n            parts: parts.list,\r\n            actor: this,\r\n        });\r\n    }\r\n\r\n    rollAttributesTest(rollId, options?: ActorRollOptions) {\r\n        const title = game.i18n.localize(CONFIG.SR5.attributeRolls[rollId]);\r\n        const atts = this.data.data.attributes;\r\n        const modifiers = this.data.data.modifiers;\r\n        const parts = new PartsList<number>();\r\n        if (rollId === 'composure') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            if (modifiers.composure) parts.addUniquePart('SR5.Bonus', modifiers.composure);\r\n        } else if (rollId === 'judge_intentions') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.intuition.label, atts.intuition.value);\r\n            if (modifiers.judge_intentions) parts.addUniquePart('SR5.Bonus', modifiers.judge_intentions);\r\n        } else if (rollId === 'lift_carry') {\r\n            parts.addUniquePart(atts.strength.label, atts.strength.value);\r\n            parts.addUniquePart(atts.body.label, atts.body.value);\r\n            if (modifiers.lift_carry) parts.addUniquePart('SR5.Bonus', modifiers.lift_carry);\r\n        } else if (rollId === 'memory') {\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            parts.addUniquePart(atts.logic.label, atts.logic.value);\r\n            if (modifiers.memory) parts.addUniquePart('SR5.Bonus', modifiers.memory);\r\n        }\r\n\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: `${title} Test`,\r\n        });\r\n    }\r\n\r\n    async rollSkill(skill: SkillField, options?: SkillRollOptions) {\r\n        let title = game.i18n.localize(skill.label);\r\n\r\n        const attributeName = options?.attribute ? options.attribute : skill.attribute;\r\n        const att = this.getAttribute(attributeName);\r\n        let limit = att.limit ? this.getLimit(att.limit) : undefined;\r\n\r\n        // Initialize parts with always needed skill data.\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(skill.label, skill.value);\r\n        this._addMatrixParts(parts, [att, skill]);\r\n        this._addGlobalParts(parts);\r\n\r\n        // Directly test, without further skill dialog.\r\n        if (options?.event && Helpers.hasModifiers(options?.event)) {\r\n            parts.addUniquePart(att.label, att.value);\r\n            if (options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n\r\n            return await ShadowrunRoller.advancedRoll({\r\n                event: options.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                limit,\r\n                title: `${title} ${game.i18n.localize('SR5.Test')}`,\r\n            });\r\n        }\r\n\r\n        // First ask user about skill details.\r\n        const skillRollDialogOptions = {\r\n            skill,\r\n            attribute: attributeName\r\n        }\r\n\r\n        const skillDialog = await ShadowrunActorDialogs.createSkillDialog(this, skillRollDialogOptions, parts);\r\n        const skillActionData = await skillDialog.select();\r\n\r\n        if (skillDialog.canceled) return;\r\n\r\n        return await ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: skillActionData.parts.list,\r\n            limit: skillActionData.limit,\r\n            title: skillActionData.title,\r\n        });\r\n    }\r\n\r\n    async rollDronePerception(options?: ActorRollOptions) {\r\n        if (!this.isVehicle())\r\n            return;\r\n\r\n        const actorData = duplicate(this.data.data) as VehicleActorData;\r\n        if (actorData.controlMode === 'autopilot') {\r\n            const parts = new PartsList<number>();\r\n\r\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\r\n            // TODO possibly look for autosoft item level?\r\n            const perception = this.findActiveSkill('perception');\r\n            const limit = this.findLimit('sensor');\r\n\r\n            if (perception && limit) {\r\n                parts.addPart('SR5.Vehicle.Clearsight', Helpers.calcTotal(perception));\r\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\r\n\r\n                this._addGlobalParts(parts);\r\n\r\n                return ShadowrunRoller.advancedRoll({\r\n                    event: options?.event,\r\n                    actor: this,\r\n                    parts: parts.list,\r\n                    limit,\r\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDronePerception'),\r\n                });\r\n            }\r\n        } else {\r\n            await this.rollActiveSkill('perception', options);\r\n        }\r\n    }\r\n\r\n    async rollPilotVehicle(options?: ActorRollOptions) {\r\n        if (!this.isVehicle()) {\r\n            return undefined;\r\n        }\r\n        const actorData = duplicate(this.data.data) as VehicleActorData;\r\n        if (actorData.controlMode === 'autopilot') {\r\n            const parts = new PartsList<number>();\r\n\r\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\r\n            let skill: SkillField | undefined = this.getVehicleTypeSkill();\r\n            const environment = actorData.environment;\r\n            const limit = this.findLimit(environment);\r\n\r\n            if (skill && limit) {\r\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\r\n                // TODO possibly look for autosoft item level?\r\n                parts.addPart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\r\n\r\n                this._addGlobalParts(parts);\r\n\r\n                return await ShadowrunRoller.advancedRoll({\r\n                    event: options?.event,\r\n                    actor: this,\r\n                    parts: parts.list,\r\n                    limit,\r\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollPilotVehicleTest'),\r\n                });\r\n            }\r\n        } else {\r\n            const skillName = this.getVehicleTypeSkillName();\r\n            if (!skillName) return;\r\n            return await this.rollActiveSkill(skillName, options);\r\n        }\r\n    }\r\n\r\n    rollDroneInfiltration(options?: ActorRollOptions) {\r\n        if (!this.isVehicle()) {\r\n            return undefined;\r\n        }\r\n        const actorData = duplicate(this.data.data) as VehicleActorData;\r\n        if (actorData.controlMode === 'autopilot') {\r\n            const parts = new PartsList<number>();\r\n\r\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\r\n            // TODO possibly look for autosoft item level?\r\n            const sneaking = this.findActiveSkill('sneaking');\r\n            const limit = this.findLimit('sensor');\r\n\r\n            if (sneaking && limit) {\r\n                parts.addPart('SR5.Vehicle.Stealth', Helpers.calcTotal(sneaking));\r\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\r\n\r\n                this._addGlobalParts(parts);\r\n\r\n                return ShadowrunRoller.advancedRoll({\r\n                    event: options?.event,\r\n                    actor: this,\r\n                    parts: parts.list,\r\n                    limit,\r\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDroneInfiltration'),\r\n                });\r\n            }\r\n        } else {\r\n            this.rollActiveSkill('sneaking', options);\r\n        }\r\n    }\r\n\r\n    rollKnowledgeSkill(catId: string, skillId: string, options?: SkillRollOptions) {\r\n        const category = duplicate(this.data.data.skills.knowledge[catId]);\r\n        const skill = duplicate(category.value[skillId]);\r\n        skill.attribute = category.attribute;\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollLanguageSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = duplicate(this.data.data.skills.language.value[skillId]);\r\n        skill.attribute = 'intuition';\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollActiveSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = duplicate(this.data.data.skills.active[skillId]);\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollAttribute(attId, options?: ActorRollOptions) {\r\n        let title = game.i18n.localize(CONFIG.SR5.attributes[attId]);\r\n        const att = duplicate(this.data.data.attributes[attId]);\r\n        const atts = duplicate(this.data.data.attributes);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(att.label, att.value);\r\n        let dialogData = {\r\n            attribute: att,\r\n            attributes: atts,\r\n        };\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/single-attribute.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Attribute Test`,\r\n                content: dlg,\r\n                buttons: {\r\n                    roll: {\r\n                        label: 'Continue',\r\n                        callback: () => (cancel = false),\r\n                    },\r\n                },\r\n                default: 'roll',\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n\r\n                    const att2Id: string = Helpers.parseInputToString($(html).find('[name=attribute2]').val());\r\n                    let att2: AttributeField | undefined = undefined;\r\n                    if (att2Id !== 'none') {\r\n                        att2 = atts[att2Id];\r\n                        if (att2?.label) {\r\n                            parts.addPart(att2.label, att2.value);\r\n                            const att2IdLabel = game.i18n.localize(CONFIG.SR5.attributes[att2Id]);\r\n                            title += ` + ${att2IdLabel}`;\r\n                        }\r\n                    }\r\n                    if (att2Id === 'default') {\r\n                        parts.addUniquePart('SR5.Defaulting', -1);\r\n                    }\r\n                    this._addMatrixParts(parts, [att, att2]);\r\n                    this._addGlobalParts(parts);\r\n                    return ShadowrunRoller.advancedRoll({\r\n                        event: options?.event,\r\n                        title: `${title} Test`,\r\n                        actor: this,\r\n                        parts: parts.list,\r\n                    });\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    _addMatrixParts(parts: PartsList<number>, atts) {\r\n        if (Helpers.isMatrix(atts)) {\r\n            if (!(\"matrix\" in this.data.data)) return;\r\n\r\n            const matrix = this.data.data.matrix;\r\n            if (matrix.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\r\n            if (matrix.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\r\n        }\r\n    }\r\n    _addGlobalParts(parts: PartsList<number>) {\r\n        if (this.data.data.modifiers.global) {\r\n            parts.addUniquePart('SR5.Global', this.data.data.modifiers.global);\r\n        }\r\n    }\r\n\r\n    _addDefenseParts(parts: PartsList<number>) {\r\n        if (this.isVehicle()) {\r\n            const pilot = this.findVehicleStat('pilot');\r\n            if (pilot) {\r\n                parts.addUniquePart(pilot.label, Helpers.calcTotal(pilot));\r\n            }\r\n            const skill = this.getVehicleTypeSkill();\r\n            if (skill) {\r\n                parts.addUniquePart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\r\n            }\r\n        } else {\r\n            const reaction = this.findAttribute('reaction');\r\n            const intuition = this.findAttribute('intuition');\r\n\r\n            if (reaction) {\r\n                parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\r\n            }\r\n            if (intuition) {\r\n                parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\r\n            }\r\n        }\r\n\r\n        const mod = this.getModifier('defense');\r\n        if (mod) {\r\n            parts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n    }\r\n\r\n    _addArmorParts(parts: PartsList<number>) {\r\n        const armor = this.getArmor();\r\n        if (armor) {\r\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\r\n            for (let part of armor.mod) {\r\n                parts.addUniquePart(part.name, part.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addSoakParts(parts: PartsList<number>) {\r\n        const body = this.findAttribute('body');\r\n        if (body) {\r\n            parts.addUniquePart(body.label || 'SR5.Body', body.value);\r\n        }\r\n        const mod = this.getModifier('soak');\r\n        if (mod) {\r\n            parts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n        this._addArmorParts(parts);\r\n    }\r\n\r\n    static async pushTheLimit(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n\r\n        if (msg.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) {\r\n            let actor = (msg.user.character as unknown) as SR5Actor;\r\n            if (!actor) {\r\n                const tokens = Helpers.getControlledTokens();\r\n                if (tokens.length > 0) {\r\n                    for (let token of tokens) {\r\n                        if (token.actor.owner) {\r\n                            actor = token.actor as SR5Actor;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (actor) {\r\n                const parts = new PartsList<number>();\r\n                parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n                ShadowrunRoller.basicRoll({\r\n                    title: ` - ${game.i18n.localize('SR5.PushTheLimit')}`,\r\n                    parts: parts.list,\r\n                    actor: actor,\r\n                }).then(() => {\r\n                    actor.update({\r\n                        'data.attributes.edge.uses': actor.getEdge().uses - 1,\r\n                    });\r\n                });\r\n            } else {\r\n                // @ts-ignore\r\n                ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n            }\r\n        }\r\n    }\r\n\r\n    static async secondChance(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n        // @ts-ignore\r\n        let roll: Roll = JSON.parse(msg.data?.roll);\r\n        let formula = roll.formula;\r\n        let hits = roll.total;\r\n        let re = /(\\d+)d6/;\r\n        let matches = formula.match(re);\r\n        if (matches && matches[1]) {\r\n            let match = matches[1];\r\n            let pool = parseInt(match.replace('d6', ''));\r\n            if (!isNaN(pool) && !isNaN(hits)) {\r\n                let actor = (msg.user.character as unknown) as SR5Actor;\r\n                if (!actor) {\r\n                    const tokens = Helpers.getControlledTokens();\r\n                    if (tokens.length > 0) {\r\n                        for (let token of tokens) {\r\n                            if (token.actor.owner) {\r\n                                actor = token.actor as SR5Actor;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (actor) {\r\n                    const parts = new PartsList<number>();\r\n                    parts.addUniquePart('SR5.OriginalDicePool', pool);\r\n                    parts.addUniquePart('SR5.Successes', -hits);\r\n\r\n                    return ShadowrunRoller.basicRoll({\r\n                        title: ` - Second Chance`,\r\n                        parts: parts.list,\r\n                        actor: actor,\r\n                    }).then(() => {\r\n                        actor.useEdge();\r\n                    });\r\n                } else {\r\n                    // @ts-ignore\r\n                    ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<any> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n\r\n    /** Return either the linked token or the token of the synthetic actor.\r\n     *\r\n     * @retrun Will return null should no token have been placed on scene.\r\n     */\r\n    getToken(): Token {\r\n        // Linked actors can only have one token, which isn't stored within actor data...\r\n        if (this._isLinkedToToken() && this.hasToken()) {\r\n            const linked = true;\r\n            const tokens = this.getActiveTokens(linked);\r\n            // This assumes for a token to exist and should fail if not.\r\n            return tokens[0];\r\n        }\r\n\r\n        // Unlinked actors can have multiple active token but each have theirs directly attached...\r\n        return this.token;\r\n    }\r\n\r\n    /**\r\n     * There is no need for a token to placed. The prototype token is enough.\r\n     */\r\n    _isLinkedToToken(): boolean {\r\n        //@ts-ignore\r\n        // If an actor is linked, all it's copies also contain this linked status, even if they're not.\r\n        return this.data.token.actorLink && !this.token;\r\n    }\r\n\r\n    hasToken(): boolean {\r\n        return this.getActiveTokens().length > 0;\r\n    }\r\n\r\n    hasActivePlayerOwner(): boolean {\r\n        const players = this.getActivePlayerOwners();\r\n        return players.length > 0;\r\n    }\r\n\r\n    getActivePlayer(): User|null {\r\n        //@ts-ignore\r\n        if (!this.hasPlayerOwner) {\r\n            return null;\r\n        }\r\n\r\n        for (const user of game.users.entities) {\r\n            if (!user.active || user.isGM) {\r\n                continue;\r\n            }\r\n            if (this.id === user.character.id) {\r\n                return user;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getActivePlayerOwners(): User[] {\r\n        //@ts-ignore\r\n        const users = this.getUsers('OWNER');\r\n        return users.filter(user => user.active);\r\n    }\r\n\r\n    /** Apply all types of damage to the actor.\r\n     *\r\n     * @param damage\r\n     * @param changeDamageForActor can be changed to directly apply damage without further changes due to armor and more.\r\n     */\r\n    async applyDamage(damage: DamageData, changeDamageForActor: boolean = true) {\r\n        if (damage.value <= 0) return;\r\n\r\n        // NOTE: Execution order is important here!\r\n\r\n        if (changeDamageForActor) {\r\n            damage = this._applyDamageTypeChangeForActor(damage);\r\n        }\r\n\r\n        // Apply damage and resulting overflow to the according track.\r\n        // The amount and type damage can value in the process.\r\n        if (damage.type.value === 'matrix') {\r\n            // TODO: Biofeedback damage model already integrated?\r\n            damage = await this._addMatrixDamage(damage);\r\n        }\r\n\r\n        if (damage.type.value === 'stun') {\r\n            damage = await this._addStunDamage(damage);\r\n        }\r\n\r\n        if (damage.type.value === 'physical') {\r\n            await this._addPhysicalDamage(damage);\r\n        }\r\n\r\n        // NOTE: Currently each damage type updates once. Should this cause issues for long latency, collect\r\n        //       and sum each damage type and update here globally.\r\n        // NOTE: For stuff like healing the last wound by magic, it might also be interesting to store and give\r\n        //       an overview of each damage/wound applied to select from.\r\n        // await this.update({'data.track': this.data.data.track});\r\n\r\n        // TODO: Handle changes in actor status (death and such)\r\n    }\r\n\r\n    __addDamageToTrackValue(damage: DamageData, track: TrackType|OverflowTrackType|ConditionData): TrackType|OverflowTrackType|ConditionData {\r\n        if (damage.value === 0) return track;\r\n        if (track.value === track.max) return track;\r\n\r\n        //  Avoid cross referencing.\r\n        track = duplicate(track);\r\n\r\n        track.value += damage.value;\r\n        if (track.value > track.max) {\r\n            // dev error, not really meant to be ever seen by users. Therefore no localization.\r\n            console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\r\n            track.value = track.max;\r\n        }\r\n\r\n        return track;\r\n    }\r\n\r\n    async _addDamageToDeviceTrack(damage: DamageData, device: SR5Item) {\r\n        if (!device) return;\r\n\r\n        let condition = device.getCondition();\r\n        if (!condition) return damage;\r\n\r\n        if (damage.value === 0) return;\r\n        if (condition.value === condition.max) return;\r\n\r\n        condition = this.__addDamageToTrackValue(damage, condition);\r\n\r\n        const data = {['data.technology.condition_monitor']: condition};\r\n        await device.update(data);\r\n    }\r\n\r\n    async _addDamageToTrack(damage: DamageData, track: TrackType|OverflowTrackType|ConditionData) {\r\n        if (damage.value === 0) return;\r\n        if (track.value === track.max) return;\r\n\r\n        track = this.__addDamageToTrackValue(damage, track);\r\n        // //  Avoid cross referencing.\r\n        // track = duplicate(track);\r\n        //\r\n        // track.value += damage.value;\r\n        // if (track.value > track.max) {\r\n        //     // dev error, not really meant to be ever seen by users. Therefore no localization.\r\n        //     console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\r\n        //     track.value = track.max;\r\n        // }\r\n\r\n        const data = {[`data.track.${damage.type.value}`]: track};\r\n        await this.update(data);\r\n    }\r\n\r\n    async _addDamageToOverflow(damage: DamageData, track: OverflowTrackType) {\r\n        if (damage.value === 0) return;\r\n        if (track.overflow.value === track.overflow.max) return;\r\n\r\n        //  Avoid cross referencing.\r\n        const overflow = duplicate(track.overflow);\r\n\r\n        // Don't over apply damage to the track overflow.\r\n        overflow.value += damage.value;\r\n        overflow.value = Math.min(overflow.value, overflow.max);\r\n\r\n        const data = {[`data.track.${damage.type.value}.overflow`]: overflow};\r\n        await this.update(data);\r\n    }\r\n\r\n    /** Apply damage to the stun track and get overflow damage for the physical track.\r\n     */\r\n    async _addStunDamage(damage: DamageData): Promise<DamageData> {\r\n        if (damage.type.value !== 'stun') return damage;\r\n\r\n        const track = this.getStunTrack();\r\n        if (!track)\r\n            return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        // Only change damage type when needed, in order to avoid confusion of callers.\r\n        if (overflow.value > 0) {\r\n            // Apply Stun overflow damage to physical track according to: SR5E#170\r\n            overflow.value = Math.floor(overflow.value / 2);\r\n            overflow.type.value = 'physical';\r\n        }\r\n\r\n        await this._addDamageToTrack(rest, track);\r\n        return overflow;\r\n    }\r\n\r\n    async _addPhysicalDamage(damage: DamageData) {\r\n        if (damage.type.value !== 'physical') return damage;\r\n\r\n        const track = this.getPhysicalTrack();\r\n        if (!track)\r\n            return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        await this._addDamageToTrack(rest, track);\r\n        await this._addDamageToOverflow(overflow, track);\r\n    }\r\n\r\n    /** Adding damage to a device track instead of an actors track, as they contain their own track within their data.\r\n     */\r\n    async _addMatrixDamage(damage: DamageData): Promise<DamageData> {\r\n        if (damage.type.value !== 'matrix') return damage;\r\n\r\n        const device = this.getMatrixDevice();\r\n        if (!device) return damage;\r\n\r\n        const track = this.getMatrixTrack();\r\n        // Actor might not have a commlink/cyberdeck equipped.\r\n        if (!track) return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        await this._addDamageToDeviceTrack(rest, device);\r\n\r\n        // Return overflow for consistency, yet nothing will take overflowing matrix damage.\r\n        return overflow;\r\n    }\r\n\r\n    /** Calculate damage overflow only based on max and current track values.\r\n     */\r\n    _calcDamageOverflow(damage: DamageData, track: TrackType|ConditionData): {overflow: DamageData, rest: DamageData} {\r\n        const freeTrackDamage = track.max - track.value;\r\n        const overflowDamage = damage.value > freeTrackDamage ?\r\n            damage.value - freeTrackDamage :\r\n            0;\r\n        const restDamage = damage.value - overflowDamage;\r\n\r\n        //  Avoid cross referencing.\r\n        const overflow = duplicate(damage);\r\n        const rest = duplicate(damage);\r\n\r\n        overflow.value = overflowDamage;\r\n        rest.value = restDamage;\r\n\r\n        return {overflow, rest};\r\n    }\r\n\r\n    getStunTrack(): TrackType | undefined {\r\n        if (\"track\" in this.data.data && \"stun\" in this.data.data.track)\r\n            return this.data.data.track.stun;\r\n    }\r\n\r\n    getPhysicalTrack(): OverflowTrackType | undefined {\r\n        if (\"track\" in this.data.data)\r\n            return this.data.data.track.physical;\r\n    }\r\n\r\n    getMatrixTrack(): ConditionData|undefined {\r\n        const device = this.getMatrixDevice();\r\n        if (!device) return undefined;\r\n\r\n        return device.getCondition();\r\n    }\r\n\r\n    /** Apply all damage type changes that need to happen for this Actor\r\n     *\r\n     * This doesn't include armor for simplicity reasons.\r\n     */\r\n    _applyDamageTypeChangeForActor(damage: DamageData): DamageData {\r\n        damage = this._applyDamageTypeChangeForGrunt(damage);\r\n\r\n        return damage;\r\n    }\r\n\r\n    _applyDamageTypeChangeForGrunt(damage: DamageData): DamageData {\r\n        if (!this.isGrunt()) return damage;\r\n\r\n        if (damage.type.value === 'stun') {\r\n            // Avoid cross referencing.\r\n            damage = duplicate(damage);\r\n\r\n            damage.type.value = 'physical';\r\n        }\r\n\r\n        return damage;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param damage\r\n     */\r\n    _applyDamageTypeChangeForArmor(damage: DamageData): DamageData {\r\n        // TODO: Damage modification should only really apply to characters, but double check ;)\r\n        if (!this.isCharacter()) return damage;\r\n\r\n        if (damage.type.value === 'physical') {\r\n            const modifiedArmor = this.getModifiedArmor(damage);\r\n            if (modifiedArmor) {\r\n                const armorWillChangeDamageType = modifiedArmor.value > damage.value;\r\n\r\n                if (armorWillChangeDamageType) {\r\n                    // Avoid cross referencing.\r\n                    damage = duplicate(damage);\r\n\r\n                    damage.type.value = 'stun';\r\n                }\r\n            }\r\n        }\r\n\r\n        return damage;\r\n    }\r\n\r\n    getModifiedArmor(damage: DamageData): ActorArmorData|undefined {\r\n        if (!damage.ap?.value) {\r\n            return this.getArmor();\r\n        }\r\n\r\n        const modified = duplicate(this.getArmor());\r\n        if (modified) {\r\n            modified.mod = PartsList.AddUniquePart(modified.mod, 'SR5.DV', damage.ap.value);\r\n            modified.value = Helpers.calcTotal(modified, {min: 0});\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /** Reduce the initiative of the actor in the currently open / selected combat.\r\n     * Should a tokens actor be in multiple combats it will also only affect the currently open combat,\r\n     * since that is what's set in game.combat\r\n     *\r\n     * TODO: There is an issue with linked actors that have multiple tokens placed, with each in different combats.\r\n     *       The defense test needs to be done using the correct token, not just by the actor (from the sidebar).\r\n     *       One could argue this to be correct behavior, just confusing with normal linked actor / token usage.\r\n     */\r\n    async changeCombatInitiative(modifier: number) {\r\n        // No change needed for nothing to change.\r\n        if (modifier === 0) return;\r\n\r\n        const combat: SR5Combat = game.combat as SR5Combat;\r\n        const combatant = combat.getActorCombatant(this);\r\n\r\n        // Token might not be part of active combat.\r\n        if (!combatant) return;\r\n\r\n        await combat.adjustInitiative(combatant, modifier);\r\n    }\r\n\r\n    hasDamageTracks(): boolean {\r\n        return \"track\" in this.data.data;\r\n    }\r\n\r\n    asVehicleData(): SR5VehicleType | undefined {\r\n        if (this.isVehicle())\r\n            return this.data as SR5VehicleType;\r\n    }\r\n\r\n    asCharacterData(): SR5CharacterType | undefined {\r\n        if (this.isCharacter())\r\n            return this.data as SR5CharacterType;\r\n    }\r\n\r\n    asSpiritData(): SR5SpiritType | undefined {\r\n        if (this.isSpirit()) {\r\n            return this.data as SR5SpiritType;\r\n        }\r\n    }\r\n\r\n    asSpriteData(): SR5SpriteType | undefined {\r\n        if (this.isSprite()) {\r\n            return this.data as SR5SpriteType;\r\n        }\r\n    }\r\n\r\n    asCritterData(): SR5CritterType | undefined {\r\n        if (this.isCritter()){\r\n            return this.data as SR5CritterType;\r\n        }\r\n    }\r\n\r\n    getVehicleStats(): VehicleStats | undefined {\r\n        if (this.isVehicle() && \"vehicle_stats\" in this.data.data) {\r\n            return this.data.data.vehicle_stats;\r\n        }\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { ChummerImportForm } from '../apps/chummer-import-form';\r\nimport { SkillEditForm } from '../apps/skills/SkillEditForm';\r\nimport { KnowledgeSkillEditForm } from '../apps/skills/KnowledgeSkillEditForm';\r\nimport { LanguageSkillEditForm } from '../apps/skills/LanguageSkillEditForm';\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\nimport Skills = Shadowrun.Skills;\r\nimport { SR5Actor } from './SR5Actor';\r\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\r\nimport { SR5 } from '../config';\r\nimport SkillField = Shadowrun.SkillField;\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport DeviceData = Shadowrun.DeviceData;\r\n\r\n// Use SR5ActorSheet._showSkillEditForm to only ever render one SkillEditForm instance.\r\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\r\n// when opened in succession, causing SkillEditForm to wrongfully overwrite the wrong data.\r\nlet globalSkillAppId: number = -1;\r\n\r\n/**\r\n * Extend the basic ActorSheet with some very simple modifications\r\n */\r\nexport class SR5ActorSheet extends ActorSheet {\r\n    _shownDesc: string[];\r\n    _filters: SR5SheetFilters;\r\n    actor: SR5Actor;\r\n    _scroll: string;\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        /**\r\n         * Keep track of the currently active sheet tab\r\n         * @type {string}\r\n         */\r\n        this._shownDesc = [];\r\n        this._filters = {\r\n            skills: '',\r\n            showUntrainedSkills: true,\r\n        };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Extend and override the default options used by the 5e Actor Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'actor'],\r\n            width: 880,\r\n            height: 690,\r\n            tabs: [\r\n                {\r\n                    navSelector: '.tabs',\r\n                    contentSelector: '.sheetbody',\r\n                    initial: 'skills',\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates';\r\n\r\n        if (this.actor.hasPerm(game.user, 'LIMITED', true)) {\r\n            return `${path}/actor-limited/${this.actor.data.type}.html`;\r\n        }\r\n\r\n        return `${path}/actor/${this.actor.data.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Actor sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data: SR5ActorSheetData = (super.getData() as unknown) as SR5ActorSheetData;\r\n\r\n        // General purpose fields...\r\n        data.config = CONFIG.SR5;\r\n        data.filters = this._filters;\r\n\r\n        this._prepareMatrixAttributes(data);\r\n        this._prepareActorAttributes(data);\r\n\r\n        this._prepareItems(data);\r\n        this._prepareSkillsWithFilters(data);\r\n        this._prepareActorTypeFields(data);\r\n        this._prepareCharacterFields(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    _isSkillMagic(id, skill) {\r\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\r\n    }\r\n\r\n    _isSkillResonance(skill) {\r\n        return skill.attribute === 'resonance';\r\n    }\r\n\r\n    _getSkillLabelOrName(skill) {\r\n        // Custom skills don't have labels, use their name instead.\r\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\r\n    }\r\n\r\n    _doesSkillContainText(key, skill, text) {\r\n        if (!text) {\r\n            return true;\r\n        }\r\n\r\n        // Search both english keys, localized labels and all specializations.\r\n        const name = this._getSkillLabelOrName(skill);\r\n        const searchKey = skill.name === undefined ? key : '';\r\n        // some \"specs\" were a string from old code I think\r\n        const specs = skill.specs !== undefined && Array.isArray(skill.specs) ? skill.specs.join(' ') : '';\r\n        let searchString = `${searchKey} ${name} ${specs}`;\r\n\r\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\r\n    }\r\n\r\n    _prepareCharacterFields(data: SR5ActorSheetData) {\r\n        // Empty zero value modifiers for display purposes.\r\n        const { modifiers: mods } = data.data;\r\n        for (let [key, value] of Object.entries(mods)) {\r\n            if (value === 0) mods[key] = '';\r\n        }\r\n\r\n        data.awakened = data.data.special === 'magic';\r\n        data.emerged = data.data.special === 'resonance';\r\n        data.woundTolerance = 3 + (Number(mods['wound_tolerance']) || 0);\r\n    }\r\n\r\n    _prepareActorTypeFields(data: SR5ActorSheetData) {\r\n        data.isCharacter = this.actor.isCharacter();\r\n        data.isSpirit = this.actor.isSpirit();\r\n    }\r\n\r\n    _prepareMatrixAttributes(data) {\r\n        const { matrix } = data.data;\r\n        if (matrix) {\r\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\r\n                const att = matrix[attribute];\r\n                if (att) {\r\n                    if (!att.mod) att.mod = {};\r\n                    if (att.temp === 0) delete att.temp;\r\n                }\r\n            };\r\n\r\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\r\n        }\r\n    }\r\n\r\n    _prepareActorAttributes(data: SR5ActorSheetData) {\r\n        // Clear visible, zero value attributes temporary modifiers so they appear blank.\r\n        const attrs = data.data.attributes;\r\n        for (let [, att] of Object.entries(attrs)) {\r\n            if (!att.hidden) {\r\n                if (att.temp === 0) delete att.temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    _prepareSkillsWithFilters(data: SR5ActorSheetData) {\r\n        this._filterActiveSkills(data);\r\n        this._filterKnowledgeSkills(data);\r\n        this._filterLanguageSkills(data);\r\n    }\r\n\r\n    _filterActiveSkills(data: SR5ActorSheetData) {\r\n        // Handle active skills directly, as it doesn't use sub-categories.\r\n        data.data.skills.active = this._filterSkills(data, data.data.skills.active);\r\n    }\r\n\r\n    _filterKnowledgeSkills(data: SR5ActorSheetData) {\r\n        // Knowledge skill have separate sub-categories.\r\n        Object.keys(SR5.knowledgeSkillCategories).forEach((category) => {\r\n            if (!data.data.skills.knowledge.hasOwnProperty(category)) {\r\n                console.warn(`Knowledge Skill doesn't provide configured category ${category}`);\r\n                return;\r\n            }\r\n            data.data.skills.knowledge[category].value = this._filterSkills(data, data.data.skills.knowledge[category].value);\r\n        });\r\n    }\r\n\r\n    _filterLanguageSkills(data: SR5ActorSheetData) {\r\n        // Language Skills have no sub-categories.\r\n        data.data.skills.language.value = this._filterSkills(data, data.data.skills.language.value);\r\n    }\r\n\r\n    _filterSkills(data: SR5ActorSheetData, skills: Skills) {\r\n        const filteredSkills = {};\r\n        for (let [key, skill] of Object.entries(skills)) {\r\n            if (this._showSkill(key, skill, data)) {\r\n                filteredSkills[key] = skill;\r\n            }\r\n        }\r\n        Helpers.orderKeys(filteredSkills);\r\n        return filteredSkills;\r\n    }\r\n\r\n    _showSkill(key, skill, data) {\r\n        if (this._showMagicSkills(key, skill, data)) {\r\n            return true;\r\n        }\r\n        if (this._showResonanceSkills(key, skill, data)) {\r\n            return true;\r\n        }\r\n\r\n        return this._showGeneralSkill(key, skill);\r\n    }\r\n\r\n    _isSkillFiltered(skillId, skill) {\r\n        // a newly created skill should be filtered, no matter what.\r\n        const isFilterable = this._getSkillLabelOrName(skill).length > 0;\r\n        const isHiddenForText = !this._doesSkillContainText(skillId, skill, this._filters.skills);\r\n        const isHiddenForUntrained = !this._filters.showUntrainedSkills && skill.value === 0;\r\n\r\n        return !(isFilterable && (isHiddenForUntrained || isHiddenForText));\r\n    }\r\n\r\n    _showGeneralSkill(skillId, skill: SkillField) {\r\n        return !this._isSkillMagic(skillId, skill) && !this._isSkillResonance(skill) && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _showMagicSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\r\n        return this._isSkillMagic(skillId, skill) && data.data.special === 'magic' && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _showResonanceSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\r\n        return this._isSkillResonance(skill) && data.data.special === 'resonance' && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _prepareItems(data) {\r\n        const inventory = {};\r\n        inventory['weapon'] = {\r\n            label: game.i18n.localize('SR5.ItemTypes.Weapon'),\r\n            items: [],\r\n            dataset: {\r\n                type: 'weapon',\r\n            },\r\n        };\r\n        if (this.actor.data.type === 'character') {\r\n            inventory['armor'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Armor'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'armor',\r\n                },\r\n            };\r\n            inventory['device'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Device'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'device',\r\n                },\r\n            };\r\n            inventory['equipment'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Equipment'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'equipment',\r\n                },\r\n            };\r\n            inventory['ammo'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Ammo'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'ammo',\r\n                },\r\n            };\r\n            inventory['cyberware'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Cyberware'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'cyberware',\r\n                },\r\n            };\r\n            inventory['bioware'] = {\r\n                label: game.i18n.localize('SR5.ItemTypes.Bioware'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'bioware',\r\n                },\r\n            };\r\n        }\r\n\r\n        let [\r\n            items,\r\n            spells,\r\n            qualities,\r\n            adept_powers,\r\n            actions,\r\n            complex_forms,\r\n            lifestyles,\r\n            contacts,\r\n            sins,\r\n            programs,\r\n            critter_powers,\r\n            sprite_powers,\r\n        ] = data.items.reduce(\r\n            (arr, item) => {\r\n                // Duplicate to avoid later updates propagating changed item data.\r\n                // NOTE: If no duplication is done, added fields will be stored in the database on updates!\r\n                item = duplicate(item);\r\n                // Show item properties and description in the item list overviews.\r\n                const actorItem = this.actor.items.get(item._id) as SR5Item;\r\n                const chatData = actorItem.getChatData();\r\n                item.description = chatData.description;\r\n                // @ts-ignore // This is a hacky monkey patch solution to pass template data through duplicated item data.\r\n                item.properties = chatData.properties;\r\n\r\n                // TODO: isStack property isn't used elsewhere. Remove if unnecessary.\r\n                item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\r\n                if (item.type === 'spell') arr[1].push(item);\r\n                else if (item.type === 'quality') arr[2].push(item);\r\n                else if (item.type === 'adept_power') arr[3].push(item);\r\n                else if (item.type === 'action') arr[4].push(item);\r\n                else if (item.type === 'complex_form') arr[5].push(item);\r\n                else if (item.type === 'lifestyle') arr[6].push(item);\r\n                else if (item.type === 'contact') arr[7].push(item);\r\n                else if (item.type === 'sin') arr[8].push(item);\r\n                else if (item.type === 'program') arr[9].push(item);\r\n                else if (item.type === 'critter_power') arr[10].push(item);\r\n                else if (item.type === 'sprite_power') arr[11].push(item);\r\n                else if (Object.keys(inventory).includes(item.type)) arr[0].push(item);\r\n                return arr;\r\n            },\r\n            [[], [], [], [], [], [], [], [], [], [], [], []],\r\n        );\r\n\r\n        const sortByName = (i1, i2) => {\r\n            if (i1.name > i2.name) return 1;\r\n            if (i1.name < i2.name) return -1;\r\n            return 0;\r\n        };\r\n        const sortByEquipped = (left, right) => {\r\n            const leftEquipped = left.data?.technology?.equipped;\r\n            const rightEquipped = right.data?.technology?.equipped;\r\n            if (leftEquipped && !rightEquipped) return -1;\r\n            if (rightEquipped && !leftEquipped) return 1;\r\n            if (left.name > right.name) return 1;\r\n            if (left.name < right.name) return -1;\r\n            return 0;\r\n        };\r\n        actions.sort(sortByName);\r\n        adept_powers.sort(sortByName);\r\n        complex_forms.sort(sortByName);\r\n        items.sort(sortByEquipped);\r\n        spells.sort(sortByName);\r\n        contacts.sort(sortByName);\r\n        lifestyles.sort(sortByName);\r\n        sins.sort(sortByName);\r\n        programs.sort(sortByEquipped);\r\n        critter_powers.sort(sortByName);\r\n        sprite_powers.sort(sortByName);\r\n\r\n        items.forEach((item) => {\r\n            inventory[item.type].items.push(item);\r\n        });\r\n\r\n        data.inventory = Object.values(inventory);\r\n        data.magic = {\r\n            spellbook: spells,\r\n            powers: adept_powers,\r\n        };\r\n        data.actions = actions;\r\n        data.complex_forms = complex_forms;\r\n        data.lifestyles = lifestyles;\r\n        data.contacts = contacts;\r\n        data.sins = sins;\r\n        data.programs = programs;\r\n        data.critter_powers = critter_powers;\r\n        data.sprite_powers = sprite_powers;\r\n\r\n        qualities.sort((a, b) => {\r\n            if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\r\n            if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\r\n            return a.name < b.name ? -1 : 1;\r\n        });\r\n        data.qualities = qualities;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        html.find('.hidden').hide();\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.list-item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('.skill-header').click(this._onFilterUntrainedSkills.bind(this));\r\n\r\n        html.find('.cell-input-roll').click(this._onRollCellInput.bind(this));\r\n        html.find('.attribute-roll').click(this._onRollAttribute.bind(this));\r\n        html.find('.skill-roll').click(this._onRollActiveSkill.bind(this));\r\n\r\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\r\n\r\n        html.find('.skill-edit').click(this._onShowEditSkill.bind(this));\r\n        html.find('.knowledge-skill-edit').click(this._onShowEditKnowledgeSkill.bind(this));\r\n        html.find('.language-skill-edit').click(this._onShowEditLanguageSkill.bind(this));\r\n        html.find('.add-knowledge').click(this._onAddKnowledgeSkill.bind(this));\r\n        html.find('.add-language').click(this._onAddLanguageSkill.bind(this));\r\n        html.find('.remove-knowledge').click(this._onRemoveKnowledgeSkill.bind(this));\r\n        html.find('.remove-language').click(this._onRemoveLanguageSkill.bind(this));\r\n        html.find('.knowledge-skill').click(this._onRollKnowledgeSkill.bind(this));\r\n        html.find('.language-skill').click(this._onRollLanguageSkill.bind(this));\r\n\r\n        html.find('.item-roll').click(this._onRollItem.bind(this));\r\n        html.find('.item-equip-toggle').click(this._onEquipItem.bind(this));\r\n        html.find('.item-qty').change(this._onChangeQty.bind(this));\r\n        html.find('.item-rtg').change(this._onChangeRtg.bind(this));\r\n        html.find('.item-create').click(this._onItemCreate.bind(this));\r\n        html.find('.reload-ammo').click(this._onReloadAmmo.bind(this));\r\n        html.find('.matrix-att-selector').change(this._onMatrixAttributeSelected.bind(this));\r\n\r\n        html.find('.import-character').click(this._onShowImportCharacter.bind(this));\r\n\r\n        /**\r\n         * Open the PDF for an item on the actor\r\n         */\r\n        $(html)\r\n            .find('.open-source-pdf')\r\n            .on('click', async (event) => {\r\n                event.preventDefault();\r\n                const field = $(event.currentTarget).parents('.list-item');\r\n                const iid = $(field).data().itemId;\r\n                const item = this.actor.getOwnedSR5Item(iid);\r\n                if (item) {\r\n                    await item.openPdfSource();\r\n                }\r\n            });\r\n\r\n        $(html).find('.horizontal-cell-input .cell').on('click', this._onSetCellInput.bind(this));\r\n        $(html).find('.horizontal-cell-input .cell').on('contextmenu', this._onClearCellInput.bind(this));\r\n\r\n        /**\r\n         * New API to use for rolling from the actor sheet\r\n         * the clickable label needs the css class Roll\r\n         * a parent of the label needs to have the css class RollId, and then have data-roll-id set\r\n         */\r\n        $(html).find('.Roll').on('click', this._onRollFromSheet.bind(this));\r\n\r\n        // updates matrix condition monitor on the device the actor has equippe\r\n        $(html)\r\n            .find('[name=\"data.matrix.condition_monitor.value\"]')\r\n            .on('change', async (event: any) => {\r\n                event.preventDefault();\r\n                const value = Helpers.parseInputToNumber(event.currentTarget.value);\r\n                const matrixDevice = this.actor.getMatrixDevice();\r\n                if (matrixDevice && !isNaN(value)) {\r\n                    const updateData = {};\r\n                    updateData['data.technology.condition_monitor.value'] = value;\r\n                    await matrixDevice.update(updateData);\r\n                }\r\n            });\r\n\r\n        // Update Inventory Item\r\n        html.find('.item-edit').click((event) => {\r\n            event.preventDefault();\r\n            const iid = Helpers.listItemId(event);\r\n            const item = this.actor.getOwnedSR5Item(iid);\r\n            if (item) item.sheet.render(true);\r\n        });\r\n        // Delete Inventory Item\r\n        html.find('.item-delete').click(event => this.deleteOwnedItem(event));\r\n        // Drag inventory item\r\n        let handler = (ev) => this._onDragStart(ev);\r\n        html.find('.list-item').each((i, item) => {\r\n            if (item.dataset && item.dataset.itemId) {\r\n                item.setAttribute('draggable', true);\r\n                item.addEventListener('dragstart', handler, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async deleteOwnedItem(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const iid = Helpers.listItemId(event);\r\n        await this.actor.deleteOwnedItem(iid);\r\n    }\r\n\r\n    async _onRollFromSheet(event) {\r\n        event.preventDefault();\r\n        // look for roll id data in the current line\r\n        let rollId = $(event.currentTarget).data()?.rollId;\r\n        // if that doesn't exist, look for a prent with RollId name\r\n        rollId = rollId ?? $(event.currentTarget).parent('.RollId').data().rollId;\r\n\r\n        const split = rollId.split('.');\r\n        const options = { event };\r\n        switch (split[0]) {\r\n            case 'prompt-roll':\r\n                await this.actor.promptRoll(options);\r\n                break;\r\n            case 'armor':\r\n                await this.actor.rollArmor(options);\r\n                break;\r\n            case 'fade':\r\n                await this.actor.rollFade(options);\r\n                break;\r\n            case 'drain':\r\n                await this.actor.rollDrain(options);\r\n                break;\r\n            case 'defense':\r\n                await this.actor.rollRangedDefense(options);\r\n                break;\r\n            case 'damage-resist':\r\n                await this.actor.rollSoak(options);\r\n                break;\r\n\r\n            // attribute only rolls\r\n            case 'composure':\r\n                await this.actor.rollAttributesTest('composure');\r\n                break;\r\n            case 'judge-intentions':\r\n                await this.actor.rollAttributesTest('judge_intentions');\r\n                break;\r\n            case 'lift-carry':\r\n                await this.actor.rollAttributesTest('lift_carry');\r\n                break;\r\n            case 'memory':\r\n                await this.actor.rollAttributesTest('memory');\r\n                break;\r\n\r\n            case 'vehicle-stat':\r\n                console.log('roll vehicle stat', rollId);\r\n                break;\r\n\r\n            case 'drone':\r\n                const prop = split[1]; // we expect another for \"drone\" category\r\n                switch (prop) {\r\n                    case 'perception':\r\n                        await this.actor.rollDronePerception(options);\r\n                        break;\r\n                    case 'infiltration':\r\n                        await this.actor.rollDroneInfiltration(options);\r\n                        break;\r\n                    case 'pilot-vehicle':\r\n                        await this.actor.rollPilotVehicle(options);\r\n                        break;\r\n                }\r\n                break;\r\n            // end drone\r\n\r\n            case 'attribute':\r\n                const attribute = split[1];\r\n                if (attribute) {\r\n                    await this.actor.rollAttribute(attribute, options);\r\n                }\r\n                break;\r\n            // end attribute\r\n\r\n            case 'skill':\r\n                const skillType = split[1];\r\n                switch (skillType) {\r\n                    case 'active': {\r\n                        const skillId = split[2];\r\n                        await this.actor.rollActiveSkill(skillId, options);\r\n                        break;\r\n                    }\r\n                    case 'language': {\r\n                        const skillId = split[2];\r\n                        await this.actor.rollLanguageSkill(skillId, options);\r\n                        break;\r\n                    }\r\n                    case 'knowledge': {\r\n                        const category = split[2];\r\n                        const skillId = split[3];\r\n                        await this.actor.rollKnowledgeSkill(category, skillId, options);\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            // end skill\r\n\r\n            case 'matrix':\r\n                const subkey = split[1];\r\n                switch (subkey) {\r\n                    case 'attribute':\r\n                        const attr = split[2];\r\n                        await this.actor.rollMatrixAttribute(attr, options);\r\n                        break;\r\n                    case 'device-rating':\r\n                        await this.actor.rollDeviceRating(options);\r\n                        break;\r\n                }\r\n\r\n                break;\r\n            // end matrix\r\n        }\r\n    }\r\n\r\n    // Setup skill name filter within getData\r\n    async _onFilterSkills(event) {\r\n        this._filters.skills = event.currentTarget.value;\r\n        await this.render();\r\n    }\r\n\r\n    // Setup untrained skill filter within getData\r\n    async _onFilterUntrainedSkills(event) {\r\n        event.preventDefault();\r\n        this._filters.showUntrainedSkills = !this._filters.showUntrainedSkills;\r\n        await this.render();\r\n    }\r\n\r\n    async _onReloadAmmo(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedSR5Item(iid);\r\n        if (item) return item.reloadAmmo();\r\n    }\r\n\r\n    async _onMatrixAttributeSelected(event) {\r\n        if (!(\"matrix\" in this.actor.data.data)) return;\r\n\r\n        let iid = this.actor.data.data.matrix.device;\r\n        let item = this.actor.getOwnedSR5Item(iid);\r\n        if (!item) {\r\n            console.error('could not find item');\r\n            return;\r\n        }\r\n        // grab matrix attribute (sleaze, attack, etc.)\r\n        let att = event.currentTarget.dataset.att;\r\n        // grab device attribute (att1, att2, ...)\r\n        let deviceAtt = event.currentTarget.value;\r\n\r\n        // get current matrix attribute on the device\r\n        const deviceData = item.data.data as DeviceData;\r\n        let oldVal = deviceData.atts[deviceAtt].att;\r\n        let data = {\r\n            _id: iid,\r\n        };\r\n\r\n        // go through atts on device, setup matrix attributes on it\r\n        for (let i = 1; i <= 4; i++) {\r\n            let tmp = `att${i}`;\r\n            let key = `data.atts.att${i}.att`;\r\n            if (tmp === deviceAtt) {\r\n                data[key] = att;\r\n            } else if (deviceData.atts[`att${i}`].att === att) {\r\n                data[key] = oldVal;\r\n            }\r\n        }\r\n        await this.actor.updateOwnedItem(data);\r\n    }\r\n\r\n    _onItemCreate(event) {\r\n        event.preventDefault();\r\n        const type = Helpers.listItemId(event);\r\n        const itemData = {\r\n            name: `New ${type}`,\r\n            type: type,\r\n        };\r\n        return this.actor.createOwnedItem(itemData, { renderSheet: true });\r\n    }\r\n\r\n    async _onAddLanguageSkill(event) {\r\n        event.preventDefault();\r\n        this.actor.addLanguageSkill({ name: '' });\r\n    }\r\n\r\n    async _onRemoveLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skillId = Helpers.listItemId(event);\r\n        this.actor.removeLanguageSkill(skillId);\r\n    }\r\n\r\n    async _onAddKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const category = Helpers.listItemId(event);\r\n        await this.actor.addKnowledgeSkill(category);\r\n    }\r\n\r\n    async _onRemoveKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skillId, category] = Helpers.listItemId(event).split('.');\r\n        await this.actor.removeKnowledgeSkill(skillId, category);\r\n    }\r\n\r\n    async _onChangeRtg(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedSR5Item(iid);\r\n        const rtg = parseInt(event.currentTarget.value);\r\n        if (item && rtg) {\r\n            item.update({ 'data.technology.rating': rtg });\r\n        }\r\n    }\r\n\r\n    async _onChangeQty(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedSR5Item(iid);\r\n        const qty = parseInt(event.currentTarget.value);\r\n        if (item && qty && \"technology\" in item.data.data) {\r\n            item.data.data.technology.quantity = qty;\r\n            item.update({ 'data.technology.quantity': qty });\r\n        }\r\n    }\r\n\r\n    async _onEquipItem(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedSR5Item(iid);\r\n        if (item) {\r\n            const newItems = [] as any[];\r\n            if (item.isDevice()) {\r\n                // Only allow one equipped device item. Unequip all other.\r\n                for (let ite of this.actor.items.filter((actorItem: SR5Item) => actorItem.isDevice())) {\r\n                    newItems.push({\r\n                        '_id': ite._id,\r\n                        'data.technology.equipped': ite._id === iid,\r\n                    });\r\n                }\r\n\r\n            } else {\r\n                // Toggle equip status.\r\n                newItems.push({\r\n                    '_id': iid,\r\n                    'data.technology.equipped': !item.isEquipped(),\r\n                });\r\n            }\r\n            // @ts-ignore // TODO: foundry-pc-type defines Entity.updateEmbeddedEntity as static but it's not.\r\n            await this.actor.updateEmbeddedEntity('OwnedItem', newItems);\r\n\r\n            this.actor.render(false);\r\n        }\r\n    }\r\n\r\n    async _onSetCellInput(event) {\r\n        const value = Number(event.currentTarget.dataset.value);\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = value;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = value;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = value;\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n            if (matrixDevice && !isNaN(value)) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = value;\r\n                await matrixDevice.update(updateData);\r\n            } else {\r\n                data['data.matrix.condition_monitor.value'] = value;\r\n            }\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onClearCellInput(event) {\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun') {\r\n            data[`data.track.stun.value`] = 0;\r\n        }\r\n        // Clearing the physical monitor should also clear the overflow.\r\n        else if (cmId === 'physical') {\r\n            data[`data.track.physical.value`] = 0;\r\n            data['data.track.physical.overflow.value'] = 0;\r\n\r\n        } else if (cmId === 'edge') {\r\n            data[`data.attributes.edge.uses`] = 0;\r\n\r\n        } else if (cmId === 'overflow') {\r\n            data['data.track.physical.overflow.value'] = 0;\r\n\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n\r\n            if (matrixDevice) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = 0;\r\n                await matrixDevice.update(updateData);\r\n\r\n            } else {\r\n                data['data.matrix.condition_monitor.value'] = 0;\r\n            }\r\n        }\r\n\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onRollCellInput(event) {\r\n        event.preventDefault();\r\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        if (track === 'stun' || track === 'physical') {\r\n            await this.actor.rollNaturalRecovery(track, event);\r\n        } else if (track === 'edge') {\r\n            await this.actor.rollAttribute('edge');\r\n        }\r\n    }\r\n\r\n    async _onRollItem(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedSR5Item(iid);\r\n        if (item) {\r\n            await item.castAction(event);\r\n        }\r\n    }\r\n\r\n    async _onRollKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const id = Helpers.listItemId(event);\r\n        const [skill, category] = id.split('.');\r\n        return this.actor.rollKnowledgeSkill(category, skill, { event: event });\r\n    }\r\n\r\n    async _onRollLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        return this.actor.rollLanguageSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollActiveSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        return this.actor.rollActiveSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollAttribute(event) {\r\n        event.preventDefault();\r\n        const attr = event.currentTarget.closest('.attribute').dataset.attribute;\r\n        return this.actor.rollAttribute(attr, { event: event });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(...args) {\r\n        const focusList = $(this.element).find(':focus');\r\n        const focus: any = focusList.length ? focusList[0] : null;\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(...args);\r\n        this._restoreScrollPositions();\r\n\r\n        if (focus && focus.name) {\r\n            const element = this.form[focus.name];\r\n            if (element) {\r\n                element.focus();\r\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\r\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n\r\n    async _closeOpenSkillApp() {\r\n        if (globalSkillAppId !== -1) {\r\n            if (ui.windows[globalSkillAppId]) {\r\n                await ui.windows[globalSkillAppId].close();\r\n            }\r\n            globalSkillAppId = -1;\r\n        }\r\n    }\r\n\r\n    /** Keep track of each SkillEditForm instance and close before opening another.\r\n     *\r\n     * @param skillEditFormImplementation Any extending class! of SkillEditForm\r\n     * @param actor\r\n     * @param options\r\n     * @param args Collect arguments of the different renderWithSkill implementations.\r\n     */\r\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR5Actor, options: object, ...args) {\r\n        await this._closeOpenSkillApp();\r\n\r\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\r\n        globalSkillAppId = skillEditForm.appId;\r\n        await skillEditForm.render(true);\r\n    }\r\n\r\n    _onShowEditKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skill, category] = Helpers.listItemId(event).split('.');\r\n\r\n        this._showSkillEditForm(\r\n            KnowledgeSkillEditForm,\r\n            this.actor,\r\n            {\r\n                event: event,\r\n            },\r\n            skill,\r\n            category,\r\n        );\r\n    }\r\n\r\n    _onShowEditLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        // new LanguageSkillEditForm(this.actor, skill, { event: event }).render(true);\r\n        this._showSkillEditForm(LanguageSkillEditForm, this.actor, { event: event }, skill);\r\n    }\r\n\r\n    _onShowEditSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        // new SkillEditForm(this.actor, skill, { event: event }).render(true);\r\n        this._showSkillEditForm(SkillEditForm, this.actor, { event: event }, skill);\r\n    }\r\n\r\n    _onShowImportCharacter(event) {\r\n        event.preventDefault();\r\n        const options = {\r\n            name: 'chummer-import',\r\n            title: 'Chummer Import',\r\n        };\r\n        new ChummerImportForm(this.actor, options).render(true);\r\n    }\r\n}\r\n","import SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { CharacterPrep } from './CharacterPrep';\r\nimport { SpiritPrep } from './SpiritPrep';\r\nimport { SpritePrep } from './SpritePrep';\r\nimport { VehiclePrep } from './VehiclePrep';\r\nimport { CritterPrep } from './CritterPrep';\r\n\r\nexport class ActorPrepFactory {\r\n    static Create(data: SR5ActorType) {\r\n        if (data.type === 'character') {\r\n            return new CharacterPrep(data);\r\n        } else if (data.type === 'spirit') {\r\n            return new SpiritPrep(data);\r\n        } else if (data.type === 'sprite') {\r\n            return new SpritePrep(data);\r\n        } else if (data.type === 'vehicle') {\r\n            return new VehiclePrep(data);\r\n        } else if (data.type === 'critter') {\r\n              return new CritterPrep(data);\r\n        }\r\n    }\r\n}\r\n","import SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { SR5ItemDataWrapper } from '../../item/SR5ItemDataWrapper';\r\nimport SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport abstract class BaseActorPrep<ActorType extends SR5ActorType, DataType extends SR5ActorData> {\r\n    data: DataType;\r\n    items: SR5ItemDataWrapper[];\r\n\r\n    constructor(data: ActorType) {\r\n        // @ts-ignore\r\n        this.data = data.data;\r\n        // @ts-ignore\r\n        this.items = data.items.map((item) => new SR5ItemDataWrapper(item));\r\n    }\r\n\r\n    // override with the correct order and functions to prepare the actor\r\n    abstract prepare(): void;\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { ItemPrep } from './functions/ItemPrep';\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { NPCPrep } from './functions/NPCPrep';\r\nimport SR5CharacterType = Shadowrun.SR5CharacterType;\r\nimport CharacterActorData = Shadowrun.CharacterActorData;\r\n\r\nexport class CharacterPrep extends BaseActorPrep<SR5CharacterType, CharacterActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n        ModifiersPrep.clearAttributeMods(this.data);\r\n\r\n        ItemPrep.prepareArmor(this.data, this.items);\r\n        ItemPrep.prepareBodyware(this.data, this.items);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n\r\n        // NPCPrep is reliant to be called after AttributesPrep.\r\n        NPCPrep.prepareNPCData(this.data);\r\n\r\n        LimitsPrep.prepareLimitBaseFromAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        MatrixPrep.prepareMatrix(this.data, this.items);\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\r\n\r\n        if (this.data.is_npc && this.data.npc.is_grunt) {\r\n            ConditionMonitorsPrep.prepareGrunt(this.data);\r\n        } else {\r\n            ConditionMonitorsPrep.preparePhysical(this.data);\r\n            ConditionMonitorsPrep.prepareStun(this.data);\r\n        }\r\n\r\n        MovementPrep.prepareMovement(this.data);\r\n        WoundsPrep.prepareWounds(this.data);\r\n\r\n        InitiativePrep.prepareMeatspaceInit(this.data);\r\n        InitiativePrep.prepareAstralInit(this.data);\r\n        InitiativePrep.prepareMatrixInit(this.data);\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n\r\n    }\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { ItemPrep } from './functions/ItemPrep';\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport SR5CritterType = Shadowrun.SR5CritterType;\r\nimport CritterActorData = Shadowrun.CritterActorData;\r\nimport SR5ActorData = Shadowrun.SR5ActorData;\r\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\r\n\r\nexport class CritterPrep extends BaseActorPrep<SR5CritterType, CritterActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n        ModifiersPrep.clearAttributeMods(this.data);\r\n\r\n        ItemPrep.prepareArmor(this.data, this.items);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimitBaseFromAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        MatrixPrep.prepareMatrix(this.data, this.items);\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\r\n\r\n        CritterPrep.prepareMonitors(this.data);\r\n\r\n        MovementPrep.prepareMovement(this.data);\r\n        WoundsPrep.prepareWounds(this.data);\r\n\r\n        InitiativePrep.prepareMeatspaceInit(this.data);\r\n        InitiativePrep.prepareAstralInit(this.data);\r\n        InitiativePrep.prepareMatrixInit(this.data);\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n    }\r\n\r\n    /** Critters use static monitors without any calculation.\r\n     * NOTE: As a workaround use only global modifiers to define track.\r\n     */\r\n    static prepareMonitors(data: CritterActorData & TwoTrackActorData) {\r\n\r\n        const {track, modifiers} = data;\r\n\r\n        track.stun.max = Number(modifiers['stun_track']);\r\n        track.stun.label = CONFIG.SR5.damageTypes.stun;\r\n        track.stun.disabled = false;\r\n\r\n        track.physical.max = Number(modifiers['physical_track']);\r\n        track.physical.overflow.max = 0;\r\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\r\n        track.physical.disabled = false;\r\n    }\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport SpiritActorData = Shadowrun.SpiritActorData;\r\nimport SR5SpiritType = Shadowrun.SR5SpiritType;\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport SpiritType = Shadowrun.SpiritType;\r\nimport { Helpers } from '../../helpers';\r\nimport {PartsList} from \"../../parts/PartsList\";\r\n\r\nexport class SpiritPrep extends BaseActorPrep<SR5SpiritType, SpiritActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n        ModifiersPrep.clearAttributeMods(this.data);\r\n\r\n        SpiritPrep.prepareSpiritBaseData(this.data);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimitBaseFromAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        SpiritPrep.prepareSpiritArmor(this.data);\r\n\r\n        ConditionMonitorsPrep.prepareStun(this.data);\r\n        ConditionMonitorsPrep.preparePhysical(this.data);\r\n\r\n        MovementPrep.prepareMovement(this.data);\r\n        WoundsPrep.prepareWounds(this.data);\r\n\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n        this.data.special = 'magic';\r\n    }\r\n\r\n    static prepareSpiritBaseData(data: SpiritActorData) {\r\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\r\n\r\n        if (overrides) {\r\n            const { attributes, skills, initiative, force, modifiers } = data;\r\n\r\n            // set the base of attributes to the provided value\r\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\r\n                if (attributes[attId] !== undefined) {\r\n                    attributes[attId].base = value + force;\r\n                }\r\n            }\r\n\r\n            for (const [skillId, skill] of Object.entries(skills.active)) {\r\n                skill.base = overrides.skills.find((s) => s === skillId) ? force : 0;\r\n            }\r\n\r\n            // prepare initiative data\r\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\r\n            initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\r\n            initiative.meatspace.dice.base = 2;\r\n            initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\r\n\r\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\r\n            initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\r\n            initiative.astral.dice.base = 3;\r\n            initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\r\n        }\r\n    }\r\n\r\n    static prepareSpiritArmor(data: SpiritActorData) {\r\n        const { armor, attributes } = data;\r\n        armor.base = (attributes.essence.value ?? 0) * 2;\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n\r\n    /**\r\n     * get the attribute and initiative modifiers and skills\r\n     */\r\n    static getSpiritStatModifiers(spiritType: SpiritType) {\r\n        const overrides = {\r\n            // value of 0 for attribute makes it equal to the Force\r\n            attributes: {\r\n                body: 0,\r\n                agility: 0,\r\n                reaction: 0,\r\n                strength: 0,\r\n                willpower: 0,\r\n                logic: 0,\r\n                intuition: 0,\r\n                charisma: 0,\r\n                magic: 0,\r\n                essence: 0,\r\n            },\r\n            // modifiers for after the Force x 2 calculation\r\n            init: 0,\r\n            astral_init: 0,\r\n            // skills are all set to Force\r\n            skills: [] as string[],\r\n        };\r\n        switch (spiritType) {\r\n            case 'air':\r\n                overrides.attributes.body = -2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'beasts':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'earth':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'fire':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guardian':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guidance':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'man':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n            case 'plant':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\r\n                break;\r\n            case 'task':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'water':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'toxic_air':\r\n                overrides.attributes.body = -2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_beasts':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'gymnastics', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_earth':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_fire':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'flight', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_man':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spell_casting', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_water':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'blood':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.strength = 2;\r\n                overrides.attributes.logic = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'muse':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'nightmare':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'shade':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'succubus':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'wraith':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'shedim':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'master_shedim':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'perception', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n\r\n            // insect\r\n            case 'caretaker':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 1;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'leadership', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'nymph':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n            case 'scout':\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'sneaking', 'unarmed_combat');\r\n                break;\r\n            case 'soldier':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 1;\r\n                overrides.attributes.strength = 3;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'exotic_range', 'gymnastics', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'worker':\r\n                overrides.attributes.strength = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'queen':\r\n                overrides.attributes.body = 5;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = 5;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.logic = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 5;\r\n                overrides.skills.push(\r\n                    'assensing',\r\n                    'astral_combat',\r\n                    'con',\r\n                    'counterspelling',\r\n                    'gymnastics',\r\n                    'leadership',\r\n                    'negotiation',\r\n                    'perception',\r\n                    'spellcasting',\r\n                    'unarmed_combat',\r\n                );\r\n                break;\r\n        }\r\n        return overrides;\r\n    }\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport SR5SpriteType = Shadowrun.SR5SpriteType;\r\nimport SpriteActorData = Shadowrun.SpriteActorData;\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport SpriteType = Shadowrun.SpriteType;\r\nimport { Helpers } from '../../helpers';\r\nimport { PartsList } from '../../parts/PartsList';\r\n\r\n/**\r\n * Prepare a Sprite Type of Actor\r\n */\r\nexport class SpritePrep extends BaseActorPrep<SR5SpriteType, SpriteActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n        ModifiersPrep.clearAttributeMods(this.data);\r\n\r\n        SpritePrep.prepareSpriteData(this.data);\r\n        MatrixPrep.prepareAttributesForDevice(this.data);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\r\n\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n        this.data.special = 'resonance';\r\n    }\r\n\r\n    /**\r\n     * Prepares basic Sprite specific data\r\n     * - matrix attribute values\r\n     * - device rating\r\n     * - matrix condition monitor\r\n     * - matrix initiative\r\n     * - skills\r\n     * @param data\r\n     */\r\n    static prepareSpriteData(data: SpriteActorData) {\r\n        const { level, skills, matrix, spriteType, initiative, attributes, modifiers } = data;\r\n\r\n        const matrixAtts = ['attack', 'sleaze', 'data_processing', 'firewall'];\r\n\r\n        const overrides = this.getSpriteStatModifiers(spriteType);\r\n\r\n        // apply the matrix overrides\r\n        matrixAtts.forEach((att) => {\r\n            if (matrix[att] !== undefined) {\r\n                matrix[att].base = level + overrides[att];\r\n                matrix[att].value = Helpers.calcTotal(matrix[att]);\r\n            }\r\n        });\r\n\r\n        // setup initiative from overrides\r\n        initiative.matrix.base.base = level * 2 + overrides.init;\r\n        PartsList.AddUniquePart(initiative.matrix.base.mod, 'SR5.Bonus', modifiers['matrix_initiative']);\r\n        Helpers.calcTotal(initiative.matrix.base);\r\n\r\n        initiative.matrix.dice.base = 4;\r\n        PartsList.AddUniquePart(initiative.matrix.dice.mod, 'SR5.Bonus', modifiers['matrix_initiative_dice']);\r\n        Helpers.calcTotal(initiative.matrix.dice);\r\n\r\n        // always in matrix perception\r\n        initiative.perception = 'matrix';\r\n\r\n        // calculate resonance value\r\n        attributes.resonance.base = level + overrides.resonance;\r\n        Helpers.calcTotal(attributes.resonance);\r\n\r\n        // apply skill levels\r\n        // clear skills that we don't have\r\n        for (const [skillId, skill] of Object.entries(skills.active)) {\r\n            skill.base = overrides.skills.find((s) => s === skillId) ? level : 0;\r\n        }\r\n\r\n        matrix.rating = level;\r\n        matrix.condition_monitor.max = 8 + Math.ceil(level / 2);\r\n    }\r\n\r\n    /**\r\n     * Get the stat modifiers for the specified type of sprite\r\n     * @param spriteType\r\n     */\r\n    static getSpriteStatModifiers(spriteType: SpriteType) {\r\n        const overrides = {\r\n            attack: 0,\r\n            sleaze: 0,\r\n            data_processing: 0,\r\n            firewall: 0,\r\n            resonance: 0,\r\n            init: 0,\r\n            // all sprites have computer\r\n            skills: ['computer'],\r\n        };\r\n        switch (spriteType) {\r\n            case 'courier':\r\n                overrides.sleaze = 3;\r\n                overrides.data_processing = 1;\r\n                overrides.firewall = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('hacking');\r\n                break;\r\n            case 'crack':\r\n                overrides.sleaze = 3;\r\n                overrides.data_processing = 2;\r\n                overrides.firewall = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('hacking', 'electronic_warfare');\r\n                break;\r\n            case 'data':\r\n                overrides.attack = -1;\r\n                overrides.data_processing = 4;\r\n                overrides.firewall = 1;\r\n                overrides.init = 4;\r\n                overrides.skills.push('electronic_warfare');\r\n                break;\r\n            case 'fault':\r\n                overrides.attack = 3;\r\n                overrides.data_processing = 1;\r\n                overrides.firewall = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('cybercombat', 'hacking');\r\n                break;\r\n            case 'machine':\r\n                overrides.attack = 1;\r\n                overrides.data_processing = 3;\r\n                overrides.firewall = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('electronic_warfare', 'hardware');\r\n                break;\r\n        }\r\n        return overrides;\r\n    }\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport SR5VehicleType = Shadowrun.SR5VehicleType;\r\nimport VehicleActorData = Shadowrun.VehicleActorData;\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { Helpers } from '../../helpers';\r\nimport { PartsList } from '../../parts/PartsList';\r\n\r\nexport class VehiclePrep extends BaseActorPrep<SR5VehicleType, VehicleActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n        ModifiersPrep.clearAttributeMods(this.data);\r\n\r\n        VehiclePrep.prepareVehicleStats(this.data);\r\n        VehiclePrep.prepareAttributes(this.data);\r\n        VehiclePrep.prepareLimits(this.data);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        VehiclePrep.prepareConditionMonitor(this.data);\r\n\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\r\n        MatrixPrep.prepareAttributesForDevice(this.data);\r\n\r\n        VehiclePrep.prepareMovement(this.data);\r\n\r\n        VehiclePrep.prepareMeatspaceInit(this.data);\r\n        InitiativePrep.prepareMatrixInit(this.data);\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n        VehiclePrep.prepareArmor(this.data);\r\n    }\r\n\r\n    static prepareVehicleStats(data: VehicleActorData) {\r\n        const { vehicle_stats, isOffRoad } = data;\r\n        // set the value for the stats\r\n        for (let [key, stat] of Object.entries(vehicle_stats)) {\r\n            // this turns the Object model into the list mod\r\n            if (typeof stat.mod === 'object') {\r\n                stat.mod = new PartsList(stat.mod).list;\r\n            }\r\n            const parts = new PartsList(stat.mod);\r\n\r\n            parts.addUniquePart('SR5.Temporary', stat.temp ?? 0);\r\n\r\n            stat.mod = parts.list;\r\n            Helpers.calcTotal(stat);\r\n            // add labels\r\n            stat.label = CONFIG.SR5.vehicle.stats[key];\r\n        }\r\n\r\n        // hide certain stats depending on if we're offroad\r\n        if (isOffRoad) {\r\n            vehicle_stats.off_road_speed.hidden = false;\r\n            vehicle_stats.off_road_handling.hidden = false;\r\n            vehicle_stats.speed.hidden = true;\r\n            vehicle_stats.handling.hidden = true;\r\n        } else {\r\n            vehicle_stats.off_road_speed.hidden = true;\r\n            vehicle_stats.off_road_handling.hidden = true;\r\n            vehicle_stats.speed.hidden = false;\r\n            vehicle_stats.handling.hidden = false;\r\n        }\r\n    }\r\n\r\n    static prepareAttributes(data: VehicleActorData) {\r\n        const { attributes, vehicle_stats } = data;\r\n\r\n        const attributeIds = ['agility', 'reaction', 'strength', 'willpower', 'logic', 'intuition', 'charisma'];\r\n\r\n        const totalPilot = Helpers.calcTotal(vehicle_stats.pilot);\r\n\r\n        attributeIds.forEach((attId) => {\r\n            if (attributes[attId] !== undefined) {\r\n                attributes[attId].base = totalPilot;\r\n            }\r\n        });\r\n    }\r\n\r\n    static prepareLimits(data: VehicleActorData) {\r\n        const { limits, vehicle_stats, isOffRoad } = data;\r\n\r\n        limits.mental.base = Helpers.calcTotal(vehicle_stats.sensor);\r\n\r\n        // add sensor, handling, and speed as limits\r\n        limits.sensor = { ...vehicle_stats.sensor, hidden: true };\r\n        limits.handling = { ...(isOffRoad ? vehicle_stats.off_road_handling : vehicle_stats.handling), hidden: true };\r\n        limits.speed = { ...(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed), hidden: true };\r\n    }\r\n\r\n    static prepareConditionMonitor(data: VehicleActorData) {\r\n        const { track, attributes, matrix, isDrone, modifiers } = data;\r\n\r\n        const halfBody = Math.ceil(Helpers.calcTotal(attributes.body) / 2);\r\n        // CRB pg 199 drone vs vehicle physical condition monitor rules\r\n        if (isDrone) {\r\n            track.physical.max = 6 + halfBody + (Number(modifiers['physical_track']) || 0);\r\n        } else {\r\n            track.physical.max = 12 + halfBody + (Number(modifiers['physical_track']) || 0);\r\n        }\r\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\r\n\r\n        const rating = matrix.rating || 0;\r\n        matrix.condition_monitor.max = 8 + Math.ceil(rating / 2);\r\n    }\r\n\r\n    static prepareMovement(data: VehicleActorData) {\r\n        const { vehicle_stats, movement, isOffRoad } = data;\r\n\r\n        let speedTotal = Helpers.calcTotal(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed);\r\n\r\n        // algorithm to determine speed, CRB pg 202 table\r\n        movement.walk.base = 5 * Math.pow(2, speedTotal - 1);\r\n        movement.walk.value = movement.walk.base;\r\n\r\n        movement.run.base = 10 * Math.pow(2, speedTotal - 1);\r\n        movement.run.value = movement.run.base;\r\n    }\r\n\r\n    static prepareMeatspaceInit(data: VehicleActorData) {\r\n        const { vehicle_stats, initiative } = data;\r\n\r\n        const pilot = Helpers.calcTotal(vehicle_stats.pilot);\r\n\r\n        initiative.meatspace.base.base = pilot * 2;\r\n        initiative.meatspace.dice.base = 4;\r\n        Helpers.calcTotal(initiative.meatspace.base);\r\n        Helpers.calcTotal(initiative.meatspace.dice);\r\n    }\r\n\r\n    static prepareArmor(data: VehicleActorData) {\r\n        const { armor } = data;\r\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR5.Temporary', armor['temp']);\r\n        Helpers.calcTotal(armor);\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport { Helpers } from '../../../helpers';\r\n\r\nexport class AttributesPrep {\r\n    /**\r\n     * Prepare actor data for attributes\r\n     */\r\n    static prepareAttributes(data: SR5ActorData) {\r\n        const { attributes } = data;\r\n\r\n        // always have special attributes set to hidden\r\n        attributes.magic.hidden = true;\r\n        attributes.resonance.hidden = true;\r\n        attributes.edge.hidden = true;\r\n        attributes.essence.hidden = true;\r\n\r\n        // set the value for the attributes\r\n        for (let [key, attribute] of Object.entries(attributes)) {\r\n            // don't manage the attribute if it is using the old method of edge tracking\r\n            // needed to be able to migrate things correctly\r\n            if (key === 'edge' && attribute['uses'] === undefined) return;\r\n            const parts = new PartsList(attribute.mod);\r\n\r\n            attribute.mod = parts.list;\r\n            // Don't modify attribute below one.\r\n            // TODO: Use a SR5.Values.Attribute calculation to avoid duplication.\r\n            Helpers.calcTotal(attribute, {min: 1});\r\n\r\n            // add i18n labels.\r\n            attribute.label = CONFIG.SR5.attributes[key];\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport PhysicalTrackActorData = Shadowrun.PhysicalTrackActorData;\r\nimport StunTrackActorData = Shadowrun.StunTrackActorData;\r\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\r\n\r\nexport class ConditionMonitorsPrep {\r\n    static prepareStun(data: SR5ActorData & StunTrackActorData) {\r\n        const { track, attributes, modifiers } = data;\r\n\r\n        track.stun.max = 8 + Math.ceil(attributes.willpower.value / 2) + Number(modifiers['stun_track']);\r\n        track.stun.label = CONFIG.SR5.damageTypes.stun;\r\n        track.stun.disabled = false;\r\n    }\r\n\r\n    static preparePhysical(data: SR5ActorData & PhysicalTrackActorData) {\r\n        const { track, attributes, modifiers } = data;\r\n\r\n        track.physical.max = 8 + Math.ceil(attributes.body.value / 2) + Number(modifiers['physical_track']);\r\n        track.physical.overflow.max = attributes.body.value;\r\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\r\n        track.physical.disabled = false;\r\n    }\r\n\r\n    static prepareGrunt(data: SR5ActorData & TwoTrackActorData) {\r\n        // Grunts use only one monitor, use physical to get overflow functionality.\r\n        ConditionMonitorsPrep.prepareStun(data);\r\n\r\n        const { track, attributes, modifiers } = data;\r\n        // Overwrite stun damage to avoid invisible damage modifiers.\r\n        track.stun.value = 0;\r\n        track.stun.disabled = true;\r\n\r\n        // Grunts use either their WIL or BOD as their monitors attribute.\r\n        const attribute = attributes.willpower.value > attributes.body.value ?\r\n            attributes.willpower:\r\n            attributes.body;\r\n\r\n        // TODO: Should track modifiers switch according to used attribute?\r\n        track.physical.max = 8 + Math.ceil(attribute.value / 2) + Number(modifiers['physical_track']);\r\n        track.physical.overflow.max = attributes.body.value;\r\n        track.physical.label = \"SR5.ConditionMonitor\";\r\n        track.physical.disabled = false;\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport MagicActorData = Shadowrun.MagicActorData;\r\nimport MatrixActorData = Shadowrun.MatrixActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\n\r\nexport class InitiativePrep {\r\n    static prepareCurrentInitiative(data: SR5ActorData) {\r\n        const { initiative } = data;\r\n\r\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\r\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\r\n        else {\r\n            initiative.current = initiative.meatspace;\r\n            initiative.perception = 'meatspace';\r\n        }\r\n\r\n        initiative.current.dice.value = Helpers.calcTotal(initiative.current.dice);\r\n        if (initiative.edge) initiative.current.dice.value = 5;\r\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\r\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\r\n\r\n        initiative.current.base.value = Helpers.calcTotal(initiative.current.base);\r\n    }\r\n\r\n    static prepareMeatspaceInit(data: SR5ActorData) {\r\n        const { initiative, attributes, modifiers } = data;\r\n\r\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value;\r\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\r\n\r\n        initiative.meatspace.dice.base = 1;\r\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\r\n    }\r\n\r\n    static prepareAstralInit(data: SR5ActorData & MagicActorData) {\r\n        const { initiative, attributes, modifiers } = data;\r\n\r\n        initiative.astral.base.base = attributes.intuition.value * 2;\r\n        initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\r\n\r\n        initiative.astral.dice.base = 2;\r\n        initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\r\n    }\r\n\r\n    static prepareMatrixInit(data: SR5ActorData & MatrixActorData) {\r\n        const { initiative, attributes, modifiers, matrix } = data;\r\n        if (matrix) {\r\n\r\n            initiative.matrix.base.base = attributes.intuition.value + data.matrix.data_processing.value;\r\n            initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative']));\r\n\r\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3);\r\n            initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative_dice']));\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport ArmorActorData = Shadowrun.ArmorActorData;\r\n\r\nexport class ItemPrep {\r\n    /**\r\n     * Prepare the armor data for the Item\r\n     * - will only allow one \"Base\" armor item to be used\r\n     * - all \"accessories\" will be added to the armor\r\n     */\r\n    static prepareArmor(data: SR5ActorData & ArmorActorData, items: SR5ItemDataWrapper[]) {\r\n        const { armor } = data;\r\n        armor.base = 0;\r\n        armor.value = 0;\r\n        armor.mod = [];\r\n        for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n            armor[element] = 0;\r\n        }\r\n\r\n        const armorModParts = new PartsList<number>(armor.mod);\r\n        const equippedArmor = items.filter((item) => item.couldHaveArmor() && item.isEquipped());\r\n        equippedArmor?.forEach((item) => {\r\n            // Don't spam armor values with clothing or armor like items without any actual armor.\r\n            if (item.hasArmor()) {\r\n                // Apply armor base and accessory values.\r\n                if (item.hasArmorAccessory()) {\r\n                    armorModParts.addUniquePart(item.getName(), item.getArmorValue());\r\n                }\r\n                else {\r\n                    armor.base = item.getArmorValue();\r\n                    armor.label = item.getName();\r\n                }\r\n            }\r\n\r\n            // Apply elemental modifiers of all worn armor and clothing SR5#169.\r\n            for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n                armor[element] += item.getArmorElements()[element];\r\n            }\r\n        });\r\n\r\n        if (data.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), data.modifiers['armor']);\r\n        // SET ARMOR\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n    /**\r\n     * Prepare actor data for ware changes\r\n     * - this calculates the actors essence\r\n     */\r\n    static prepareBodyware(data: SR5ActorData, items: SR5ItemDataWrapper[]) {\r\n        const { attributes } = data;\r\n        const parts = new PartsList<number>();\r\n        // add Items as values to lower the total value of essence\r\n        items\r\n            .filter((item) => item.isBodyware() && item.isEquipped())\r\n            .forEach((item) => {\r\n                if (item.getEssenceLoss()) {\r\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\r\n                }\r\n            });\r\n        // add the bonus from the misc tab if applied\r\n        const essenceMod = data.modifiers['essence'];\r\n        if (essenceMod && !Number.isNaN(essenceMod)) {\r\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\r\n        }\r\n\r\n        attributes.essence.base = 6;\r\n        attributes.essence.mod = parts.list;\r\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport { Helpers } from '../../../helpers';\r\n\r\nexport class LimitsPrep {\r\n    static prepareLimits(data: SR5ActorData) {\r\n        const { limits, modifiers } = data;\r\n\r\n        // SETUP LIMITS\r\n        limits.physical.mod = PartsList.AddUniquePart(limits.physical.mod, 'SR5.Bonus', Number(modifiers['physical_limit']));\r\n        limits.mental.mod = PartsList.AddUniquePart(limits.mental.mod, 'SR5.Bonus', Number(modifiers['mental_limit']));\r\n        limits.social.mod = PartsList.AddUniquePart(limits.social.mod, \"SR5.Bonus\", Number(modifiers['social_limit']));\r\n\r\n        // limit labels\r\n        for (let [limitKey, limitValue] of Object.entries(limits)) {\r\n            Helpers.calcTotal(limitValue);\r\n            limitValue.label = CONFIG.SR5.limits[limitKey];\r\n        }\r\n    }\r\n\r\n    static prepareLimitBaseFromAttributes(data: SR5ActorData) {\r\n\r\n        const { limits, attributes } = data;\r\n\r\n        limits.physical.base = Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3);\r\n        limits.mental.base = Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3);\r\n        limits.social.base = Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3);\r\n\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport MatrixActorData = Shadowrun.MatrixActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\r\nimport { PartsList } from '../../../parts/PartsList';\r\n\r\nexport class MatrixPrep {\r\n    /**\r\n     * Prepare Matrix data on the actor\r\n     * - if an item is equipped, it will use that data\r\n     * - if it isn't and player is technomancer, it will use that data\r\n     */\r\n    static prepareMatrix(actorData: SR5ActorData & MatrixActorData, items: SR5ItemDataWrapper[]) {\r\n        const { matrix, attributes } = actorData;\r\n\r\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\r\n\r\n        // clear matrix data to defaults\r\n        MatrixList.forEach((key) => {\r\n            const parts = new PartsList(matrix[key].mod);\r\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\r\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\r\n            parts.removePart('Temporary');\r\n            matrix[key].mod = parts.list;\r\n            matrix[key].value = parts.total;\r\n        });\r\n        matrix.condition_monitor.max = 0;\r\n        matrix.rating = 0;\r\n        matrix.name = '';\r\n        matrix.device = '';\r\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\r\n\r\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\r\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\r\n\r\n        if (device) {\r\n            const conditionMonitor = device.getConditionMonitor();\r\n            matrix.device = device.getId();\r\n            matrix.condition_monitor.max = conditionMonitor.max;\r\n            matrix.condition_monitor.value = conditionMonitor.value;\r\n            matrix.rating = device.getRating();\r\n            matrix.is_cyberdeck = device.isCyberdeck();\r\n            matrix.name = device.getName();\r\n            matrix.item = device.getData();\r\n            const deviceAtts = device.getASDF();\r\n            if (deviceAtts) {\r\n                // setup the actual matrix attributes for the actor\r\n                for (const [key, value] of Object.entries(deviceAtts)) {\r\n                    if (value && matrix[key]) {\r\n                        matrix[key].base = value.value;\r\n                        matrix[key].device_att = value.device_att;\r\n                    }\r\n                }\r\n            }\r\n        } // if we don't have a device, use living persona\r\n        else if (actorData.special === 'resonance') {\r\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\r\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\r\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\r\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\r\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\r\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\r\n        }\r\n\r\n        // set matrix condition monitor to max if greater than\r\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\r\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add Matrix Attributes to Limits and Attributes\r\n     * @param data\r\n     */\r\n    static prepareMatrixToLimitsAndAttributes(data: SR5ActorData & MatrixActorData) {\r\n        const { matrix, attributes, limits } = data;\r\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\r\n\r\n        // add matrix attributes to both limits and attributes as hidden entries\r\n        MatrixList.forEach((key) => {\r\n            Helpers.calcTotal(matrix[key]);\r\n            if (matrix[key]) {\r\n                const label = CONFIG.SR5.matrixAttributes[key];\r\n                const { value, base, mod } = matrix[key];\r\n                const hidden = true;\r\n\r\n                limits[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n                attributes[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prepare the mental attributes for a sheet that just has a device rating\r\n     * @param data\r\n     */\r\n    static prepareAttributesForDevice(data: SR5ActorData & MatrixActorData) {\r\n        const { matrix, attributes } = data;\r\n        const rating = matrix.rating || 0;\r\n        const mentalAttributes = ['intuition', 'logic', 'charisma', 'willpower'];\r\n\r\n        mentalAttributes.forEach((attLabel) => {\r\n            if (attributes[attLabel] !== undefined) {\r\n                attributes[attLabel].base = rating;\r\n                Helpers.calcTotal(attributes[attLabel]);\r\n            }\r\n        });\r\n        const basic = ['firewall', 'data_processing'];\r\n        basic.forEach((attId) => {\r\n            matrix[attId].base = rating;\r\n        });\r\n        [...basic, 'sleaze', 'attack'].forEach((attId) => {\r\n            Helpers.calcTotal(matrix[attId]);\r\n        });\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class ModifiersPrep {\r\n    /**\r\n     * Prepare the modifiers that are displayed in the Misc. tab\r\n     */\r\n    static prepareModifiers(data: SR5ActorData) {\r\n        if (!data.modifiers) data.modifiers = {};\r\n        const modifiers = {};\r\n        let miscTabModifiers = [\r\n            'soak',\r\n            'drain',\r\n            'armor',\r\n            'physical_limit',\r\n            'social_limit',\r\n            'mental_limit',\r\n            'stun_track',\r\n            'physical_track',\r\n            'meat_initiative',\r\n            'meat_initiative_dice',\r\n            'astral_initiative',\r\n            'astral_initiative_dice',\r\n            'matrix_initiative',\r\n            'matrix_initiative_dice',\r\n            'composure',\r\n            'lift_carry',\r\n            'judge_intentions',\r\n            'memory',\r\n            'walk',\r\n            'run',\r\n            'defense',\r\n            'wound_tolerance',\r\n            'essence',\r\n            'fade',\r\n        ];\r\n        miscTabModifiers.sort();\r\n        // force global to the top\r\n        miscTabModifiers.unshift('global');\r\n\r\n        for (let item of miscTabModifiers) {\r\n            modifiers[item] = Number(data.modifiers[item]) || 0;\r\n        }\r\n\r\n        data.modifiers = modifiers;\r\n    }\r\n\r\n    static clearAttributeMods(data: SR5ActorData) {\r\n        const { attributes } = data;\r\n        for (const [, attribute] of Object.entries(attributes)) {\r\n            attribute.mod = [];\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport MovementActorData = Shadowrun.MovementActorData;\r\n\r\nexport class MovementPrep {\r\n    static prepareMovement(data: SR5ActorData & MovementActorData) {\r\n        const { attributes, modifiers } = data;\r\n        const movement = data.movement;\r\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\r\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk']));\r\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run']));\r\n    }\r\n}\r\n","import CharacterActorData = Shadowrun.CharacterActorData;\r\nimport {DataTemplates} from \"../../../dataTemplates\";\r\nimport {Helpers} from \"../../../helpers\";\r\nimport {METATYPEMODIFIER} from \"../../../constants\";\r\nimport {PartsList} from \"../../../parts/PartsList\";\r\n\r\nexport class NPCPrep {\r\n    static prepareNPCData(data: CharacterActorData) {\r\n        // Apply to NPC and none NPC to remove lingering modifiers after actor has been removed it's npc status.\r\n        NPCPrep.applyMetatypeModifiers(data);\r\n    }\r\n\r\n    /** Replace current metatype modifiers with, even if nothing has changed.\r\n     *\r\n     */\r\n    static applyMetatypeModifiers(data: CharacterActorData) {\r\n        const {metatype} = data;\r\n        let modifiers = DataTemplates.grunt.metatype_modifiers[metatype];\r\n        modifiers = modifiers ? modifiers : {};\r\n\r\n        const {attributes} = data;\r\n\r\n        for (const [attId, attribute] of Object.entries(attributes)) {\r\n            // old-style object mod transformation is happening in AttributePrep and is needed here. Order is important.\r\n            if (!Array.isArray(attribute.mod)) {\r\n                    console.error('Actor data contains wrong data type for attribute.mod', attribute, !Array.isArray(attribute.mod));\r\n            } else {\r\n                const modifyBy = modifiers?.attributes?.[attId];\r\n                const parts = new PartsList(attribute.mod);\r\n                parts.removePart(METATYPEMODIFIER);\r\n\r\n                if (data.is_npc && modifyBy) {\r\n                    parts.addPart(METATYPEMODIFIER, modifyBy);\r\n                }\r\n\r\n                attribute.mod = parts.list;\r\n\r\n                // Don't modify attribute below one.\r\n                // TODO: Use a SR5.Values.Attribute calculation to avoid duplication.\r\n                Helpers.calcTotal(attribute, {min: 1});\r\n            }\r\n        }\r\n    }\r\n\r\n    static AddNPCMetatypeAttributeModifier(value) {\r\n        return {\r\n            name: METATYPEMODIFIER,\r\n            value: value as number\r\n        }\r\n    }\r\n}","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport SkillField = Shadowrun.SkillField;\r\n\r\nexport class SkillsPrep {\r\n    /**\r\n     * Prepare actor data for skills\r\n     */\r\n    static prepareSkills(data: SR5ActorData) {\r\n        const { language, active, knowledge } = data.skills;\r\n        if (language) {\r\n            if (!language.value) language.value = {};\r\n            language.attribute = 'intuition';\r\n        }\r\n\r\n        // function that will set the total of a skill correctly\r\n        const prepareSkill = (skill) => {\r\n            skill.mod = [];\r\n            if (!skill.base) skill.base = 0;\r\n            if (skill.bonus?.length) {\r\n                for (let bonus of skill.bonus) {\r\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, Number(bonus.value));\r\n                }\r\n            }\r\n            skill.value = Helpers.calcTotal(skill);\r\n\r\n            // Older Chummer imports miss some fields.\r\n            _mergeWithMissingSkillFields(skill);\r\n        };\r\n\r\n        // setup active skills\r\n        for (const skill of Object.values(active)) {\r\n            if (!skill.hidden) {\r\n                prepareSkill(skill);\r\n            }\r\n        }\r\n\r\n        const entries = Object.entries(data.skills.language.value);\r\n        // remove entries which are deleted TODO figure out how to delete these from the data\r\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete data.skills.language.value[key]);\r\n\r\n        for (let skill of Object.values(language.value)) {\r\n            prepareSkill(skill);\r\n            skill.attribute = 'intuition';\r\n        }\r\n\r\n        // setup knowledge skills\r\n        for (let [, group] of Object.entries(knowledge)) {\r\n            const entries = Object.entries(group.value);\r\n            // remove entries which are deleted TODO figure out how to delete these from the data\r\n            group.value = entries\r\n                .filter(([, val]) => !val._delete)\r\n                .reduce((acc, [id, skill]) => {\r\n                    prepareSkill(skill);\r\n\r\n                    // set the attribute on the skill\r\n                    skill.attribute = group.attribute;\r\n                    acc[id] = skill;\r\n                    return acc;\r\n                }, {});\r\n        }\r\n\r\n        // skill labels\r\n        for (let [skillKey, skillValue] of Object.entries(active)) {\r\n            skillValue.label = CONFIG.SR5.activeSkills[skillKey];\r\n        }\r\n    }\r\n}\r\n\r\n/** Just a quick, semi hacky way of setting up a complete skill data structure, while still allowing\r\n *  fields to be added at need.\r\n *\r\n * @param givenSkill\r\n * @return merge default skill fields with fields of the given field, only adding new fields in the process.\r\n */\r\nexport const _mergeWithMissingSkillFields = (givenSkill) => {\r\n    // Only the absolute most necessary fields, not datatype complete to SkillField\r\n    const template = {\r\n        name: \"\",\r\n        base: \"\",\r\n        value: 0,\r\n        attribute: \"\",\r\n        mod: [],\r\n        specs: [],\r\n        hidden: false\r\n    };\r\n\r\n    // Use mergeObject to reserve original object instance in case replacing it\r\n    // causes problems down the line with active skills taken from a preexisting\r\n    // data structure.\r\n    // overwrite false to prohibit existing values to be overwritten with empty values.\r\n    mergeObject(givenSkill, template, {overwrite: false});\r\n}","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\r\nimport WoundsActorData = Shadowrun.WoundsActorData;\r\n\r\nexport class WoundsPrep {\r\n    static prepareWounds(data: SR5ActorData & TwoTrackActorData & WoundsActorData) {\r\n        const { modifiers, track } = data;\r\n        const count = 3 + Number(modifiers['wound_tolerance']);\r\n        const stunWounds = track.stun.disabled ? 0 : Math.floor(track.stun.value / count);\r\n        const physicalWounds = track.physical.disabled ? 0 : Math.floor(track.physical.value / count);\r\n\r\n        track.stun.wounds = stunWounds;\r\n        track.physical.wounds = physicalWounds;\r\n\r\n        data.wounds = {\r\n            value: stunWounds + physicalWounds,\r\n        };\r\n    }\r\n}\r\n","import {FLAGS, SYSTEM_NAME} from \"../constants\";\r\n\r\nexport class ChangelogApplication extends Application {\r\n    get template(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/changelog.html';\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = game.i18n.localize('SR5.ChangelogApplication.Title');\r\n        options.width = 500;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    render(force?: boolean, options?: Application.RenderOptions): Application {\r\n        ChangelogApplication.setRenderForCurrentVersion();\r\n        return super.render(force, options);\r\n    }\r\n\r\n    // Let the async operation happen in background.\r\n    private static setRenderForCurrentVersion() {\r\n        game.user.setFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion, game.system.data.version);\r\n    }\r\n\r\n    static get showApplication(): boolean {\r\n        if (!game.user.isGM || !game.user.isTrusted) return false;\r\n\r\n        const shownForVersion = game.user.getFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion);\r\n        return shownForVersion !== game.system.data.version;\r\n    }\r\n}","import {CharacterInfoUpdater} from \"./CharacterInfoUpdater\"\r\nimport {ItemsParser} from \"./ItemsParser\"\r\n\r\n/**\r\n * Imports characters from other tools into an existing foundry actor.\r\n */\r\nexport class CharacterImporter {\r\n\r\n    /**\r\n     * Imports a chummer character into an existing actor. The actor will be updated. This might lead to duplicate items.\r\n     * @param {*} actor The actor that will be updated with the chummer character.\r\n     * @param {*} chummerFile The complete chummer file as json object. The first character will be selected for import.\r\n     * @param {*} importOptions Additional import option that specify what parts of the chummer file will be imported.\r\n     */\r\n    async importChummerCharacter(actor, chummerFile, importOptions) {\r\n        console.log('Importing the following character file content:');\r\n        console.log(chummerFile);\r\n\r\n        console.log('Using the following import options:')\r\n        console.log(importOptions);\r\n\r\n        if (!chummerFile.characters || !chummerFile.characters.character) {\r\n            console.log('Did not find a valid character to import  - aborting import');\r\n            return;\r\n        }\r\n\r\n        const chummerCharacter = chummerFile.characters.character;\r\n        const updatedActorData = new CharacterInfoUpdater().update(actor.data, chummerCharacter);\r\n        const items = new ItemsParser().parse(chummerCharacter, importOptions);\r\n\r\n        await actor.update(updatedActorData);\r\n        await actor.createEmbeddedEntity('OwnedItem', items);\r\n    }\r\n}","import {_mergeWithMissingSkillFields} from \"../../actor/prep/functions/SkillsPrep\";\r\n\r\n/**\r\n * Parses all non-item character information from a chummer character object.\r\n */\r\nexport class CharacterInfoUpdater {\r\n\r\n    /**\r\n     *  Maps the chummer attribute name to our sr5-foundry attribute name\r\n     *  @param attName name of the chummer attribute\r\n     */\r\n    parseAttName = (attName) =>  {\r\n        if (attName.toLowerCase() === 'bod') {\r\n            return 'body';\r\n        }\r\n        if (attName.toLowerCase() === 'agi') {\r\n            return 'agility';\r\n        }\r\n        if (attName.toLowerCase() === 'rea') {\r\n            return 'reaction';\r\n        }\r\n        if (attName.toLowerCase() === 'str') {\r\n            return 'strength';\r\n        }\r\n        if (attName.toLowerCase() === 'cha') {\r\n            return 'charisma';\r\n        }\r\n        if (attName.toLowerCase() === 'int') {\r\n            return 'intuition';\r\n        }\r\n        if (attName.toLowerCase() === 'log') {\r\n            return 'logic';\r\n        }\r\n        if (attName.toLowerCase() === 'wil') {\r\n            return 'willpower';\r\n        }\r\n        if (attName.toLowerCase() === 'edg') {\r\n            return 'edge';\r\n        }\r\n        if (attName.toLowerCase() === 'mag') {\r\n            return 'magic';\r\n        }\r\n        if (attName.toLowerCase() === 'res') {\r\n            return 'resonance';\r\n        }\r\n    };\r\n\r\n    getArray = (value) => {\r\n        return Array.isArray(value) ? value : [value];\r\n    };\r\n\r\n\r\n    /**\r\n     *  Converts the chummer attribute value to our sr5-foundry attribute value\r\n     *  @param att the chummer attribute\r\n     */\r\n    parseAttBaseValue = (att) => {\r\n        if (att.name.toLowerCase() === 'edg') {\r\n            // The edge attribute value is stored in the \"base\" field instead of the total field\r\n            // In chummer, the \"total\" field is used for the amount of edge remaining to a character\r\n            return parseInt(att.base);\r\n        }\r\n        else {\r\n            return parseInt(att.total);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses the actor data from the chummer file and returns an updated clone of the actor data.\r\n     * @param {*} actorData The actor data (actor.data not actor.data.data) that is used as the basis for the import. Will not be changed.\r\n     * @param {*} chummerChar The chummer character to parse.\r\n     */\r\n    update(actorData, chummerChar) {\r\n\r\n        const clonedActorData = duplicate(actorData);\r\n\r\n        // Name is required, so we need to always set something (even if the chummer field is empty)\r\n        clonedActorData.name = chummerChar.alias ? chummerChar.alias : '[Name not found]';\r\n        \r\n        this.importBasicData(clonedActorData.data, chummerChar);\r\n        this.importAttributes(clonedActorData.data, chummerChar)\r\n        this.importInitiative(clonedActorData.data, chummerChar);\r\n        this.importSkills(clonedActorData.data, chummerChar);\r\n\r\n        return clonedActorData;\r\n    }\r\n\r\n    importBasicData(actorDataData, chummerChar) {\r\n\r\n        try {\r\n            if (chummerChar.playername) {\r\n                actorDataData.player_name = chummerChar.playername;\r\n            }\r\n            if (chummerChar.alias) {\r\n                actorDataData.name = chummerChar.alias;\r\n            }\r\n            if (chummerChar.metatype) {\r\n                actorDataData.metatype = chummerChar.metatype;\r\n            }\r\n            if (chummerChar.sex) {\r\n                actorDataData.sex = chummerChar.sex;\r\n            }\r\n            if (chummerChar.age) {\r\n                actorDataData.age = chummerChar.age;\r\n            }\r\n            if (chummerChar.height) {\r\n                actorDataData.height = chummerChar.height;\r\n            }\r\n            if (chummerChar.weight) {\r\n                actorDataData.weight = chummerChar.weight;\r\n            }\r\n            if (chummerChar.calculatedstreetcred) {\r\n                actorDataData.street_cred = chummerChar.calculatedstreetcred;\r\n            }\r\n            if (chummerChar.calculatednotoriety) {\r\n                actorDataData.notoriety = chummerChar.calculatednotoriety;\r\n            }\r\n            if (chummerChar.calculatedpublicawareness) {\r\n                actorDataData.public_awareness = chummerChar.calculatedpublicawareness;\r\n            }\r\n            if (chummerChar.karma) {\r\n                actorDataData.karma.value = chummerChar.karma;\r\n            }\r\n            if (chummerChar.totalkarma) {\r\n                actorDataData.karma.max = chummerChar.totalkarma;\r\n            }\r\n            if (chummerChar.technomancer && chummerChar.technomancer.toLowerCase() === 'true') {\r\n                actorDataData.special = 'resonance';\r\n            }\r\n            if (\r\n                (chummerChar.magician && chummerChar.magician.toLowerCase() === 'true') ||\r\n                (chummerChar.adept && chummerChar.adept.toLowerCase() === 'true')\r\n            ) {\r\n                actorDataData.special = 'magic';\r\n                let attr = [];\r\n                if (\r\n                    chummerChar.tradition &&\r\n                    chummerChar.tradition.drainattribute &&\r\n                    chummerChar.tradition.drainattribute.attr\r\n                ) {\r\n                    attr = chummerChar.tradition.drainattribute.attr;\r\n                } else if (chummerChar.tradition && chummerChar.tradition.drainattributes) {\r\n                    attr = chummerChar.tradition.drainattributes\r\n                        .split('+')\r\n                        .map((item) => item.trim());\r\n                }\r\n                attr.forEach((att) => {\r\n                    const attName = this.parseAttName(att);\r\n                    if (attName !== 'willpower') actorDataData.magic.attribute = att;\r\n                });\r\n            }\r\n            if (chummerChar.totaless) {\r\n                actorDataData.attributes.essence.value = chummerChar.totaless;\r\n            }\r\n            if (chummerChar.nuyen) {\r\n                actorDataData.nuyen = parseInt(chummerChar.nuyen.replace(',', ''));\r\n            }\r\n        } catch (e) {\r\n            console.error(`Error while parsing character information ${e}`);\r\n        }\r\n    }\r\n\r\n    importAttributes(actorDataData, chummerChar) {\r\n        const atts = chummerChar.attributes[1].attribute;\r\n        atts.forEach((att) => {\r\n            try {\r\n                const attName = this.parseAttName(att.name);\r\n                if (attName) { \r\n                    actorDataData.attributes[attName].base = this.parseAttBaseValue(att);\r\n                }\r\n                    \r\n            } catch (e) {\r\n                console.error(`Error while parsing attributes ${e}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    importInitiative(actorDataData, chummerChar) {\r\n        try {\r\n            actorDataData.modifiers.meat_initiative = chummerChar.initbonus;\r\n\r\n            // 'initdice' contains the total amount of initiative dice, not just the bonus.\r\n            actorDataData.modifiers.meat_initiative_dice = chummerChar.initdice - 1;\r\n        } catch (e) {\r\n            console.error(`Error while parsing initiative ${e}`);\r\n        }\r\n    }\r\n\r\n    importSkills(actorDataData, chummerChar) {\r\n        const skills = chummerChar.skills.skill;\r\n        for (let i = 0; i < skills.length; i++) {\r\n            try {\r\n                const s = skills[i];\r\n                if (s.rating > 0 && s.islanguage) {\r\n                    let group = 'active';\r\n                    let skill = null;\r\n                    const id = randomID(16);\r\n                    if (s.islanguage && s.islanguage.toLowerCase() === 'true') {\r\n                        skill = {};\r\n                        actorDataData.skills.language.value[id] = skill;\r\n                        group = 'language';\r\n                    } else if (s.knowledge && s.knowledge.toLowerCase() === 'true') {\r\n                        const category = s.skillcategory_english;\r\n                        console.log(category);\r\n                        skill = {};\r\n                        let skillCategory;\r\n                        if (category) {\r\n                            console.log('found category', category);\r\n                            const cat = category.toLowerCase();\r\n                            if (cat === 'street')\r\n                                skillCategory = actorDataData.skills.knowledge.street.value;\r\n                            if (cat === 'academic')\r\n                                skillCategory = actorDataData.skills.knowledge.academic.value;\r\n                            if (cat === 'professional')\r\n                                skillCategory = actorDataData.skills.knowledge.professional.value;\r\n                            if (cat === 'interest')\r\n                                skillCategory = actorDataData.skills.knowledge.interests.value;\r\n                            if (skillCategory)\r\n                                skillCategory[id] = skill;\r\n                        } else {\r\n                            if (s.attribute.toLowerCase() === 'int') {\r\n                                actorDataData.skills.knowledge.street.value[id] = skill;\r\n                            }\r\n                            if (s.attribute.toLowerCase() === 'log') {\r\n                                actorDataData.skills.knowledge.professional.value[id] = skill;\r\n                            }\r\n                        }\r\n                        group = 'knowledge';\r\n                    } else {\r\n                        let name = s.name\r\n                            .toLowerCase()\r\n                            .trim()\r\n                            .replace(/\\s/g, '_')\r\n                            .replace(/-/g, '_');\r\n                        if (name.includes('exotic') && name.includes('_weapon'))\r\n                            name = name.replace('_weapon', '');\r\n                        skill = actorDataData.skills.active[name];\r\n                    }\r\n                    if (!skill)\r\n                        console.error(`Couldn't parse skill ${s.name}`);\r\n                    if (skill) {\r\n                        if (group !== 'active')\r\n                            skill.name = s.name;\r\n                        skill.base = parseInt(s.rating);\r\n\r\n                        if (s.skillspecializations) {\r\n                            skill.specs = this.getArray(\r\n                                s.skillspecializations.skillspecialization.name\r\n                            );\r\n                        }\r\n\r\n                        skill = _mergeWithMissingSkillFields(skill);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n","import {_mergeWithMissingSkillFields} from \"../../actor/prep/functions/SkillsPrep\";\r\nimport {GearsParser} from \"./gearImport/GearsParser\"\r\n\r\n/**\r\n * Parses all items (qualities, weapons, gear, ...) from a chummer character.\r\n */\r\nexport class ItemsParser {\r\n\r\n    /**\r\n     *  Creates the item description object from the chummer entry\r\n     *  @param entry The chummer entry (the item, the quality..)\r\n     */\r\n    parseDescription = (entry) => {\r\n        const parsedDescription = {\r\n            source: `${entry.source} ${entry.page}`\r\n        };\r\n\r\n        if (entry.description) {\r\n            parsedDescription.value = TextEditor.enrichHTML(q.description);\r\n        }\r\n\r\n        return parsedDescription\r\n    }\r\n\r\n    getValues = (val) => {\r\n        const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\r\n        const l = val.match(regex);\r\n        return l || ['0'];\r\n    };\r\n\r\n    getArray = (value) => {\r\n        return Array.isArray(value) ? value : [value];\r\n    };\r\n\r\n    /**\r\n     * Parses all items from a chummer char and returns an array of the corresponding foundry items.\r\n     * @param {*} chummerChar The chummer char holding the items\r\n     * @param {*} importOptions Additional import option that specify what items will be imported.\r\n     */\r\n    parse(chummerChar, importOptions) {\r\n        const parsedItems = [];\r\n\r\n        if (importOptions.qualities && chummerChar.qualities && chummerChar.qualities.quality) {\r\n            const parsedQualities = this.parseQualities(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedQualities);\r\n        }\r\n\r\n        if (importOptions.weapons && chummerChar.weapons != null && chummerChar.weapons.weapon != null) {\r\n            const parsedWeapons = this.parseWeapons(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedWeapons);\r\n        }\r\n\r\n        if (importOptions.armor && chummerChar.armors && chummerChar.armors.armor) {\r\n            const parsedArmors = this.parseArmors(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedArmors);\r\n        }\r\n\r\n        if (importOptions.cyberware && chummerChar.cyberwares && chummerChar.cyberwares.cyberware) {\r\n            const parsedCyberware = this.parseCyberware(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedCyberware);\r\n        }\r\n\r\n        if (importOptions.powers && chummerChar.powers && chummerChar.powers.power) {\r\n            const parsedPowers = this.parsePowers(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedPowers);\r\n        }\r\n\r\n        if (importOptions.equipment && chummerChar.gears && chummerChar.gears.gear) {\r\n            const gears = this.getArray(chummerChar.gears.gear);\r\n            const allGearData = new GearsParser().parseAllGear(gears);\r\n            Array.prototype.push.apply(parsedItems, allGearData);\r\n        }\r\n\r\n        if (importOptions.spells && chummerChar.spells && chummerChar.spells.spell) {\r\n            const parsedSpells = this.parseSpells(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedSpells);\r\n        }\r\n\r\n        return parsedItems;\r\n    }\r\n\r\n    parseQualities(chummerChar) {\r\n        const qualities = this.getArray(chummerChar.qualities.quality);\r\n        const parsedQualities = [];\r\n\r\n        qualities.forEach((chummerQuality) => {\r\n            try {\r\n                const data = {};\r\n                data.type = chummerQuality.qualitytype.toLowerCase();\r\n                data.description = this.parseDescription(chummerQuality);\r\n\r\n                const itemData = {\r\n                    name: chummerQuality.name,\r\n                    type: 'quality',\r\n                    data,\r\n                };\r\n                parsedQualities.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedQualities;\r\n    }\r\n\r\n    parseWeapons(chummerChar) {\r\n        const parseDamage = (val) => {\r\n            const damage = {\r\n                damage: 0,\r\n                type: 'physical',\r\n                radius: 0,\r\n                dropoff: 0,\r\n            };\r\n            const split = val.split(',');\r\n            if (split.length > 0) {\r\n                const l = split[0].match(/(\\d+)(\\w+)/);\r\n                if (l && l[1]) damage.damage = parseInt(l[1]);\r\n                if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\r\n            }\r\n            for (let i = 1; i < split.length; i++) {\r\n                const l = split[i].match(/(-?\\d+)(.*)/);\r\n                if (l && l[2]) {\r\n                    if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\r\n                    else damage.radius = parseInt(l[1]);\r\n                }\r\n            }\r\n            return damage;\r\n        };\r\n\r\n        const weapons = this.getArray(chummerChar.weapons.weapon);\r\n        const parsedWeapons = [];\r\n\r\n        weapons.forEach((chummerWeapon) => {\r\n            try {\r\n                const data = {};\r\n                const action = {};\r\n                const damage = {};\r\n                action.damage = damage;\r\n                data.action = action;\r\n\r\n                data.description = this.parseDescription(chummerWeapon);\r\n\r\n                damage.ap = {\r\n                    base: parseInt(this.getValues(chummerWeapon.ap)[0])\r\n                };\r\n                action.type = 'varies';\r\n                if (chummerWeapon.skill) action.skill = chummerWeapon.skill.toLowerCase().replace(/\\s/g, '_');\r\n                else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('exotic'))\r\n                    action.skill = chummerWeapon.category\r\n                        .toLowerCase()\r\n                        .replace(' weapons', '')\r\n                        .replace(/\\s/g, '_');\r\n                if (action.skill.includes('exotic'))\r\n                    action.skill = action.skill.replace('_weapon', '');\r\n                action.attribute = 'agility';\r\n                action.limit = {\r\n                    base: parseInt(this.getValues(chummerWeapon.accuracy)[0])\r\n                };\r\n                action.opposed = {\r\n                    type: 'defense',\r\n                };\r\n\r\n                if (chummerWeapon.type.toLowerCase() === 'melee') {\r\n                    action.type = 'complex';\r\n                    data.category = 'melee';\r\n                    const melee = {};\r\n                    data.melee = melee;\r\n                    melee.reach = parseInt(chummerWeapon.reach);\r\n                } else if (chummerWeapon.type.toLowerCase() === 'ranged') {\r\n                    data.category = 'range';\r\n                    if (chummerWeapon.skill.toLowerCase().includes('throw')) {\r\n                        data.category = 'thrown'; // TODO clean this up\r\n                    }\r\n                    const range = {};\r\n                    data.range = range;\r\n                    range.rc = {\r\n                        base: parseInt(this.getValues(chummerWeapon.rc)[0]),\r\n                    };\r\n                    if (chummerWeapon.mode) {\r\n                        // HeroLab export doesn't have mode\r\n                        const lower = chummerWeapon.mode.toLowerCase();\r\n                        range.modes = {\r\n                            single_shot: lower.includes('ss'),\r\n                            semi_auto: lower.includes('sa'),\r\n                            burst_fire: lower.includes('bf'),\r\n                            full_auto: lower.includes('fa'),\r\n                        };\r\n                    }\r\n                    if (chummerWeapon.clips != null && chummerWeapon.clips.clip != null) {\r\n                        // HeroLab export doesn't have clips\r\n                        const clips = Array.isArray(chummerWeapon.clips.clip)\r\n                            ? chummerWeapon.clips.clip\r\n                            : [chummerWeapon.clips.clip];\r\n                        clips.forEach((clip) => {\r\n                            console.log(clip);\r\n                        });\r\n                    }\r\n                    if (\r\n                        chummerWeapon.ranges &&\r\n                        chummerWeapon.ranges.short &&\r\n                        chummerWeapon.ranges.medium &&\r\n                        chummerWeapon.ranges.long &&\r\n                        chummerWeapon.ranges.extreme\r\n                    ) {\r\n                        console.log(chummerWeapon.ranges);\r\n                        range.ranges = {\r\n                            short: parseInt(chummerWeapon.ranges.short.split('-')[1]),\r\n                            medium: parseInt(chummerWeapon.ranges.medium.split('-')[1]),\r\n                            long: parseInt(chummerWeapon.ranges.long.split('-')[1]),\r\n                            extreme: parseInt(chummerWeapon.ranges.extreme.split('-')[1]),\r\n                        };\r\n                    }\r\n                    // TODO figure out how to add mods to weapons\r\n                    // if (w.accessories && w.accessories.accessory) {\r\n                    //     range.mods = [];\r\n                    //     const accessories = this.getArray(w.accessories.accessory);\r\n                    //     accessories.forEach((a) => {\r\n                    //         if (a) {\r\n                    //             range.mods.push({\r\n                    //                 name: a.name,\r\n                    //             });\r\n                    //         }\r\n                    //     });\r\n                    // }\r\n                } else if (chummerWeapon.type.toLowerCase() === 'thrown') {\r\n                    data.category = 'thrown';\r\n                }\r\n                {\r\n                    // TODO handle raw damage if present\r\n                    const d = parseDamage(chummerWeapon.damage_english);\r\n                    damage.base = d.damage;\r\n                    damage.type = {};\r\n                    damage.type.base = d.type;\r\n                    if (d.dropoff || d.radius) {\r\n                        const thrown = {};\r\n                        data.thrown = thrown;\r\n                        thrown.blast = {\r\n                            radius: d.radius,\r\n                            dropoff: d.dropoff,\r\n                        };\r\n                    }\r\n                }\r\n\r\n                const itemData = {\r\n                    name: chummerWeapon.name,\r\n                    type: 'weapon',\r\n                    data,\r\n                };\r\n                parsedWeapons.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n    \r\n        return parsedWeapons;\r\n    }\r\n\r\n    parseArmors(chummerChar) {\r\n        const armors = this.getArray(chummerChar.armors.armor);\r\n        const parsedArmors = [];\r\n        armors.forEach((chummerArmor) => {\r\n            try {\r\n                const data = {};\r\n                const armor = {};\r\n                data.armor = armor;\r\n\r\n                let desc = '';\r\n                armor.mod = chummerArmor.armor.includes('+');\r\n                armor.value = parseInt(chummerArmor.armor.replace('+', ''));\r\n                if (chummerArmor.description) desc = chummerArmor.description;\r\n\r\n                console.log(chummerArmor);\r\n                if (chummerArmor.armormods && chummerArmor.armormods.armormod) {\r\n                    armor.fire = 0;\r\n                    armor.electricity = 0;\r\n                    armor.cold = 0;\r\n                    armor.acid = 0;\r\n                    armor.radiation = 0;\r\n\r\n                    const modDesc = [];\r\n                    const mods = this.getArray(chummerArmor.armormods.armormod);\r\n                    mods.forEach((mod) => {\r\n                        if (mod.name.toLowerCase().includes('fire resistance')) {\r\n                            armor.fire += parseInt(mod.rating);\r\n                        } else if (mod.name.toLowerCase().includes('nonconductivity')) {\r\n                            armor.electricity += parseInt(mod.rating);\r\n                        } else if (mod.name.toLowerCase().includes('insulation')) {\r\n                            armor.cold += parseInt(mod.rating);\r\n                        } else if (\r\n                            mod.name.toLowerCase().includes('radiation shielding')\r\n                        ) {\r\n                            armor.radiation += parseInt(mod.rating);\r\n                        }\r\n                        if (mod.rating !== '') {\r\n                            modDesc.push(`${mod.name} R${mod.rating}`);\r\n                        } else {\r\n                            modDesc.push(mod.name);\r\n                        }\r\n                    });\r\n                    if (modDesc.length > 0) {\r\n                        // add desc to beginning\r\n                        desc = `${modDesc.join(',')}\\n\\n${desc}`;\r\n                    }\r\n                }\r\n                if (chummerArmor.equipped.toLowerCase() === 'true') {\r\n                    data.technology = {\r\n                        equipped: true,\r\n                    };\r\n                }\r\n                data.description = this.parseDescription(chummerArmor);\r\n\r\n                const itemData = {\r\n                    name: chummerArmor.name,\r\n                    type: 'armor',\r\n                    data,\r\n                };\r\n                parsedArmors.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedArmors;\r\n    }\r\n\r\n    parseCyberware(chummerChar) {\r\n        const cyberwares = this.getArray(chummerChar.cyberwares.cyberware);\r\n        const parsedCyberware = [];\r\n        cyberwares.forEach((chummerCyber) => {\r\n            try {\r\n                const data = {};\r\n                data.description = this.parseDescription(chummerCyber);\r\n                data.description.rating = chummerCyber.rating; \r\n                data.description.value = chummerCyber.description;\r\n\r\n                data.technology = {\r\n                    equipped: true,\r\n                };\r\n                data.essence = chummerCyber.ess;\r\n                data.grade = chummerCyber.grade;\r\n                const itemData = {\r\n                    name: chummerCyber.name,\r\n                    type: 'cyberware',\r\n                    data,\r\n                };\r\n                parsedCyberware.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedCyberware;\r\n    }\r\n\r\n    parsePowers(chummerChar) {\r\n        const powers = this.getArray(chummerChar.powers.power);\r\n        const parsedPowers = [];\r\n\r\n        powers.forEach((chummerPower) => {\r\n            const data = {};\r\n            data.description = this.parseDescription(chummerPower);\r\n\r\n            data.level = parseInt(chummerPower.rating);\r\n            chummerPower.pp = parseInt(chummerPower.totalpoints);\r\n\r\n            const itemData = {\r\n                name: chummerPower.name,\r\n                type: 'adept_power',\r\n                data,\r\n            };\r\n            parsedPowers.push(itemData);\r\n        });\r\n    \r\n        return parsedPowers;\r\n    }\r\n\r\n    parseSpells(chummerChar) {\r\n        const spells = this.getArray(chummerChar.spells.spell);\r\n        const parsedSpells = [];\r\n        spells.forEach((chummerSpell) => {\r\n            try {\r\n                if (chummerSpell.alchemy.toLowerCase() !== 'true') {\r\n                    const action = {};\r\n                    const data = {};\r\n                    data.action = action;\r\n                    data.category = chummerSpell.category.toLowerCase().replace(/\\s/g, '_');\r\n                    data.name = chummerSpell.name;\r\n                    data.type = chummerSpell.type === 'M' ? 'mana' : 'physical';\r\n                    data.range =\r\n                        chummerSpell.range === 'T'\r\n                            ? 'touch'\r\n                            : chummerSpell.range\r\n                                  .toLowerCase()\r\n                                  .replace(/\\s/g, '_')\r\n                                  .replace('(', '')\r\n                                  .replace(')', '');\r\n                    data.drain = parseInt(chummerSpell.dv.replace('F', ''));\r\n                    data.description = this.parseDescription(chummerSpell);\r\n\r\n                    let description = '';\r\n                    if (chummerSpell.descriptors) description = chummerSpell.descriptors;\r\n                    if (chummerSpell.description) description += `\\n${chummerSpell.description}`;\r\n                    data.description.value = TextEditor.enrichHTML(description);\r\n\r\n                    if (chummerSpell.duration.toLowerCase() === 's') data.duration = 'sustained';\r\n                    else if (chummerSpell.duration.toLowerCase() === 'i')\r\n                        data.duration = 'instant';\r\n                    else if (chummerSpell.duration.toLowerCase() === 'p')\r\n                        data.duration = 'permanent';\r\n\r\n                    action.type = 'varies';\r\n                    action.skill = 'spellcasting';\r\n                    action.attribute = 'magic';\r\n\r\n                    if (chummerSpell.descriptors) {\r\n                        const desc = chummerSpell.descriptors.toLowerCase();\r\n                        if (chummerSpell.category.toLowerCase() === 'combat') {\r\n                            data.combat = {};\r\n                            if (desc.includes('direct')) {\r\n                                data.combat.type = 'indirect';\r\n                                action.opposed = {\r\n                                    type: 'defense',\r\n                                };\r\n                            } else {\r\n                                data.combat.type = 'direct';\r\n                                if (data.type === 'mana') {\r\n                                    action.opposed = {\r\n                                        type: 'custom',\r\n                                        attribute: 'willpower',\r\n                                    };\r\n                                } else if (data.type === 'physical') {\r\n                                    action.opposed = {\r\n                                        type: 'custom',\r\n                                        attribute: 'body',\r\n                                    };\r\n                                }\r\n                            }\r\n                        }\r\n                        if (chummerSpell.category.toLowerCase() === 'detection') {\r\n                            data.detection = {};\r\n                            const split = desc.split(',');\r\n                            split.forEach((token) => {\r\n                                token = token || '';\r\n                                token = token.replace(' detection spell', '');\r\n                                if (!token) return;\r\n                                if (token.includes('area')) return;\r\n\r\n                                if (token.includes('passive'))\r\n                                    data.detection.passive = true;\r\n                                else if (token.includes('active'))\r\n                                    data.detection.passive = false;\r\n                                else if (token)\r\n                                    data.detection.type = token.toLowerCase();\r\n                            });\r\n                            if (!data.detection.passive) {\r\n                                action.opposed = {\r\n                                    type: 'custom',\r\n                                    attribute: 'willpower',\r\n                                    attribute2: 'logic',\r\n                                };\r\n                            }\r\n                        }\r\n                        if (chummerSpell.category.toLowerCase() === 'illusion') {\r\n                            data.illusion = {};\r\n                            const split = desc.split(',');\r\n                            split.forEach((token) => {\r\n                                token = token || '';\r\n                                token = token.replace(' illusion spell', '');\r\n                                if (!token) return;\r\n                                if (token.includes('area')) return;\r\n\r\n                                if (token.includes('sense'))\r\n                                    data.illusion.sense = token.toLowerCase();\r\n                                else if (token)\r\n                                    data.illusion.type = token.toLowerCase();\r\n                            });\r\n                            if (data.type === 'mana') {\r\n                                action.opposed = {\r\n                                    type: 'custom',\r\n                                    attribute: 'willpower',\r\n                                    attribute2: 'logic',\r\n                                };\r\n                            } else {\r\n                                action.opposed = {\r\n                                    type: 'custom',\r\n                                    attribute: 'intuition',\r\n                                    attribute2: 'logic',\r\n                                };\r\n                            }\r\n                        }\r\n                        if (chummerSpell.category.toLowerCase() === 'manipulation') {\r\n                            data.manipulation = {};\r\n                            if (desc.includes('environmental'))\r\n                                data.manipulation.environmental = true;\r\n                            if (desc.includes('physical'))\r\n                                data.manipulation.physical = true;\r\n                            if (desc.includes('mental'))\r\n                                data.manipulation.mental = true;\r\n                            // TODO figure out how to parse damaging\r\n\r\n                            if (data.manipulation.mental) {\r\n                                action.opposed = {\r\n                                    type: 'custom',\r\n                                    attribute: 'willpower',\r\n                                    attribute2: 'logic',\r\n                                };\r\n                            }\r\n                            if (data.manipulation.physical) {\r\n                                action.opposed = {\r\n                                    type: 'custom',\r\n                                    attribute: 'body',\r\n                                    attribute2: 'strength',\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                    const itemData = {\r\n                        name: chummerSpell.name,\r\n                        type: 'spell',\r\n                        data,\r\n                    };\r\n                    parsedSpells.push(itemData);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedSpells;\r\n    }\r\n}\r\n","/**\r\n * Parses a certain class of gear (depending on the implementation).\r\n */\r\nexport interface GearParser {\r\n    /**\r\n     * Parses a gear entry and returns the corresponding foundry sr item data.\r\n     * @param chummerGear A chummer gear entry\r\n     */\r\n    parse(chummerGear : any) : any\r\n}\r\n\r\n/**\r\n * Base class for all gear parsers. Parses common information across all gear.\r\n */\r\nexport class BaseGearParser implements GearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear = this.getDefaultData();\r\n        parsedGear.name = chummerGear.name;\r\n        if (chummerGear.extra)\r\n        {\r\n            parsedGear.name += ` (${chummerGear.extra})`;\r\n        }\r\n\r\n        parsedGear.data.technology.rating = chummerGear.rating;\r\n        parsedGear.data.technology.quantity = chummerGear.qty;\r\n        parsedGear.data.description =\r\n        {\r\n            value: '',\r\n            chat: '',\r\n            source: `${chummerGear.source} ${chummerGear.page}`\r\n        };\r\n\r\n        return parsedGear;\r\n    }\r\n\r\n    private getDefaultData() {\r\n        return {\r\n            name: '',\r\n            _id: '',\r\n            folder: '',\r\n            flags: {},\r\n            type: 'equipment',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: false,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                }\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n","import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses devices (commlinks and decks)\r\n */\r\nexport class DeviceParser extends BaseGearParser {\r\n   \r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'device';\r\n        parsedGear.data.technology.rating = chummerGear.devicerating;\r\n        parsedGear.data.technology.condition_monitor = \r\n        {\r\n            value: 0,\r\n            max: Number(chummerGear.conditionmonitor),\r\n            label: ''\r\n        };\r\n\r\n        parsedGear.data.atts = {\r\n            att1:\r\n            {\r\n                value: chummerGear.attack,\r\n                att: 'attack'\r\n            },\r\n\r\n            att2:\r\n            {\r\n                value: chummerGear.sleaze,\r\n                att: 'sleaze'\r\n            },\r\n\r\n            att3:\r\n            {\r\n                value: chummerGear.dataprocessing,\r\n                att: 'data_processing'\r\n            },\r\n\r\n            att4:\r\n            {\r\n                value: chummerGear.firewall,\r\n                att: 'firewall'\r\n            } \r\n        };\r\n\r\n        if (chummerGear.category === 'Cyberdecks')\r\n        {\r\n            parsedGear.data.category = 'cyberdeck';\r\n        }\r\n\r\n        if (chummerGear.category === 'Commlinks')\r\n        {\r\n            parsedGear.data.category = 'commlink';\r\n        }\r\n\r\n        if (chummerGear.category === 'Rigger Command Consoles')\r\n        {\r\n            // We are handling rccs as commlinks for the moment since we have no support for rigger command consoles yet.\r\n            parsedGear.data.category = 'commlink'; \r\n        }\r\n\r\n        return parsedGear;\r\n    }\r\n}","import { ParserSelector } from \"./ParserSelector\";\r\n\r\n/**\r\n * Parses all gear from a chummer character file and turns them into foundry sr item data objects\r\n */\r\nexport class GearsParser {\r\n\r\n    /**\r\n     * Parses all chummer gear entries\r\n     * @param chummerGears Array of chummer gear entries\r\n     */\r\n    parseAllGear(chummerGears : any) : any {\r\n        let items : any[] = [];\r\n\r\n        chummerGears.forEach((chummerGear) => {\r\n            try {\r\n                const itemsData = this.parseGearEntry(chummerGear);\r\n                items.push(itemsData);\r\n            }\r\n\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    private parseGearEntry(chummerGear : any) : any {\r\n        const parserSelector = new ParserSelector();\r\n        const parser = parserSelector.select(chummerGear);\r\n        return parser.parse(chummerGear);\r\n    }\r\n}\r\n","import { GearParser, BaseGearParser } from \"./BaseGearParser\";\r\nimport { SinParser } from \"./SinParser\";\r\nimport { DeviceParser } from \"./DeviceParser\";\r\nimport { ProgramParser } from \"./ProgramParser\";\r\n\r\n/**\r\n * Responsible for selecting the correct GearParser depending on the gear.\r\n */\r\nexport class ParserSelector {\r\n\r\n    /**\r\n     * Selects the correct GearParser depending on the gear.\r\n     * @param chummerGear The gear that needs to be parsed\r\n     * The correct GearParser for this gear entry.\r\n     */ \r\n    select(chummerGear : any) : GearParser {\r\n        if (chummerGear.issin === 'True')\r\n        {\r\n            return new SinParser();\r\n        }\r\n\r\n        if (chummerGear.iscommlink === 'True')\r\n        {\r\n            return new DeviceParser();\r\n        }\r\n\r\n        if (chummerGear.category === 'Common Programs' || \r\n            chummerGear.category === 'Hacking Programs' || \r\n            chummerGear.category === 'Software')\r\n        {\r\n            return new ProgramParser();\r\n        }\r\n\r\n        return new BaseGearParser();\r\n    }\r\n}","import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses common, hacking and agent programs.\r\n */\r\nexport class ProgramParser extends BaseGearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'program';\r\n\r\n        if (chummerGear.category === 'Common Programs')\r\n        {\r\n            parsedGear.data.type = 'common_program'\r\n        }\r\n        else if (chummerGear.category === 'Hacking Programs')\r\n        {\r\n            parsedGear.data.type = 'hacking_program'\r\n        } \r\n        else if (chummerGear.category === 'Software')\r\n        {\r\n            parsedGear.data.type = 'agent'\r\n        }\r\n\r\n        return parsedGear;\r\n    }\r\n}","import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses SINs and the attached licenses.\r\n * Licenses that are not attached to a SIN are not handled.\r\n */\r\nexport class SinParser extends BaseGearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'sin';\r\n\r\n        // Create licenses if there are any\r\n        if (chummerGear.children) {\r\n\r\n            // \"gear\" is either  a single gear entry or an array of gear entries depending on the number of licenses\r\n            const chummerLicenses : any[] = [];\r\n            if (!Array.isArray(chummerGear.children.gear)) {\r\n                chummerLicenses.push(chummerGear.children.gear)\r\n            }\r\n            else {\r\n                chummerLicenses.push(...chummerGear.children.gear);\r\n            }\r\n\r\n            parsedGear.data.licenses = this.parseLicenses(chummerLicenses);\r\n        }\r\n        return parsedGear;\r\n    }\r\n\r\n    private parseLicenses(chummerLicenses : any) : any[] {\r\n        const parsedLicenses : any[] = []; \r\n\r\n        chummerLicenses.forEach(chummerLicense => {\r\n            if (chummerLicense.category === 'ID/Credsticks')\r\n            {\r\n                parsedLicenses.push(\r\n                    {\r\n                        name: chummerLicense.extra, // 'extra' holds the type of license from chummer\r\n                        rtg: chummerLicense.rating,\r\n                        description: ''\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        return parsedLicenses;\r\n    }\r\n}\r\n","import {_mergeWithMissingSkillFields} from \"../actor/prep/functions/SkillsPrep\";\r\nimport {CharacterImporter} from \"./characterImport/CharacterImporter\"\r\n\r\nexport class ChummerImportForm extends FormApplication {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-import';\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = 'Chummer/Hero Lab Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        return {};\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.submit-chummer-import').click(async (event) => {\r\n            event.preventDefault();\r\n\r\n            const chummerFile = JSON.parse($('.chummer-text').val());\r\n            const importOptions = {\r\n                weapons: $('.weapons').is(':checked'),\r\n                armor: $('.armor').is(':checked'),\r\n                cyberware: $('.cyberware').is(':checked'),\r\n                equipment: $('.gear').is(':checked'),\r\n                qualities: $('.qualities').is(':checked'),\r\n                powers: $('.powers').is(':checked'),\r\n                spells: $('.spells').is(':checked')\r\n            }\r\n\r\n            const importer = new CharacterImporter();\r\n            await importer.importChummerCharacter(this.object, chummerFile, importOptions);\r\n\r\n            ui.notifications.info(\r\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\r\n            );\r\n            this.close();\r\n        });\r\n    }\r\n}\r\n","import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\n\r\nexport class DamageApplicationDialog extends FormDialog {\r\n    constructor(actors: SR5Actor[], damage: DamageData, options?: Application.Options) {\r\n        const dialogData = DamageApplicationDialog.getDialogData(actors, damage);\r\n        super(dialogData, options);\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'damage-application';\r\n        // TODO: Class Dialog here is needed for dialog button styling.\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.resizable = true;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    // TODO: check if 'getData' is what this is...\r\n    static getDialogData(actors: SR5Actor[], damage: DamageData): FormDialogData {\r\n        const title = game.i18n.localize('SR5.DamageApplication.Title');\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html';\r\n\r\n        // Possibly modify damage type for each actor due to armor, to increase transparency.\r\n        const actorDamage = actors.map(actor => {\r\n            return {\r\n                actor,\r\n                // Don't change damage type for grunt to avoid confusing user.\r\n                modified: actor._applyDamageTypeChangeForArmor(damage),\r\n                armor: actor.getModifiedArmor(damage)\r\n            }\r\n        });\r\n\r\n        const templateData = {\r\n            damage,\r\n            actorDamage,\r\n        };\r\n\r\n        const buttons = {\r\n            damage: {\r\n                label: game.i18n.localize('SR5.DamageApplication.ApplyDamage')\r\n            },\r\n            unmodifiedDamage: {\r\n                label: game.i18n.localize('SR5.DamageApplication.ApplyUnmodifiedDamage')\r\n            }\r\n        }\r\n\r\n        const onAfterClose = () => actorDamage;\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            onAfterClose,\r\n            buttons,\r\n            default: 'damage'\r\n        }\r\n    }\r\n}","import {FormDialog} from \"./FormDialog\";\r\n\r\nexport class DeleteConfirmationDialog extends FormDialog {\r\n    constructor(options?: Application.Options) {\r\n        const dialogData = DeleteConfirmationDialog.getDialogData();\r\n\r\n        super(dialogData, options)\r\n    }\r\n\r\n    static getDialogData() {\r\n        return {\r\n            title: game.i18n.localize(\"SR5.DeleteConfirmationApplication.Title\"),\r\n            buttons: {\r\n                delete: {\r\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Delete')\r\n                },\r\n                cancel: {\r\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Cancel')\r\n                }\r\n            },\r\n            default: 'cancel',\r\n            templateData: {},\r\n            templatePath: 'systems/shadowrun5e/dist/templates/apps/dialogs/delete-confirmation-dialog.html'\r\n        }\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'delete-confirmation-application';\r\n        // Class Dialog here is needed for dialog button styling.\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.resizable = true;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n}","export interface FormDialogData {\r\n    title?: string;\r\n\tbuttons: Record<string, DialogButton>;\r\n\tdefault?: string;\r\n\ttemplateData: object;\r\n\ttemplatePath: string;\r\n\tonAfterClose?: Function;\r\n}\r\n\r\n/** TODO: Documentation with usage example\r\n *  TODO: Rework getDialogData approach with the general getData Application style,\r\n *        to allow rerender from within the Dialog instance without external data\r\n *        reinitialization.\r\n *        This would for things like updating a dialog based on currently selected tokens\r\n *        without reopening.\r\n */\r\nexport class FormDialog extends Dialog {\r\n    selection: object;\r\n    selectedButton: string;\r\n\r\n    _onAfterClose: Function;\r\n    _selectionPromise: Promise<object>;\r\n    _selectionResolve: Function;\r\n    _selectionReject: Function;\r\n    _templateData: object;\r\n    _templatePath: string;\r\n\r\n    constructor(dialogData: FormDialogData, options?: Application.Options) {\r\n        super(dialogData, options);\r\n\r\n        const {templateData, templatePath} = dialogData;\r\n        this._templateData = templateData;\r\n        this._templatePath = templatePath;\r\n\r\n        this._onAfterClose = dialogData.onAfterClose ? dialogData.onAfterClose : () => {};\r\n\r\n        this.selection = this._emptySelection();\r\n\r\n        this._selectionPromise = new Promise((resolve, reject) => {\r\n            this._selectionResolve = resolve;\r\n            // Reject is stored, but never used in favor of FormDialog.canceled\r\n            this._selectionReject = reject;\r\n        });\r\n\r\n        this._amendButtonsWithName();\r\n    }\r\n\r\n    async close() {\r\n        await super.close();\r\n\r\n        if (this.canceled) {\r\n            this._selectionResolve(this.selection);\r\n        }\r\n    }\r\n\r\n    async submit(button) {\r\n        this.selectedButton = button.name ?? button.label;\r\n\r\n        //@ts-ignore\r\n        super.submit(button);\r\n        await this.afterSubmit(\"jQuery\" in this.options ? this.element : this.element [0]);\r\n    }\r\n\r\n    async afterSubmit(html: JQuery) {\r\n        // Await in case of a possible async handler.\r\n        this.selection = await this._onAfterClose(html, this.selectedButton);\r\n        this._selectionResolve(this.selection);\r\n    }\r\n\r\n    async getData(options) {\r\n        const content = await renderTemplate(this._templatePath, this._templateData);\r\n        return mergeObject(super.getData(), {\r\n            content\r\n        });\r\n    }\r\n\r\n    async select(): Promise<any> {\r\n        await this.render(true);\r\n\r\n        if (this._selectionPromise === undefined || this.selection === undefined) {\r\n            return this._emptySelection();\r\n        }\r\n        return await this._selectionPromise;\r\n    }\r\n\r\n    _emptySelection(): object {\r\n        return {};\r\n    }\r\n\r\n    /** Dialog has been confirmed and something has been selected.\r\n     */\r\n    get selected(): boolean {\r\n        return !this.canceled;\r\n    }\r\n\r\n    /** Dialog has been canceled and nothing has been selected\r\n     */\r\n    get canceled(): boolean {\r\n        return !this.selectedButton;\r\n    }\r\n\r\n    /** @override */\r\n    static getButtons(): Record<string, DialogButton> {\r\n        return {};\r\n    }\r\n\r\n    /** Allow for the selected button to be addressed by it's key, not it's localized label.\r\n     */\r\n    _amendButtonsWithName() {\r\n        //@ts-ignore\r\n        Object.keys(this.data.buttons).forEach(name => this.data.buttons[name].name = name);\r\n    }\r\n}","import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {Helpers} from \"../../helpers\";\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport ModList = Shadowrun.ModList;\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\r\nimport SkillDialogOptions = Shadowrun.SkillDialogOptions;\r\nimport CombatData = Shadowrun.CombatData;\r\n\r\n\r\nexport class ShadowrunActorDialogs {\r\n    static async createDefenseDialog(actor: SR5Actor, options: DefenseRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\r\n        const defenseDialogData = ShadowrunActorDialogs.getDefenseDialogData(actor, options, partsProps);\r\n\r\n        return new FormDialog(defenseDialogData);\r\n    }\r\n\r\n    static async createSoakDialog(actor: SR5Actor, options: SoakRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\r\n        const soakDialogData = ShadowrunActorDialogs.getSoakDialogData(actor, options, partsProps);\r\n\r\n        return new FormDialog(soakDialogData);\r\n    }\r\n\r\n    static async createSkillDialog(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): Promise<FormDialog> {\r\n        const skillDialogData = ShadowrunActorDialogs.getSkillDialogData(actor, options, partsProps);\r\n\r\n        return new FormDialog(skillDialogData);\r\n    }\r\n\r\n    static getDefenseDialogData(actor: SR5Actor,  options: DefenseRollOptions, partsProps: ModList<number>): FormDialogData {\r\n        const title = game.i18n.localize('SR5.Defense');\r\n\r\n        const activeDefenses = {\r\n            full_defense: {\r\n                label: 'SR5.FullDefense',\r\n                value: actor.getFullDefenseAttribute()?.value,\r\n                initMod: -10,\r\n            },\r\n            dodge: {\r\n                label: 'SR5.Dodge',\r\n                value: actor.findActiveSkill('gymnastics')?.value,\r\n                initMod: -5,\r\n            },\r\n            block: {\r\n                label: 'SR5.Block',\r\n                value: actor.findActiveSkill('unarmed_combat')?.value,\r\n                initMod: -5,\r\n            },\r\n        };\r\n\r\n        const equippedMeleeWeapons = actor.getEquippedWeapons().filter((w) => w.isMeleeWeapon());\r\n        let defenseReach = 0;\r\n        equippedMeleeWeapons.forEach((weapon) => {\r\n            activeDefenses[`parry-${weapon.name}`] = {\r\n                label: 'SR5.Parry',\r\n                weapon: weapon.name,\r\n                value: actor.findActiveSkill(weapon.getActionSkill())?.value,\r\n                init: -5,\r\n            };\r\n            defenseReach = Math.max(defenseReach, weapon.getReach());\r\n        });\r\n\r\n        const parts = new PartsList(partsProps);\r\n        actor._addDefenseParts(parts);\r\n\r\n        // if we are defending a melee attack\r\n        if (options.attack?.reach) {\r\n            const incomingReach = options.attack.reach;\r\n            const netReach = defenseReach - incomingReach;\r\n            if (netReach !== 0) {\r\n                parts.addUniquePart('SR5.Reach', netReach);\r\n            }\r\n        }\r\n\r\n        const buttons = {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n\r\n        const onAfterClose = (html) => {\r\n            const cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\r\n            const special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\r\n            // Zero to indicate no initiative result change.\r\n            const combat: CombatData = {};\r\n\r\n            if (cover) {\r\n                parts.addUniquePart('SR5.Cover', cover)\r\n            }\r\n            if (special) {\r\n                // Defense pool modifier\r\n                const defense = activeDefenses[special];\r\n                parts.addUniquePart(defense.label, defense.value);\r\n\r\n                // Combat initiative modifier\r\n                combat.initiative = defense.initMod;\r\n            }\r\n\r\n            return {cover, special, parts, combat};\r\n        }\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\r\n        const templateData = {\r\n            parts: parts.getMessageOutput(),\r\n            cover: options.cover,\r\n            activeDefenses\r\n        };\r\n\r\n        return {\r\n            title,\r\n            templateData,\r\n            templatePath,\r\n            buttons,\r\n            onAfterClose\r\n        }\r\n    }\r\n\r\n    static getSoakDialogData(actor: SR5Actor, options: SoakRollOptions, partsProps: ModList<number>): FormDialogData {\r\n        const title = game.i18n.localize('SR5.DamageResistanceTest');\r\n\r\n        const parts = new PartsList(partsProps);\r\n        actor._addSoakParts(parts);\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\r\n        const templateData = {\r\n            damage: options?.damage,\r\n            parts: parts.getMessageOutput(),\r\n            elementTypes: CONFIG.SR5.elementTypes,\r\n        };\r\n\r\n        const buttons =  {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n\r\n        const onAfterClose = (html: JQuery) => {\r\n            const soak: DamageData = options?.damage\r\n                    ? options.damage\r\n                : {\r\n                    base: 0,\r\n                    value: 0,\r\n                    mod: [],\r\n                    ap: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    attribute: '' as const,\r\n                    type: {\r\n                        base: '',\r\n                        value: '',\r\n                    },\r\n                    element: {\r\n                        base: '',\r\n                        value: '',\r\n                    },\r\n                };\r\n            // handle ap changes\r\n            const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\r\n\r\n\r\n            const armor = actor.getArmor();\r\n            if (armor) {\r\n                // handle element changes\r\n                const element = Helpers.parseInputToString($(html).find('[name=element]').val());\r\n                if (element) {\r\n                    soak.element.value = element as DamageElement;\r\n                }\r\n                const bonusArmor = armor[element] ?? 0;\r\n                if (bonusArmor) {\r\n                    parts.addUniquePart(CONFIG.SR5.elementTypes[element], bonusArmor);\r\n                }\r\n\r\n                if (ap) {\r\n                    let armorVal = armor.value + bonusArmor;\r\n\r\n                    // don't take more AP than armor\r\n                    parts.addUniquePart('SR5.AP', Math.max(ap, -armorVal));\r\n                }\r\n            }\r\n\r\n            // handle incoming damage changes\r\n            const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\r\n            if (incomingDamage) {\r\n                const totalDamage = Helpers.calcTotal(soak);\r\n                if (totalDamage !== incomingDamage) {\r\n                    const diff = incomingDamage - totalDamage;\r\n                    // add part and calc total again\r\n                    soak.mod = PartsList.AddUniquePart(soak.mod, 'SR5.UserInput', diff);\r\n                    soak.value = Helpers.calcTotal(soak);\r\n                }\r\n\r\n                const totalAp = Helpers.calcTotal(soak.ap);\r\n                if (totalAp !== ap) {\r\n                    const diff = ap - totalAp;\r\n                    // add part and calc total\r\n                    soak.ap.mod = PartsList.AddUniquePart(soak.ap.mod, 'SR5.UserInput', diff);\r\n                    soak.ap.value = Helpers.calcTotal(soak.ap);\r\n                }\r\n            }\r\n\r\n            return {soak, parts};\r\n        }\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            buttons,\r\n            onAfterClose\r\n        }\r\n    }\r\n\r\n    static getSkillDialogData(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): FormDialogData {\r\n        const title = game.i18n.localize(options.skill.label);\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/skill-roll.html';\r\n\r\n        const attributes = actor.getAttributes();\r\n        const attribute = actor.getAttribute(options.attribute ? options.attribute : options.skill.attribute);\r\n        const limits = actor.getLimits();\r\n\r\n        const templateData = {\r\n            attribute: options.skill.attribute,\r\n            attributes: Helpers.filter(attributes, ([, value]) => value.value > 0),\r\n            limit: attribute.limit,\r\n            limits\r\n        }\r\n\r\n\r\n        const buttons = {\r\n            roll: {\r\n                label: game.i18n.localize('SR5.NormalSkillButton'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n        // add specializations to dialog as buttons\r\n        if (options.skill.specs?.length) {\r\n            options.skill.specs.forEach(\r\n                (spec) =>\r\n                    (buttons[spec] = {\r\n                        label: spec,\r\n                        callback: () => {},\r\n                    }),\r\n            );\r\n        }\r\n\r\n        const onAfterClose = (html: JQuery, selectedButton) => {\r\n            const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\r\n            const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\r\n            const attribute = actor.getAttribute(newAtt);\r\n            const limit = actor.getLimit(newLimit);\r\n            const skillLabel = game.i18n.localize(options.skill.label);\r\n            const attributeLabel = game.i18n.localize(CONFIG.SR5.attributes[newAtt]);\r\n            const testLabel = game.i18n.localize('SR5.Test')\r\n\r\n            const skillTestTitle = `${skillLabel} + ${attributeLabel} ${testLabel}`;\r\n\r\n            partsProps.addUniquePart(attribute.label, attribute.value);\r\n\r\n            // Check for skill defaulting at the base, since modifiers or bonus can cause a positive pool, while\r\n            // still defaulting.\r\n            const isDefaulting = options.skill.base === 0;\r\n            if (isDefaulting) {\r\n                partsProps.addUniquePart('SR5.Defaulting', -1);\r\n            }\r\n\r\n            // Possible specialization based on button label.\r\n            const isSpecialization = options.skill.specs.includes(selectedButton);\r\n            if (isSpecialization) {\r\n                partsProps.addUniquePart('SR5.Specialization', 2);\r\n            }\r\n\r\n            return {\r\n                title: skillTestTitle,\r\n                attribute,\r\n                limit,\r\n                skill: options.skill,\r\n                parts: partsProps\r\n            }\r\n        }\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            buttons,\r\n            onAfterClose\r\n        }\r\n    }\r\n}","import {SR5Item} from '../../item/SR5Item';\r\nimport {Helpers} from '../../helpers';\r\nimport {LENGTH_UNIT, SR} from \"../../constants\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\r\nimport RangeData = Shadowrun.RangeData;\r\nimport {FormDialog} from \"./FormDialog\";\r\nimport WeaponData = Shadowrun.WeaponData;\r\n\r\ntype ItemDialogData = {\r\n    dialogData: DialogData | undefined,\r\n    getActionTestData: Function | undefined,\r\n    itemHasNoDialog: boolean\r\n};\r\n\r\nexport type RangedWeaponActionTestData = {\r\n    environmental: {\r\n        range?: number\r\n    },\r\n    fireMode: FireModeData,\r\n}\r\n\r\nexport type SpellActionTestData = {\r\n    force: number,\r\n    reckless: boolean,\r\n}\r\n\r\nexport type ComplexFormTestData = {\r\n    level: number\r\n}\r\n\r\nexport type ActionTestData = {\r\n    rangedWeapon?: RangedWeaponActionTestData,\r\n    spell?: SpellActionTestData,\r\n    complexForm?: ComplexFormTestData,\r\n    targetId?: string\r\n}\r\n\r\n\r\nexport class ShadowrunItemDialog {\r\n    static async create(item: SR5Item, event?: MouseEvent): Promise<FormDialog|undefined> {\r\n\r\n        if (item.isRangedWeapon()) {\r\n            return ShadowrunItemDialog.createRangedWeaponDialog(item, event);\r\n        }\r\n\r\n        if (item.isSpell()) {\r\n            return ShadowrunItemDialog.createSpellDialog(item, event);\r\n        }\r\n\r\n        if (item.isComplexForm()) {\r\n            return ShadowrunItemDialog.createComplexFormDialog(item, event);\r\n        }\r\n    }\r\n\r\n    static async createRangedWeaponDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\r\n        const dialogData = {title: item.name,\r\n                            event,\r\n        };\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/range-weapon-roll.html';\r\n        const templateData = {};\r\n        const onAfterClose = ShadowrunItemDialog.addRangedWeaponData(templateData, dialogData, item);\r\n\r\n        dialogData['templateData'] = templateData;\r\n        dialogData['templatePath'] = templatePath;\r\n        dialogData['onAfterClose'] = onAfterClose;\r\n\r\n        //@ts-ignore\r\n        return new FormDialog(dialogData);\r\n    }\r\n\r\n    static async createSpellDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\r\n        const dialogData = {title: item.name,\r\n                            event,\r\n        };\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-spell.html';\r\n        const templateData = {};\r\n        const onAfterClose = ShadowrunItemDialog.addSpellData(templateData, dialogData, item);\r\n\r\n        dialogData['templateData'] = templateData;\r\n        dialogData['templatePath'] = templatePath;\r\n        dialogData['onAfterClose'] = onAfterClose;\r\n\r\n        //@ts-ignore\r\n        return new FormDialog(dialogData);\r\n    }\r\n\r\n    static async createComplexFormDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\r\n        const dialogData = {title: item.name,\r\n                            event,\r\n        };\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-complex-form.html';\r\n        const templateData = {};\r\n        const onAfterClose = ShadowrunItemDialog.addComplexFormData(templateData, dialogData, item);\r\n\r\n        dialogData['templateData'] = templateData;\r\n        dialogData['templatePath'] = templatePath;\r\n        dialogData['onAfterClose'] = onAfterClose;\r\n\r\n        //@ts-ignore\r\n        return new FormDialog(dialogData);\r\n    }\r\n\r\n    static addComplexFormData(templateData: object, dialogData: DialogData, item: SR5Item): Function {\r\n        const fade = item.getFade();\r\n        const title = `${Helpers.label(item.name)} Level`;\r\n\r\n        const level = item.getLastComplexFormLevel()?.value || 2 - fade;\r\n\r\n        templateData['fade'] = fade >= 0 ? `+${fade}` : fade;\r\n        templateData['level'] = level;\r\n        templateData['title'] = title;\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        return async (html: JQuery): Promise<ActionTestData|undefined> => {\r\n            if (cancel) return;\r\n\r\n            const actionTestData = {} as ComplexFormTestData;\r\n\r\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedComplexFormLevel(html))\r\n\r\n            // TODO: Remnants of old style data flow. Look into RangedWeapon for newer style.\r\n            await item.setLastComplexFormLevel({value: actionTestData.level});\r\n\r\n            return {complexForm: actionTestData};\r\n        };\r\n    }\r\n\r\n    static _getSelectedComplexFormLevel(html: JQuery): object {\r\n        const level = Helpers.parseInputToNumber($(html).find('[name=level]').val());\r\n        return {level};\r\n    }\r\n\r\n    static addSpellData(templateData: object, dialogData: DialogData, item: SR5Item): Function {\r\n        const title = `${Helpers.label(item.name)} Force`;\r\n        const drain = item.getDrain();\r\n\r\n        const force = item.getLastSpellForce()?.value || 2 - drain;\r\n\r\n        templateData['drain'] = drain >= 0 ? `+${drain}` : `${drain}`;\r\n        templateData['force'] = force;\r\n        templateData['title'] = title;\r\n\r\n        dialogData.title = title;\r\n        let cancel = true;\r\n        let reckless = false;\r\n        dialogData.buttons = {\r\n            normal: {\r\n                label: game.i18n.localize('SR5.NormalSpellButton'),\r\n                callback: () => (cancel = false),\r\n            },\r\n            reckless: {\r\n                label: game.i18n.localize('SR5.RecklessSpellButton'),\r\n                callback: () => {\r\n                    reckless = true;\r\n                    cancel = false;\r\n                },\r\n            },\r\n        };\r\n        dialogData.default = 'normal';\r\n\r\n        return async (html: JQuery): Promise<ActionTestData|undefined> => {\r\n            if (cancel) return;\r\n\r\n            const actionTestData = {} as SpellActionTestData;\r\n\r\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedSpellForce(html));\r\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedSpellReckless(reckless));\r\n\r\n            await item.setLastSpellForce({value: actionTestData.force, reckless: actionTestData.reckless});\r\n\r\n            return {spell: actionTestData};\r\n        };\r\n    }\r\n\r\n    static _getSelectedSpellForce(html: JQuery): object {\r\n        const force = Helpers.parseInputToNumber($(html).find('[name=force]').val());\r\n        return {force}\r\n    }\r\n\r\n    static _getSelectedSpellReckless(reckless: boolean): object {\r\n        return {reckless}\r\n    }\r\n\r\n    static addRangedWeaponData(templateData: object, dialogData: DialogData, item: SR5Item): Function {\r\n        let title = dialogData.title || item.name;\r\n\r\n        const itemData = item.data.data as WeaponData;\r\n        const fireModes = {};\r\n\r\n        const {modes, ranges} = itemData.range;\r\n        const {ammo} = itemData;\r\n        // TODO: This should be moved into constants or some kind of 'rulesData'\r\n        if (modes.single_shot) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSingleShotShort\");\r\n        }\r\n        if (modes.semi_auto) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoShort\");\r\n            fireModes['3'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\");\r\n        }\r\n        if (modes.burst_fire) {\r\n            fireModes['3'] = `${modes.semi_auto ? `${game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\")}/` : ''}${game.i18n.localize(\"SR5.WeaponModeBurstFireShort\")}`;\r\n            fireModes['6'] = game.i18n.localize(\"SR5.WeaponModeBurstFireLong\");\r\n        }\r\n        if (modes.full_auto) {\r\n            fireModes['6'] = `${modes.burst_fire ? 'LB/' : ''}${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(s)`;\r\n            fireModes['10'] = `${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(c)`;\r\n            fireModes['20'] = game.i18n.localize('SR5.Suppressing');\r\n        }\r\n\r\n        const templateRanges = this._getRangeWeaponTemplateData(ranges);\r\n        const fireMode = item.getLastFireMode();\r\n        const rc = item.getRecoilCompensation(true);\r\n        templateData['fireModes'] = fireModes;\r\n        templateData['fireMode'] = fireMode?.value;\r\n        templateData['rc'] = rc;\r\n        templateData['ammo'] = ammo;\r\n        templateData['title'] = title;\r\n        templateData['ranges'] = templateRanges;\r\n        templateData['targetRange'] = item.getLastFireRangeMod();\r\n\r\n        if (item.actor.getToken() && Helpers.userHasTargets()) {\r\n            templateData['targetsSelected'] = Helpers.userHasTargets();\r\n            templateData['targets'] = ShadowrunItemDialog._getTargetRangeTemplateData(item.actor, templateRanges);\r\n        } else if (!item.actor.getToken() && Helpers.userHasTargets()) {\r\n            // Inform user about usage of actors without tokens!\r\n            ui.notifications.warn(game.i18n.localize('SR5.TargetingNeedsActorWithToken'));\r\n        }\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        // TODO: Move this selection handler to an appropriate place. Maybe split ShadowrunItemDialog into subclasses.\r\n        return async (html): Promise<ActionTestData|undefined> => {\r\n            if (cancel) {\r\n                return;\r\n            }\r\n\r\n            const actionTestData = {} as RangedWeaponActionTestData;\r\n\r\n            if (Helpers.userHasTargets()) {\r\n                mergeObject(actionTestData, ShadowrunItemDialog._getSelectedTargetRangeModifier(html));\r\n            } else {\r\n                mergeObject(actionTestData, ShadowrunItemDialog._getSelectedRangeModifier(html));\r\n                // Store lastFireRange for generic range selection.\r\n            }\r\n\r\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedFireMode(html, fireModes))\r\n\r\n            const {targetId} = ShadowrunItemDialog._getSelectedTargetTokenId(html);\r\n\r\n            // Store selections for next dialog.\r\n            if (actionTestData.environmental?.range) {\r\n                await item.setLastFireRangeMod({value: actionTestData.environmental.range});\r\n            }\r\n            if (actionTestData.fireMode) {\r\n                await item.setLastFireMode(actionTestData.fireMode);\r\n            }\r\n\r\n            return {rangedWeapon: actionTestData, targetId};\r\n        };\r\n    }\r\n\r\n    static _getRangeWeaponTemplateData(ranges: RangeData): RangesTemplateData {\r\n        const {range_modifiers} = SR.combat.environmental;\r\n        const newRanges = {} as RangesTemplateData;\r\n        for (const [key, value] of Object.entries(ranges)) {\r\n            const distance = value as number;\r\n            newRanges[key] = Helpers.createRangeDescription(CONFIG.SR5.weaponRanges[key], distance, range_modifiers[key]);\r\n        }\r\n        return newRanges;\r\n    }\r\n\r\n    /** Build template data for target distances and resulting range modifiers\r\n     *\r\n     * It is mandatory for an actor to have token placed,\r\n     * so distance measurements can be taken.\r\n     *\r\n     */\r\n    static _getTargetRangeTemplateData(actor: SR5Actor, ranges) {\r\n        const attacker = actor.getToken();\r\n\r\n        if (!attacker || !Helpers.userHasTargets()) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.TargetingNeedsActorWithToken'));\r\n            return [];\r\n        }\r\n\r\n        const targets = Helpers.getUserTargets();\r\n\r\n        const targetsTemplateData = targets.map(target => {\r\n            //@ts-ignore // undefined actor is okay\r\n            const distance = Helpers.measureTokenDistance(attacker, target);\r\n            const range = Helpers.getWeaponRange(distance, ranges);\r\n            return {\r\n                id: target.id,\r\n                name: target.name,\r\n                range: range,\r\n                unit: LENGTH_UNIT,\r\n                distance\r\n            };\r\n        });\r\n\r\n        //@ts-ignore\r\n        return targetsTemplateData.sort((a, b) => {\r\n            if (a.distance < b.distance) return -1;\r\n            if (a.distance > b.distance) return 1;\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    static _getSelectedTargetRangeModifier(html: JQuery): object {\r\n        const selectElement = $(html).find('[name=\"selected-target\"]');\r\n        const range = Helpers.parseInputToNumber(selectElement.find(':selected').data('range-modifier'));\r\n\r\n        return {\r\n            environmental: {range}\r\n        };\r\n    }\r\n\r\n    static _getSelectedTargetTokenId(html: JQuery) {\r\n        const selectElement = $(html).find('[name=\"selected-target\"]');\r\n        const targetId = selectElement.val() as string;\r\n        return {targetId};\r\n    }\r\n\r\n    static _getSelectedRangeModifier(html: JQuery): object {\r\n        const range = Helpers.parseInputToNumber($(html).find('[name=\"range\"]').val());\r\n\r\n        return {environmental: {range}}\r\n    }\r\n\r\n    static _getSelectedFireMode(html: JQuery, fireModes): object {\r\n        const fireModeValue = Helpers.parseInputToNumber($(html).find('[name=\"fireMode\"]').val());\r\n        if (fireModeValue) {\r\n            const fireModeString = fireModes[fireModeValue];\r\n            const defenseModifier = Helpers.mapRoundsToDefenseDesc(fireModeValue);\r\n\r\n            const fireMode: FireModeData = {\r\n                label: fireModeString,\r\n                value: fireModeValue,\r\n                defense: defenseModifier,\r\n            };\r\n\r\n            return {fireMode};\r\n        }\r\n\r\n        return {};\r\n    }\r\n}\r\n","import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport {RollDialogOptions} from \"../../rolls/ShadowrunRoller\";\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SYSTEM_NAME} from \"../../constants\";\r\nimport {Helpers} from \"../../helpers\";\r\nimport ModList = Shadowrun.ModList;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport LabelField = Shadowrun.LabelField;\r\n\r\ninterface AdvancedTestRollOptions {\r\n    title?: string;\r\n    dialogOptions?: RollDialogOptions;\r\n    extended?: boolean;\r\n    limit?: BaseValuePair<number> & LabelField;\r\n    wounds?: boolean;\r\n}\r\n\r\nexport class ShadowrunTestDialog {\r\n    static async create(actor: SR5Actor|undefined, options: AdvancedTestRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\r\n        const testDialogData = ShadowrunTestDialog.getAdvancedTestData(actor, options, partsProps);\r\n\r\n        return new FormDialog(testDialogData);\r\n    }\r\n\r\n    static getAdvancedTestData(actor, options: AdvancedTestRollOptions, partsProps: ModList<number>): FormDialogData {\r\n        const title = options.title;\r\n        const parts = new PartsList(partsProps);\r\n\r\n        const templateData = {\r\n            options: options.dialogOptions,\r\n            extended: options.extended,\r\n            pool: parts.total,\r\n            parts: parts.getMessageOutput(),\r\n            limitValue: options.limit?.value,\r\n            wounds: options.wounds,\r\n            woundValue: actor?.getWoundModifier(),\r\n            rollMode: game.settings.get(CORE_NAME, CORE_FLAGS.RollMode),\r\n            rollModes: CONFIG.Dice.rollModes\r\n        }\r\n\r\n        let templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-dialog.html';\r\n\r\n        const rollButtonName = 'roll'\r\n        const buttons = {\r\n            [rollButtonName]: {\r\n                label: game.i18n.localize('SR5.Roll'),\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => {\r\n                },\r\n            },\r\n        };\r\n        if (actor) {\r\n            buttons['edge'] = {\r\n                label: `${game.i18n.localize('SR5.PushTheLimit')} (+${actor.getEdge().value})`,\r\n                icon: '<i class=\"fas fa-bomb\"></i>',\r\n                callback: () => {\r\n                },\r\n            };\r\n        }\r\n\r\n        const onAfterClose = async (html: JQuery) => {\r\n            const dicePoolValue = Helpers.parseInputToNumber($(html).find('[name=\"pool\"]').val());\r\n\r\n            if (options.dialogOptions?.pool) {\r\n                parts.clear();\r\n                await game.user.setFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue, dicePoolValue);\r\n                parts.addUniquePart('SR5.Base', dicePoolValue);\r\n            }\r\n\r\n            const limitValue = Helpers.parseInputToNumber($(html).find('[name=\"limitValue\"]').val());\r\n\r\n            const {limit} = options;\r\n            if (limit && limit.value !== limitValue) {\r\n                limit.value = limitValue;\r\n                limit.base = limitValue;\r\n                limit.label = 'SR5.Override';\r\n            }\r\n\r\n            const woundValue = Helpers.parseInputToNumber($(html).find('[name=\"wounds\"]').val());\r\n            const situationMod = Helpers.parseInputToNumber($(html).find('[name=\"dp_mod\"]').val());\r\n            const environmentMod = Helpers.parseInputToNumber($(html).find('[name=\"options.environmental\"]').val());\r\n\r\n            let {wounds} = options;\r\n            if (wounds && woundValue !== 0) {\r\n                parts.addUniquePart('SR5.Wounds', woundValue);\r\n                wounds = true;\r\n            }\r\n            if (situationMod) {\r\n                parts.addUniquePart('SR5.SituationalModifier', situationMod);\r\n            }\r\n            if (environmentMod) {\r\n                parts.addUniquePart('SR5.EnvironmentModifier', environmentMod);\r\n            }\r\n\r\n            const extendedString = Helpers.parseInputToString($(html).find('[name=\"extended\"]').val());\r\n            const extended = extendedString === 'true';\r\n\r\n            const rollMode = Helpers.parseInputToString($(html).find('[name=rollMode]').val());\r\n\r\n            return {\r\n                limit,\r\n                wounds,\r\n                parts,\r\n                extended,\r\n                rollMode\r\n            }\r\n        };\r\n\r\n        return {\r\n            title,\r\n            templateData,\r\n            templatePath,\r\n            buttons,\r\n            default: rollButtonName,\r\n            onAfterClose\r\n        }\r\n    }\r\n}","/**\r\n * A GM-Tool to keep track of all players overwatch scores\r\n */\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class OverwatchScoreTracker extends Application {\r\n    static MatrixOverwatchDiceCount = '2d6';\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'overwatch-score-tracker';\r\n        options.classes = ['sr5'];\r\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\r\n        options.width = 450;\r\n        options.height = 'auto';\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    static addedActors = [];\r\n\r\n    getData() {\r\n        // get list of actors that belong to users\r\n        const actors = game.users.reduce((acc, user) => {\r\n            if (!user.isGM && user.character) {\r\n                acc.push(user.character.data);\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n        OverwatchScoreTracker.addedActors.forEach((id) => {\r\n            const actor = game.actors.find((a) => a._id === id);\r\n            if (actor) {\r\n                actors.push(actor.data);\r\n            }\r\n        });\r\n\r\n        return {\r\n            actors,\r\n        };\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-roll-15-minutes').on('click', this._rollFor15Minutes.bind(this));\r\n        html.find('.overwatch-score-add-actor').on('click', this._onAddActor.bind(this));\r\n    }\r\n\r\n    // returns the actor that this event is acting on\r\n    _getActorFromEvent(event) {\r\n        const id = event.currentTarget.closest('.list-item').dataset.actorId;\r\n        if (id) return game.actors.find((a) => a._id === id);\r\n    }\r\n\r\n    _onAddActor(event) {\r\n        event.preventDefault();\r\n        const tokens = Helpers.getControlledTokens();\r\n        if (tokens.length === 0) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.OverwatchScoreTracker.NotifyNoSelectedTokens'));\r\n            return;\r\n        }\r\n        tokens.forEach((token) => {\r\n            const actorId = token.data.actorId;\r\n            OverwatchScoreTracker.addedActors.push(actorId);\r\n            this.render();\r\n        });\r\n    }\r\n\r\n    _setOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = event.currentTarget.value;\r\n        if (amount && actor) {\r\n            actor.setOverwatchScore(amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _addOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = parseInt(event.currentTarget.dataset.amount);\r\n        if (amount && actor) {\r\n            const os = actor.getOverwatchScore();\r\n            actor.setOverwatchScore(os + amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _resetOverwatchScore(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            actor.setOverwatchScore(0).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _rollFor15Minutes(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            //  use static value so it can be modified in modules\r\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\r\n            roll.roll();\r\n\r\n            // use GM Roll Mode so players don't see\r\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\r\n            // roll.toMessage({ rollMode });\r\n\r\n            if (roll.total) {\r\n                const os = actor.getOverwatchScore();\r\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LanguageSkillEditForm } from './LanguageSkillEditForm';\r\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\r\n\r\nexport class KnowledgeSkillEditForm extends LanguageSkillEditForm {\r\n    category: KnowledgeSkillCategory;\r\n    constructor(actor, options, skillId, category) {\r\n        super(actor, options, skillId);\r\n        this.category = category;\r\n    }\r\n    _updateString() {\r\n        return `data.skills.knowledge.${this.category}.value.${this.skillId}`;\r\n    }\r\n}\r\n","import { SkillEditForm } from './SkillEditForm';\r\n\r\nexport class LanguageSkillEditForm extends SkillEditForm {\r\n    _updateString() {\r\n        return `data.skills.language.value.${this.skillId}`;\r\n    }\r\n\r\n    getData() {\r\n        return mergeObject(super.getData(), {\r\n            editable_name: true,\r\n        });\r\n    }\r\n\r\n    /** @override */\r\n    _onUpdateObject(event, formData, updateData) {\r\n        super._onUpdateObject(event, formData, updateData);\r\n        const name = formData['data.name'];\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            name,\r\n        };\r\n    }\r\n}\r\n","import SkillEditFormData = Shadowrun.SkillEditFormData;\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\n\r\nexport class SkillEditForm extends BaseEntitySheet {\r\n    skillId: string;\r\n\r\n    get entity(): SR5Actor {\r\n        //@ts-ignore\r\n        return super.entity;\r\n    }\r\n\r\n    constructor(actor, options, skillId) {\r\n        super(actor, options);\r\n        this.skillId = skillId;\r\n    }\r\n\r\n    _updateString() {\r\n        return `data.skills.active.${this.skillId}`;\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        return mergeObject(options, {\r\n            id: 'skill-editor',\r\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\r\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\r\n            width: 300,\r\n            submitOnClose: true,\r\n            submitOnChange: true,\r\n            closeOnSubmit: false,\r\n            resizable: true,\r\n        });\r\n    }\r\n\r\n    get title(): string {\r\n        const label = this.entity.getSkillLabel(this.skillId);\r\n        return `${game.i18n.localize('SR5.EditSkill')} - ${game.i18n.localize(label)}`;\r\n    }\r\n\r\n    _onUpdateObject(event, formData, updateData) {\r\n        // get base value\r\n        const base = formData['data.base'];\r\n\r\n        // process specializations\r\n        const specsRegex = /data\\.specs\\.(\\d+)/;\r\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\r\n            const found = key.match(specsRegex);\r\n            if (found && found[0]) {\r\n                running.push(val);\r\n            }\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        // process bonuses\r\n        const bonusKeyRegex = /data\\.bonus\\.(\\d+).key/;\r\n        const bonusValueRegex = /data\\.bonus\\.(\\d+).value/;\r\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\r\n            const foundKey = key.match(bonusKeyRegex);\r\n            const foundVal = key.match(bonusValueRegex);\r\n            if (foundKey && foundKey[0] && foundKey[1]) {\r\n                const index = foundKey[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].key = value;\r\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\r\n                const index = foundVal[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].value = value;\r\n            }\r\n\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            base,\r\n            specs,\r\n            bonus,\r\n        };\r\n    }\r\n\r\n    /** @override */\r\n    async _updateObject(event, formData) {\r\n        const updateData = {};\r\n        this._onUpdateObject(event, formData, updateData);\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\r\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\r\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\r\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\r\n    }\r\n\r\n    async _addNewBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (!data) return;\r\n        const { bonus = [] } = data;\r\n        // add blank line for new bonus\r\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.bonus) {\r\n            const { bonus } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                bonus.splice(index, 1);\r\n                updateData[`${this._updateString()}.bonus`] = bonus;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _addNewSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            // add a blank line to specs\r\n            const { specs } = data;\r\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\r\n        }\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            const { specs } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                specs.splice(index, 1);\r\n                updateData[`${this._updateString()}.specs`] = specs;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    getData(): SkillEditFormData {\r\n        const data = super.getData();\r\n        const actor = data.entity;\r\n        data['data'] = actor ? getProperty(actor, this._updateString()) : {};\r\n        return data;\r\n    }\r\n}\r\n","// directly pulled from DND5e, just changed the\r\nexport const measureDistance = function (segments, options = {}) {\r\n    //@ts-ignore\r\n    // basegrid isn't typed, options aren't really important\r\n    if (!options.gridSpaces) return BaseGrid.prototype.measureDistances.call(this, segments, options);\r\n\r\n    // Track the total number of diagonals\r\n    let nDiagonal = 0;\r\n    const rule = this.parent.diagonalRule;\r\n    const d = canvas.dimensions;\r\n\r\n    // Iterate over measured segments\r\n    return segments.map((s) => {\r\n        let r = s.ray;\r\n\r\n        // Determine the total distance traveled\r\n        let nx = Math.abs(Math.ceil(r.dx / d.size));\r\n        let ny = Math.abs(Math.ceil(r.dy / d.size));\r\n\r\n        // Determine the number of straight and diagonal moves\r\n        let nd = Math.min(nx, ny);\r\n        let ns = Math.abs(ny - nx);\r\n        nDiagonal += nd;\r\n\r\n        // Common houserule variant\r\n        if (rule === '1-2-1') {\r\n            let nd10 = Math.floor(nDiagonal / 2) - Math.floor((nDiagonal - nd) / 2);\r\n            let spaces = nd10 * 2 + (nd - nd10) + ns;\r\n            return spaces * canvas.dimensions.distance;\r\n        }\r\n\r\n        // Euclidean Measurement\r\n        else if (rule === 'EUCL') {\r\n            return Math.round(Math.hypot(nx, ny) * canvas.scene.data.gridDistance);\r\n        }\r\n\r\n        // diag and straight are same space count\r\n        else return (ns + nd) * canvas.scene.data.gridDistance;\r\n    });\r\n};\r\n","import { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport Template from './template';\r\nimport AttackData = Shadowrun.AttackData;\r\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SYSTEM_NAME} from './constants';\r\nimport {ShadowrunRoll, Test} from \"./rolls/ShadowrunRoller\";\r\nimport DrainData = Shadowrun.DrainData;\r\nimport {Helpers} from \"./helpers\";\r\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\r\nimport {DamageApplicationDialog} from \"./apps/dialogs/DamageApplicationDialog\";\r\nimport DamageType = Shadowrun.DamageType;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport CombatData = Shadowrun.CombatData;\r\n\r\nexport interface RollTargetChatMessage {\r\n    actor: SR5Actor\r\n    target?: Token|undefined\r\n    targets?: Token[]\r\n    item: SR5Item\r\n    tests: Test[]\r\n    roll: ShadowrunRoll\r\n    attack?: AttackData\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes\r\n}\r\n\r\nexport interface TargetChatMessageOptions extends RollTargetChatMessage{\r\n    whisperTo: User\r\n}\r\n\r\n// Simple card text messages\r\nexport interface ItemChatMessageOptions {\r\n    actor: SR5Actor\r\n    item: SR5Item\r\n    description: object\r\n    tests?: Test[]\r\n}\r\n\r\nexport interface RollChatMessageOptions {\r\n    title: string\r\n    roll: ShadowrunRoll\r\n    actor?: SR5Actor\r\n    target?: Token\r\n    targets?: Token[]\r\n\r\n    item?: SR5Item\r\n\r\n    description?: object\r\n\r\n    rollMode?: keyof typeof CONFIG.dice.rollModes\r\n    previewTemplate?: boolean\r\n\r\n    attack?: AttackData\r\n    incomingAttack?: AttackData\r\n    incomingDrain?: DrainData\r\n    damage?: ModifiedDamageData\r\n    tests?: Test[]\r\n    combat?: CombatData\r\n    reach?: number\r\n}\r\n\r\ninterface ItemChatTemplateData {\r\n    title: string\r\n    actor: SR5Actor\r\n    tokenId?: string\r\n    item: SR5Item\r\n    description: object\r\n    tests?: Test[]\r\n}\r\n\r\ninterface RollChatTemplateData extends RollChatMessageOptions {\r\n    tokenId?: string\r\n    targetTokenId?: string\r\n    rollMode: keyof typeof CONFIG.dice.rollModes\r\n}\r\n\r\nasync function createChatMessage(templateData, options?: ChatDataOptions): Promise<Entity<any>> {\r\n    const chatData = await createChatData(templateData, options);\r\n    const message = await ChatMessage.create(chatData);\r\n\r\n    // Store data in chat message for later use (opposed tests)\r\n    if (templateData.roll) await message.setFlag(SYSTEM_NAME, FLAGS.Roll, templateData.roll);\r\n    if (templateData.attack) await message.setFlag(SYSTEM_NAME, FLAGS.Attack, templateData.attack);\r\n    // Convert targets into scene token ids.\r\n    if (templateData.targets) await message.setFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds, templateData.targets.map(target => getTokenSceneId(target)));\r\n\r\n    console.log('Chat Message', message, chatData);\r\n    return message;\r\n}\r\n\r\ninterface ChatDataOptions {\r\n    roll?: ShadowrunRoll,\r\n    whisperTo?: User\r\n}\r\n// templateData has no datatype to pipe through whatever it's given.\r\n// Clean up your data within templateData creation functions!\r\nconst createChatData = async (templateData, options?: ChatDataOptions) => {\r\n    const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\r\n    const actor = templateData.actor;\r\n    const token = actor?.getToken();\r\n\r\n    //@ts-ignore\r\n    const enhancedTemplateData = {\r\n        ...templateData,\r\n        speaker: {\r\n            actor, token\r\n        },\r\n        showGlitchAnimation: game.settings.get(SYSTEM_NAME, FLAGS.ShowGlitchAnimation),\r\n    };\r\n    const html = await renderTemplate(template, enhancedTemplateData);\r\n\r\n    const chatData = {\r\n        user: game.user._id,\r\n        type: options?.roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n        sound: options?.roll ? CONFIG.sounds.dice : undefined,\r\n        content: html,\r\n        roll: options?.roll ? JSON.stringify(options?.roll) : undefined,\r\n        speaker: {\r\n            actor: actor?._id,\r\n            token: actor?.getToken(),\r\n            alias: game.user.name\r\n        },\r\n        flags: {\r\n            shadowrun5e: {\r\n                customRoll: true,\r\n            },\r\n        }\r\n    };\r\n\r\n    const rollMode = templateData.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\r\n\r\n    if (['gmroll', 'blindroll'].includes(rollMode as string)) chatData['whisper'] = ChatMessage.getWhisperRecipients('GM');\r\n    if (rollMode === 'blindroll') chatData['blind'] = true;\r\n\r\n    if (options?.whisperTo) {\r\n        chatData['whisper'] = ChatMessage.getWhisperRecipients(options.whisperTo.name);\r\n    }\r\n\r\n    return chatData;\r\n};\r\n\r\n\r\nexport async function ifConfiguredCreateDefaultChatMessage({roll, actor, title, rollMode}: Partial<RollChatMessageOptions>) {\r\n    if (game.settings.get(SYSTEM_NAME, FLAGS.DisplayDefaultRollCard) && roll) {\r\n        await roll.toMessage({\r\n            speaker: ChatMessage.getSpeaker({ actor: actor }),\r\n            flavor: title,\r\n            rollMode: rollMode,\r\n        });\r\n    }\r\n}\r\n\r\nexport async function createTargetChatMessage(options: TargetChatMessageOptions) {\r\n    const rollChatOptions = {...options};\r\n    const messageOptions = {whisperTo: options.whisperTo};\r\n    //@ts-ignore\r\n    const templateData = getRollChatTemplateData(rollChatOptions);\r\n    return await createChatMessage(templateData, messageOptions);\r\n}\r\n\r\nexport async function createItemChatMessage(options: ItemChatMessageOptions) {\r\n    const templateData = createChatTemplateData(options);\r\n    return await createChatMessage(templateData);\r\n}\r\n\r\nfunction createChatTemplateData(options: ItemChatMessageOptions): ItemChatTemplateData {\r\n    // field extraction is explicit to enforce visible data flow to ensure clean data.\r\n    // NOTE: As soon as clear data dynamic data flow can be established, this should be removed for a simple {...options}\r\n    let {actor, item, description, tests} = options;\r\n\r\n    const token = actor?.getToken();\r\n    const tokenId = getTokenSceneId(token);\r\n    const title = game.i18n.localize(\"SR5.Description\");\r\n\r\n    return {\r\n        title,\r\n        actor,\r\n        tokenId,\r\n        item,\r\n        description,\r\n        tests\r\n    }\r\n}\r\n\r\nexport async function createRollChatMessage(options: RollChatMessageOptions): Promise<Entity<any>> {\r\n    await ifConfiguredCreateDefaultChatMessage(options);\r\n\r\n    const templateData = getRollChatTemplateData(options);\r\n    const chatOptions = {roll: options.roll};\r\n    const message = await createChatMessage(templateData, chatOptions);\r\n\r\n    return message;\r\n}\r\n\r\n\r\nfunction getRollChatTemplateData(options: RollChatMessageOptions): RollChatTemplateData {\r\n    const token = options.actor?.getToken();\r\n\r\n    const rollMode = options.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\r\n    const tokenId = getTokenSceneId(token);\r\n\r\n    const targetTokenId = getTokenSceneId(options.target);\r\n\r\n    return {\r\n       ...options,\r\n        tokenId,\r\n        targetTokenId,\r\n        rollMode,\r\n    }\r\n}\r\n\r\nfunction getTokenSceneId(token: Token|undefined): string|undefined {\r\n    return token ? `${token.scene._id}.${token.id}` : undefined;\r\n}\r\n\r\nexport const addChatMessageContextOptions = (html, options) => {\r\n    const canRoll = (li) => {\r\n        const msg = game.messages.get(li.data().messageId);\r\n\r\n        return msg.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll);\r\n    };\r\n\r\n    options.push(\r\n        {\r\n            name: game.i18n.localize('SR5.PushTheLimit'),\r\n            callback: (li) => SR5Actor.pushTheLimit(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-meteor\"></i>',\r\n        },\r\n        {\r\n            name: game.i18n.localize('SR5.SecondChange'),\r\n            callback: (li) => SR5Actor.secondChance(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-dice-d6\"></i>',\r\n        }\r\n    );\r\n    return options;\r\n};\r\n\r\nexport const addRollListeners = (app: ChatMessage, html) => {\r\n    if (!app.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) {\r\n        return\r\n    }\r\n\r\n    html.on('click', '.test', async (event) => {\r\n        event.preventDefault();\r\n        const messageId = html.data('messageId');\r\n        const message = game.messages.get(messageId);\r\n        const attack = message.getFlag(SYSTEM_NAME, FLAGS.Attack);\r\n        const item = SR5Item.getItemFromMessage(html);\r\n\r\n        const type = event.currentTarget.dataset.action;\r\n        if (!item) {\r\n            ui.notifications.error(game.i18n.localize('SR5.MissingItemForOpposedTest'));\r\n            return;\r\n        }\r\n\r\n        // Selection will overwrite chat specific targeting\r\n        const actors = Helpers.getSelectedActorsOrCharacter();\r\n\r\n        // No selection, fall back to targeting.\r\n        if (actors.length === 0) {\r\n            const targetSceneIds = message.getFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds);\r\n\r\n            for (const targetSceneId of targetSceneIds) {\r\n                const token = Helpers.getSceneToken(targetSceneId);\r\n                if (!token) continue;\r\n\r\n                const actor = token.actor as SR5Actor;\r\n                if (!actor) continue;\r\n\r\n                actors.push(actor);\r\n            }\r\n        }\r\n\r\n        if (!actors) return;\r\n\r\n        console.error(actors);\r\n        for (const actor of actors) {\r\n            await item.rollTestType(type, attack, event, actor);\r\n        }\r\n    });\r\n    html.on('click', '.place-template', (event) => {\r\n        event.preventDefault();\r\n        const item = SR5Item.getItemFromMessage(html);\r\n\r\n        if (item) {\r\n            const template = Template.fromItem(item);\r\n            template?.drawPreview();\r\n        }\r\n    });\r\n\r\n    html.on('click', '.card-main-content', event => {\r\n        event.preventDefault();\r\n        // NOTE: This depends on the exact card template HTML structure.\r\n        const card = $(event.currentTarget).closest('.chat-card');\r\n        card.children('.dice-rolls').toggle();\r\n        card.children('.card-description').toggle();\r\n    });\r\n\r\n\r\n    /** Open the sheets of different entity types based on the chat card.\r\n     */\r\n    html.on('click', '.chat-entity-link', event => {\r\n        event.preventDefault();\r\n\r\n        const entityLink = $(event.currentTarget);\r\n        const id = entityLink.data('id');\r\n        const type = entityLink.data('entity');\r\n\r\n        if (!id) return;\r\n\r\n       if (type === 'Token') {\r\n           const token = canvas.tokens.get(id);\r\n           token.actor.sheet.render(true, {token});\r\n       }\r\n       else if (type === 'Actor') {\r\n           const actor = game.actors.get(id);\r\n           actor.sheet.render(true);\r\n       }\r\n       else if (type === 'Item') {\r\n           const card = entityLink.closest('.chat-card');\r\n           const sceneTokenId = card.data('tokenId');\r\n\r\n           const token = Helpers.getSceneToken(sceneTokenId)\r\n\r\n           if (!token) return;\r\n\r\n           const item = token.actor.getOwnedItem(id);\r\n           if (item) item.sheet.render(true);\r\n       }\r\n    });\r\n\r\n    /** Select a Token on the current scene based on the link id.\r\n     */\r\n    html.on('click', '.chat-select-link', event => {\r\n        event.preventDefault();\r\n\r\n        const selectLink = $(event.currentTarget);\r\n        const tokenId = selectLink.data('tokenId');\r\n        const token = canvas.tokens.get(tokenId);\r\n\r\n        if (token) {\r\n            token.control();\r\n        } else {\r\n            ui.notifications.warn(game.i18n.localize('SR5.NoSelectableToken'))\r\n        }\r\n    });\r\n\r\n    /** Apply damage to the actor speaking the chat card.\r\n     */\r\n    html.on('click', '.apply-damage', async event => {\r\n        event.stopPropagation();\r\n        const applyDamage = $(event.currentTarget);\r\n\r\n        const value = Number(applyDamage.data('damageValue'));\r\n        const type = String(applyDamage.data('damageType')) as DamageType;\r\n        const ap = Number(applyDamage.data('damageAp'));\r\n        const element = String(applyDamage.data('damageElement')) as DamageElement;\r\n        let damage = Helpers.createDamageData(value, type, ap, element);\r\n\r\n        let actors = Helpers.getSelectedActorsOrCharacter();\r\n\r\n        // Should no selection be available try guessing.\r\n        if (actors.length === 0) {\r\n            const messageId = html.data('messageId');\r\n            const message = game.messages.get(messageId);\r\n            const targetIds = message.getFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds);\r\n\r\n            // If targeting is available, use that.\r\n            if (targetIds) {\r\n                targetIds.forEach(targetId => {\r\n                    const token = Helpers.getSceneToken(targetId);\r\n                    const actor = token?.actor as SR5Actor;\r\n                    if (!actor) return;\r\n                    actors.push(actor);\r\n                });\r\n\r\n            // Otherwise apply to the actor casting the damage.\r\n            } else {\r\n                const sceneTokenId = html.find('.chat-card').data('tokenId');\r\n                const token = Helpers.getSceneToken(sceneTokenId);\r\n                const actor = token?.actor as SR5Actor;\r\n                if (actor) {\r\n                    actors.push(actor);\r\n                }\r\n            }\r\n\r\n            if (actors.length === 0) {\r\n                ui.notifications.warn(game.i18n.localize(\"SR5.Warnings.TokenSelectionNeeded\"));\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Show user the token selection and resulting damage values\r\n        const damageApplicationDialog = await new DamageApplicationDialog(actors, damage);\r\n        const actorDamages = await damageApplicationDialog.select();\r\n\r\n        if (damageApplicationDialog.canceled) return;\r\n\r\n        // Apply the actual damage values. applyDamage will, again, calculate armor damage modification.\r\n        actorDamages.forEach(({actor, modified}) => {\r\n            if (damageApplicationDialog.selectedButton === 'damage') {\r\n                actor.applyDamage(modified);\r\n            } else if (damageApplicationDialog.selectedButton === 'unmodifiedDamage') {\r\n                actor.applyDamage(damage);\r\n            } else {\r\n                console.error('Expected a dialog selection, but none known selection was made');\r\n            }\r\n        });\r\n    });\r\n};","import SR5CombatData = Shadowrun.SR5CombatData;\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\n\r\nexport class SR5Combat extends Combat {\r\n    get initiativePass(): number {\r\n        return this.data?.initiativePass || 0;\r\n    }\r\n\r\n    constructor(...args) {\r\n        // @ts-ignore\r\n        super(...args);\r\n\r\n        Hooks.on('updateActor', (actor) => {\r\n            const combatant = this.getActorCombatant(actor);\r\n            if (combatant) {\r\n                // TODO handle monitoring Wound changes\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Use the given actors token to get the combatant.\r\n     * NOTE: The token must be used, instead of just the actor, as unlinked tokens will all use the same actor id.\r\n     */\r\n    getActorCombatant(actor: SR5Actor): undefined | any {\r\n        const token = actor.getToken();\r\n        // Sidebar actors won't have a token to connect a combatant to.\r\n        if (!token) return;\r\n        return this.getCombatantByToken(token.id);\r\n    }\r\n\r\n    /**\r\n     * Add ContextMenu options to CombatTracker Entries -- adds the basic Initiative Subtractions\r\n     * @param html\r\n     * @param options\r\n     */\r\n    static addCombatTrackerContextOptions(html, options: any[]) {\r\n        options.push(\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByOne'),\r\n                icon: '<i class=\"fas fa-caret-down\"></i>',\r\n                callback: async (li) => {\r\n                    // @ts-ignore\r\n                    const combatant = await game.combat.getCombatant(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -1);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByFive'),\r\n                icon: '<i class=\"fas fa-angle-down\"></i>',\r\n                callback: async (li) => {\r\n                    // @ts-ignore\r\n                    const combatant = await game.combat.getCombatant(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -5);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByTen'),\r\n                icon: '<i class=\"fas fa-angle-double-down\"></i>',\r\n                callback: async (li) => {\r\n                    // @ts-ignore\r\n                    const combatant = await game.combat.getCombatant(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -10);\r\n                    }\r\n                },\r\n            },\r\n        );\r\n        return options;\r\n    }\r\n\r\n    data: SR5CombatData;\r\n\r\n    protected _onUpdate(data: object, ...args) {\r\n        console.log(data);\r\n        // @ts-ignore\r\n        super._onUpdate(data, ...args);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param combatant\r\n     * @param adjustment\r\n     */\r\n    async adjustInitiative(combatant: string | any, adjustment: number): Promise<void> {\r\n        combatant = typeof combatant === 'string' ? this.combatants.find((c) => c._id === combatant) : combatant;\r\n        if (!combatant || typeof combatant === 'string') {\r\n            console.error('Could not find combatant with id ', combatant);\r\n            return;\r\n        }\r\n        const newCombatant = {\r\n            _id: combatant._id,\r\n            initiative: Number(combatant.initiative) + adjustment,\r\n        };\r\n        // @ts-ignore\r\n        await this.updateCombatant(newCombatant);\r\n    }\r\n\r\n    static sortByRERIC(left, right): number {\r\n        // First sort by initiative value if different\r\n        const leftInit = Number(left.initiative);\r\n        const rightInit = Number(right.initiative);\r\n        if (isNaN(leftInit)) return 1;\r\n        if (isNaN(rightInit)) return -1;\r\n        if (leftInit > rightInit) return -1;\r\n        if (leftInit < rightInit) return 1;\r\n\r\n        // now we sort by ERIC\r\n        const genData = (actor) => {\r\n            // edge, reaction, intuition, coinflip\r\n            return [\r\n                Number(actor.getEdge().max),\r\n                Number(actor.findAttribute('reaction')?.value),\r\n                Number(actor.findAttribute('intuition')?.value),\r\n                new Roll('1d2').roll().total,\r\n            ];\r\n        };\r\n\r\n        const leftData = genData(left.actor);\r\n        const rightData = genData(right.actor);\r\n        // if we find a difference that isn't 0, return it\r\n        for (let index = 0; index < leftData.length; index++) {\r\n            const diff = rightData[index] - leftData[index];\r\n            if (diff !== 0) return diff;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @Override\r\n     * remove any turns that are less than 0\r\n     * filter using ERIC\r\n     */\r\n    setupTurns(): any[] {\r\n        const turns = super.setupTurns().filter((turn) => {\r\n            if (turn.initiative === null) return true;\r\n\r\n            const init = Number(turn.initiative);\r\n            if (isNaN(init)) return true;\r\n            return init > 0;\r\n        });\r\n        // @ts-ignore\r\n        this.turns = turns.sort(SR5Combat.sortByRERIC);\r\n        return turns;\r\n    }\r\n\r\n    /**\r\n     * @Override\r\n     * proceed to the next turn\r\n     * - handles going to next initiative pass or combat round.\r\n     */\r\n    async nextTurn(): Promise<void> {\r\n        let turn = this.turn;\r\n        let skip = this.settings.skipDefeated;\r\n        // Determine the next turn number\r\n        let next: number | null = null;\r\n        if (skip) {\r\n            for (let [i, t] of this.turns.entries()) {\r\n                if (i <= turn) continue;\r\n                // @ts-ignore\r\n                if (!t.defeated) {\r\n                    next = i;\r\n                    break;\r\n                }\r\n            }\r\n        } else next = turn + 1;\r\n\r\n        // Maybe advance to the next round/init pass\r\n        let round = this.round;\r\n        let initPass = this.initiativePass;\r\n\r\n        // if both are 0, we just started so set both to 1\r\n        if (round === 0 && initPass === 0) {\r\n            initPass = initPass + 1;\r\n            round = round + 1;\r\n            next = 0;\r\n        } else if (next === null || next >= this.turns.length) {\r\n            const combatants: any[] = [];\r\n\r\n            // check for initpass\r\n            const over10Init = this.combatants.reduce((accumulator, running) => {\r\n                return accumulator || Number(running.initiative) > 10;\r\n            }, false);\r\n\r\n            // do an initiative pass\r\n            if (over10Init) {\r\n                next = 0;\r\n                initPass = initPass + 1;\r\n                // adjust combatants\r\n                for (const c of this.combatants) {\r\n                    let init = Number(c.initiative);\r\n                    init -= 10;\r\n                    // @ts-ignore\r\n                    combatants.push({ _id: c._id, initiative: init });\r\n                }\r\n            } else {\r\n                next = 0;\r\n                round = round + 1;\r\n                initPass = 0;\r\n                // resetall isn't typed\r\n                // @ts-ignore\r\n                await this.resetAll();\r\n                await this.rollAll();\r\n            }\r\n\r\n            if (combatants.length > 0) {\r\n                // @ts-ignore\r\n                await this.updateCombatant(combatants);\r\n            }\r\n\r\n            if (skip) {\r\n                // @ts-ignore\r\n                next = this.turns.findIndex((t) => !t.defeated);\r\n                if (next === -1) {\r\n                    // @ts-ignore\r\n                    ui.notifications.warn(game.i18n.localize('COMBAT.NoneRemaining'));\r\n                    next = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update the encounter\r\n        await this.update({ round: round, turn: next, initiativePass: initPass });\r\n    }\r\n}\r\n","export const SR5 = {\r\n    itemTypes: {\r\n        action: 'SR5.ItemTypes.Action',\r\n        adept_power: 'SR5.ItemTypes.AdeptPower',\r\n        ammo: 'SR5.ItemTypes.Ammo',\r\n        armor: 'SR5.ItemTypes.Armor',\r\n        complex_form: 'SR5.ItemTypes.ComplexForm',\r\n        contact: 'SR5.ItemTypes.Contact',\r\n        critter_power: 'SR5.ItemTypes.CritterPower',\r\n        cyberware: 'SR5.ItemTypes.Cyberware',\r\n        bioware: 'SR5.ItemTypes.Bioware',\r\n        device: 'SR5.ItemTypes.Device',\r\n        equipment: 'SR5.ItemTypes.Equipment',\r\n        lifestyle: 'SR5.ItemTypes.Lifestyle',\r\n        modification: 'SR5.ItemTypes.Modification',\r\n        quality: 'SR5.ItemTypes.Quality',\r\n        sin: 'SR5.ItemTypes.Sin',\r\n        spell: 'SR5.ItemTypes.Spell',\r\n        weapon: 'SR5.ItemTypes.Weapon',\r\n    },\r\n\r\n    attributes: {\r\n        body: 'SR5.AttrBody',\r\n        agility: 'SR5.AttrAgility',\r\n        reaction: 'SR5.AttrReaction',\r\n        strength: 'SR5.AttrStrength',\r\n        willpower: 'SR5.AttrWillpower',\r\n        logic: 'SR5.AttrLogic',\r\n        intuition: 'SR5.AttrIntuition',\r\n        charisma: 'SR5.AttrCharisma',\r\n        magic: 'SR5.AttrMagic',\r\n        resonance: 'SR5.AttrResonance',\r\n        edge: 'SR5.AttrEdge',\r\n        essence: 'SR5.AttrEssence',\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n    },\r\n\r\n    limits: {\r\n        physical: 'SR5.LimitPhysical',\r\n        social: 'SR5.LimitSocial',\r\n        mental: 'SR5.LimitMental',\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n    },\r\n\r\n    specialTypes: {\r\n        mundane: 'SR5.Mundane',\r\n        magic: 'SR5.Awakened',\r\n        resonance: 'SR5.Emerged',\r\n    },\r\n\r\n    damageTypes: {\r\n        physical: 'SR5.DmgTypePhysical',\r\n        stun: 'SR5.DmgTypeStun',\r\n        matrix: 'SR5.DmgTypeMatrix',\r\n    },\r\n\r\n    elementTypes: {\r\n        fire: 'SR5.ElementFire',\r\n        cold: 'SR5.ElementCold',\r\n        acid: 'SR5.ElementAcid',\r\n        electricity: 'SR5.ElementElectricity',\r\n        radiation: 'SR5.ElementRadiation',\r\n    },\r\n\r\n    spellCategories: {\r\n        combat: 'SR5.SpellCatCombat',\r\n        detection: 'SR5.SpellCatDetection',\r\n        health: 'SR5.SpellCatHealth',\r\n        illusion: 'SR5.SpellCatIllusion',\r\n        manipulation: 'SR5.SpellCatManipulation',\r\n    },\r\n\r\n    spellTypes: {\r\n        physical: 'SR5.SpellTypePhysical',\r\n        mana: 'SR5.SpellTypeMana',\r\n    },\r\n\r\n    spellRanges: {\r\n        touch: 'SR5.SpellRangeTouch',\r\n        los: 'SR5.SpellRangeLos',\r\n        los_a: 'SR5.SpellRangeLosA',\r\n    },\r\n\r\n    combatSpellTypes: {\r\n        direct: 'SR5.SpellCombatDirect',\r\n        indirect: 'SR5.SpellCombatIndirect',\r\n    },\r\n\r\n    detectionSpellTypes: {\r\n        directional: 'SR5.SpellDetectionDirectional',\r\n        psychic: 'SR5.SpellDetectionPsychic',\r\n        area: 'SR5.SpellDetectionArea',\r\n    },\r\n\r\n    illusionSpellTypes: {\r\n        obvious: 'SR5.SpellIllusionObvious',\r\n        realistic: 'SR5.SpellIllusionRealistic',\r\n    },\r\n\r\n    illusionSpellSenses: {\r\n        'single-sense': 'SR5.SpellIllusionSingleSense',\r\n        'multi-sense': 'SR5.SpellIllusionMultiSense',\r\n    },\r\n\r\n    attributeRolls: {\r\n        composure: 'SR5.RollComposure',\r\n        lift_carry: 'SR5.RollLiftCarry',\r\n        judge_intentions: 'SR5.RollJudgeIntentions',\r\n        memory: 'SR5.RollMemory',\r\n    },\r\n\r\n    matrixTargets: {\r\n        persona: 'SR5.TargetPersona',\r\n        device: 'SR5.TargetDevice',\r\n        file: 'SR5.TargetFile',\r\n        self: 'SR5.TargetSelf',\r\n        sprite: 'SR5.TargetSprite',\r\n        other: 'SR5.TargetOther',\r\n    },\r\n\r\n    durations: {\r\n        instant: 'SR5.DurationInstant',\r\n        sustained: 'SR5.DurationSustained',\r\n        permanent: 'SR5.DurationPermanent',\r\n    },\r\n\r\n    weaponCategories: {\r\n        range: 'SR5.WeaponCatRange',\r\n        melee: 'SR5.WeaponCatMelee',\r\n        thrown: 'SR5.WeaponCatThrown',\r\n    },\r\n\r\n    weaponRanges: {\r\n        short: 'SR5.WeaponRangeShort',\r\n        medium: 'SR5.WeaponRangeMedium',\r\n        long: 'SR5.WeaponRangeLong',\r\n        extreme: 'SR5.WeaponRangeExtreme',\r\n    },\r\n\r\n    qualityTypes: {\r\n        positive: 'SR5.QualityTypePositive',\r\n        negative: 'SR5.QualityTypeNegative',\r\n    },\r\n\r\n    adeptPower: {\r\n        types: {\r\n            active: 'SR5.AdeptPower.Types.Active',\r\n            passive: 'SR5.AdeptPower.Types.Passive',\r\n        },\r\n    },\r\n\r\n    deviceCategories: {\r\n        commlink: 'SR5.DeviceCatCommlink',\r\n        cyberdeck: 'SR5.DeviceCatCyberdeck',\r\n    },\r\n\r\n    cyberwareGrades: {\r\n        standard: 'SR5.CyberwareGradeStandard',\r\n        alpha: 'SR5.CyberwareGradeAlpha',\r\n        beta: 'SR5.CyberwareGradeBeta',\r\n        delta: 'SR5.CyberwareGradeDelta',\r\n        used: 'SR5.CyberwareGradeUsed',\r\n    },\r\n\r\n    knowledgeSkillCategories: {\r\n        street: 'SR5.KnowledgeSkillStreet',\r\n        academic: 'SR5.KnowledgeSkillAcademic',\r\n        professional: 'SR5.KnowledgeSkillProfessional',\r\n        interests: 'SR5.KnowledgeSkillInterests',\r\n    },\r\n\r\n    activeSkills: {\r\n        archery: 'SR5.SkillArchery',\r\n        automatics: 'SR5.SkillAutomatics',\r\n        blades: 'SR5.SkillBlades',\r\n        clubs: 'SR5.SkillClubs',\r\n        exotic_melee: 'SR5.SkillExoticMelee',\r\n        exotic_range: 'SR5.SkillExoticRange',\r\n        heavy_weapons: 'SR5.SkillHeavyWeapons',\r\n        longarms: 'SR5.SkillLongarms',\r\n        pistols: 'SR5.SkillPistols',\r\n        throwing_weapons: 'SR5.SkillThrowingWeapons',\r\n        unarmed_combat: 'SR5.SkillUnarmedCombat',\r\n        disguise: 'SR5.SkillDisguise',\r\n        diving: 'SR5.SkillDiving',\r\n        escape_artist: 'SR5.SkillEscapeArtist',\r\n        free_fall: 'SR5.SkillFreeFall',\r\n        gymnastics: 'SR5.SkillGymnastics',\r\n        palming: 'SR5.SkillPalming',\r\n        perception: 'SR5.SkillPerception',\r\n        running: 'SR5.SkillRunning',\r\n        sneaking: 'SR5.SkillSneaking',\r\n        survival: 'SR5.SkillSurvival',\r\n        swimming: 'SR5.SkillSwimming',\r\n        tracking: 'SR5.SkillTracking',\r\n        con: 'SR5.SkillCon',\r\n        etiquette: 'SR5.SkillEtiquette',\r\n        impersonation: 'SR5.SkillImpersonation',\r\n        instruction: 'SR5.SkillInstruction',\r\n        intimidation: 'SR5.SkillIntimidation',\r\n        leadership: 'SR5.SkillLeadership',\r\n        negotiation: 'SR5.SkillNegotiation',\r\n        performance: 'SR5.SkillPerformance',\r\n        alchemy: 'SR5.SkillAlchemy',\r\n        arcana: 'SR5.SkillArcana',\r\n        artificing: 'SR5.SkillArtificing',\r\n        assensing: 'SR5.SkillAssensing',\r\n        astral_combat: 'SR5.SkillAstralCombat',\r\n        banishing: 'SR5.SkillBanishing',\r\n        binding: 'SR5.SkillBinding',\r\n        counterspelling: 'SR5.SkillCounterspelling',\r\n        disenchanting: 'SR5.SkillDisenchanting',\r\n        ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\r\n        spellcasting: 'SR5.SkillSpellcasting',\r\n        summoning: 'SR5.SkillSummoning',\r\n        compiling: 'SR5.SkillCompiling',\r\n        decompiling: 'SR5.SkillDecompiling',\r\n        registering: 'SR5.SkillRegistering',\r\n        aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\r\n        automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\r\n        industrial_mechanic: 'SR5.SkillIndustrialMechanic',\r\n        nautical_mechanic: 'SR5.SkillNauticalMechanic',\r\n        animal_handling: 'SR5.SkillAnimalHandling',\r\n        armorer: 'SR5.SkillArmorer',\r\n        artisan: 'SR5.SkillArtisan',\r\n        biotechnology: 'SR5.SkillBiotechnology',\r\n        chemistry: 'SR5.SkillChemistry',\r\n        computer: 'SR5.SkillComputer',\r\n        cybercombat: 'SR5.SkillCybercombat',\r\n        cybertechnology: 'SR5.SkillCybertechnology',\r\n        demolitions: 'SR5.SkillDemolitions',\r\n        electronic_warfare: 'SR5.SkillElectronicWarfare',\r\n        first_aid: 'SR5.SkillFirstAid',\r\n        forgery: 'SR5.SkillForgery',\r\n        hacking: 'SR5.SkillHacking',\r\n        hardware: 'SR5.SkillHardware',\r\n        locksmith: 'SR5.SkillLocksmith',\r\n        medicine: 'SR5.SkillMedicine',\r\n        navigation: 'SR5.SkillNavigation',\r\n        software: 'SR5.SkillSoftware',\r\n        gunnery: 'SR5.SkillGunnery',\r\n        pilot_aerospace: 'SR5.SkillPilotAerospace',\r\n        pilot_aircraft: 'SR5.SkillPilotAircraft',\r\n        pilot_walker: 'SR5.SkillPilotWalker',\r\n        pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\r\n        pilot_water_craft: 'SR5.SkillPilotWaterCraft',\r\n        pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\r\n    },\r\n\r\n    actionTypes: {\r\n        none: 'SR5.ActionTypeNone',\r\n        free: 'SR5.ActionTypeFree',\r\n        simple: 'SR5.ActionTypeSimple',\r\n        complex: 'SR5.ActionTypeComplex',\r\n        varies: 'SR5.ActionTypeVaries',\r\n    },\r\n\r\n    matrixAttributes: {\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n    },\r\n\r\n    initiativeCategories: {\r\n        meatspace: 'SR5.InitCatMeatspace',\r\n        astral: 'SR5.InitCatAstral',\r\n        matrix: 'SR5.InitCatMatrix',\r\n    },\r\n\r\n    modificationTypes: {\r\n        weapon: 'SR5.Weapon',\r\n        armor: 'SR5.Armor',\r\n    },\r\n\r\n    mountPoints: {\r\n        barrel: 'SR5.Barrel',\r\n        under_barrel: 'SR5.UnderBarrel',\r\n        stock: 'SR5.Stock',\r\n        top: 'SR5.Top',\r\n        side: 'SR5.Side',\r\n        internal: 'SR5.Internal',\r\n    },\r\n\r\n    lifestyleTypes: {\r\n        street: 'SR5.LifestyleStreet',\r\n        squatter: 'SR5.LifestyleSquatter',\r\n        low: 'SR5.LifestyleLow',\r\n        medium: 'SR5.LifestyleMiddle',\r\n        high: 'SR5.LifestyleHigh',\r\n        luxory: 'SR5.LifestyleLuxory',\r\n        other: 'SR5.LifestyleOther',\r\n    },\r\n\r\n    kbmod: {\r\n        STANDARD: 'shiftKey',\r\n        EDGE: 'altKey',\r\n        SPEC: 'ctrlKey',\r\n    },\r\n\r\n    actorModifiers: {\r\n        soak: 'SR5.RollSoak',\r\n        drain: 'SR5.Drain',\r\n        armor: 'SR5.Armor',\r\n        physical_limit: 'SR5.PhysicalLimit',\r\n        social_limit: 'SR5.SocialLimit',\r\n        mental_limit: 'SR5.MentalLimit',\r\n        stun_track: 'SR5.StunTrack',\r\n        physical_track: 'SR5.PhysicalTrack',\r\n        meat_initiative: 'SR5.MeatSpaceInit',\r\n        meat_initiative_dice: 'SR5.MeatSpaceDice',\r\n        astral_initiative: 'SR5.AstralInit',\r\n        astral_initiative_dice: 'SR5.AstralDice',\r\n        matrix_initiative: 'SR5.MatrixInit',\r\n        matrix_initiative_dice: 'SR5.MatrixDice',\r\n        composure: 'SR5.RollComposure',\r\n        lift_carry: 'SR5.RollLiftCarry',\r\n        judge_intentions: 'SR5.RollJudgeIntentions',\r\n        memory: 'SR5.RollMemory',\r\n        walk: 'SR5.Walk',\r\n        run: 'SR5.Run',\r\n        defense: 'SR5.RollDefense',\r\n        wound_tolerance: 'SR5.WoundTolerance',\r\n        essence: 'SR5.AttrEssence',\r\n        fade: 'SR5.RollFade',\r\n        global: 'SR5.Global',\r\n    },\r\n\r\n    programTypes: {\r\n        common_program: 'SR5.CommonProgram',\r\n        hacking_program: 'SR5.HackingProgram',\r\n        agent: 'SR5.Agent',\r\n    },\r\n\r\n    spiritTypes: {\r\n        // base types\r\n        air: 'SR5.Spirit.Types.Air',\r\n        beasts: 'SR5.Spirit.Types.Beasts',\r\n        earth: 'SR5.Spirit.Types.Earth',\r\n        fire: 'SR5.Spirit.Types.Fire',\r\n        guardian: 'SR5.Spirit.Types.Guardian',\r\n        guidance: 'SR5.Spirit.Types.Guidance',\r\n        man: 'SR5.Spirit.Types.Man',\r\n        plant: 'SR5.Spirit.Types.Plant',\r\n        task: 'SR5.Spirit.Types.Task',\r\n        water: 'SR5.Spirit.Types.Water',\r\n\r\n        // toxic types\r\n        toxic_air: 'SR5.Spirit.Types.ToxicAir',\r\n        toxic_beasts: 'SR5.Spirit.Types.ToxicBeasts',\r\n        toxic_earth: 'SR5.Spirit.Types.ToxicEarth',\r\n        toxic_fire: 'SR5.Spirit.Types.ToxicFire',\r\n        toxic_man: 'SR5.Spirit.Types.ToxicMan',\r\n        toxic_water: 'SR5.Spirit.Types.ToxicWater',\r\n\r\n        // blood types\r\n        blood: 'SR5.Spirit.Types.Blood',\r\n\r\n        // shadow types\r\n        muse: 'SR5.Spirit.Types.Muse',\r\n        nightmare: 'SR5.Spirit.Types.Nightmare',\r\n        shade: 'SR5.Spirit.Types.Shade',\r\n        succubus: 'SR5.Spirit.Types.Succubus',\r\n        wraith: 'SR5.Spirit.Types.Wraith',\r\n\r\n        // shedim types\r\n        shedim: 'SR5.Spirit.Types.Shedim',\r\n        master_shedim: 'SR5.Spirit.Types.MasterShedim',\r\n\r\n        // insect types\r\n        caretaker: 'SR5.Spirit.Types.Caretaker',\r\n        nymph: 'SR5.Spirit.Types.Nymph',\r\n        scout: 'SR5.Spirit.Types.Scout',\r\n        soldier: 'SR5.Spirit.Types.Soldier',\r\n        worker: 'SR5.Spirit.Types.Worker',\r\n        queen: 'SR5.Spirit.Types.Queen',\r\n    },\r\n\r\n    critterPower: {\r\n        categories: {\r\n          mundane: 'SR5.CritterPower.Categories.Mundane',\r\n          paranormal: 'SR5.CritterPower.Categories.Paranormal',\r\n          free_spirit: 'SR5.CritterPower.Categories.FreeSpirit',\r\n          emergent: 'SR5.CritterPower.Categories.Emergent',\r\n          shapeshifter: 'SR5.CritterPower.Categories.Shapeshifter',\r\n          drake: 'SR5.CritterPower.Categories.Drake',\r\n          echoes: 'SR5.CritterPower.Categories.Echoes',\r\n          weakness: 'SR5.CritterPower.Categories.Weakness',\r\n          paranormal_infected: 'SR5.CritterPower.Categories.ParanormalInfected',\r\n        },\r\n        types: {\r\n            mana: 'SR5.CritterPower.Types.Mana',\r\n            physical: 'SR5.CritterPower.Types.Physical',\r\n        },\r\n        ranges: {\r\n            los: 'SR5.CritterPower.Ranges.LineOfSight',\r\n            self: 'SR5.CritterPower.Ranges.Self',\r\n            touch: 'SR5.CritterPower.Ranges.Touch',\r\n            los_a: 'SR5.CritterPower.Ranges.LineOfSightArea',\r\n            special: 'SR5.CritterPower.Ranges.Special',\r\n        },\r\n        durations: {\r\n            always: 'SR5.CritterPower.Durations.Always',\r\n            instant: 'SR5.CritterPower.Durations.Instant',\r\n            sustained: 'SR5.CritterPower.Durations.Sustained',\r\n            permanent: 'SR5.CritterPower.Durations.Permanent',\r\n            special: 'SR5.CritterPower.Durations.Special',\r\n        },\r\n    },\r\n\r\n    spriteTypes: {\r\n        courier: 'SR5.Sprite.Types.Courier',\r\n        crack: 'SR5.Sprite.Types.Crack',\r\n        data: 'SR5.Sprite.Types.Data',\r\n        fault: 'SR5.Sprite.Types.Fault',\r\n        machine: 'SR5.Sprite.Types.Machine',\r\n    },\r\n\r\n    vehicle: {\r\n        types: {\r\n            air: 'SR5.Vehicle.Types.Air',\r\n            aerospace: 'SR5.Vehicle.Types.Aerospace',\r\n            ground: 'SR5.Vehicle.Types.Ground',\r\n            water: 'SR5.Vehicle.Types.Water',\r\n            walker: 'SR5.Vehicle.Types.Walker',\r\n            exotic: 'SR5.Vehicle.Types.Exotic',\r\n        },\r\n        stats: {\r\n            handling: 'SR5.Vehicle.Stats.Handling',\r\n            off_road_handling: 'SR5.Vehicle.Stats.OffRoadHandling',\r\n            speed: 'SR5.Vehicle.Stats.Speed',\r\n            off_road_speed: 'SR5.Vehicle.Stats.OffRoadSpeed',\r\n            acceleration: 'SR5.Vehicle.Stats.Acceleration',\r\n            pilot: 'SR5.Vehicle.Stats.Pilot',\r\n            sensor: 'SR5.Vehicle.Stats.Sensor',\r\n        },\r\n        control_modes: {\r\n            manual: 'SR5.Vehicle.ControlModes.Manual',\r\n            remote: 'SR5.Vehicle.ControlModes.Remote',\r\n            rigger: 'SR5.Vehicle.ControlModes.Rigger',\r\n            autopilot: 'SR5.Vehicle.ControlModes.Autopilot',\r\n        },\r\n        environments: {\r\n            speed: 'SR5.Vehicle.Environments.Speed',\r\n            handling: 'SR5.Vehicle.Environments.Handling',\r\n        },\r\n    },\r\n\r\n    character: {\r\n        types: {\r\n            human: 'SR5.Character.Types.Human',\r\n            elf: 'SR5.Character.Types.Elf',\r\n            ork: 'SR5.Character.Types.Ork',\r\n            dwarf: 'SR5.Character.Types.Dwarf',\r\n            troll: 'SR5.Character.Types.Troll',\r\n        },\r\n    },\r\n};\r\n","export const SYSTEM_NAME = 'shadowrun5e';\r\nexport const FLAGS = {\r\n    ShowGlitchAnimation: 'showGlitchAnimation',\r\n    ShowTokenNameForChatOutput: 'showTokenNameInsteadOfActor',\r\n    WhisperOpposedTestsToTargetedPlayers: 'whisperOpposedTestsToTargetedPlayers',\r\n    MessageCustomRoll: 'customRoll',\r\n    ApplyLimits: 'applyLimits',\r\n    LastRollPromptValue: 'lastRollPromptValue',\r\n    DisplayDefaultRollCard: 'displayDefaultRollCard',\r\n    EmbeddedItems: 'embeddedItems',\r\n    LastFireMode: 'lastFireMode',\r\n    LastSpellForce: 'lastSpellForce',\r\n    LastComplexFormLevel: 'lastComplexFormLevel',\r\n    LastFireRange: 'lastFireRange',\r\n    Attack: 'attack',\r\n    Roll: 'roll',\r\n    TargetsSceneTokenIds: 'targetsSceneTokenIds',\r\n    ChangelogShownForVersion: 'changelogShownForVersion'\r\n};\r\nexport const CORE_NAME = 'core';\r\nexport const CORE_FLAGS = {\r\n    RollMode: 'rollMode'\r\n}\r\nexport const METATYPEMODIFIER = 'SR5.Character.Modifiers.NPCMetatypeAttribute';\r\n\r\n// TODO: Reduce duplication\r\nexport const LENGTH_UNIT_TO_METERS_MULTIPLIERS = {\r\n    'm': 1,\r\n    'meter': 1,\r\n    'meters': 1,\r\n    'km': 1000,\r\n    'kilometers': 1000,\r\n    'kilometer': 1000,\r\n};\r\n\r\nexport const DEFAULT_ROLL_NAME = 'Roll';\r\n\r\nexport const LENGTH_UNIT = 'm';\r\n\r\n// Contain data regarding shadowrun rules, mostly whatever is stated in some table to be looked up in other places.\r\nexport const SR = {\r\n    combat: {\r\n        environmental: {\r\n            range_modifiers: {\r\n                short: 0,\r\n                medium: -1,\r\n                long: -3,\r\n                extreme: -6,\r\n                // A modifier of zero will allow for users/gm to still test oor targets with their own judgement.\r\n                out_of_range: 0\r\n            }\r\n        }\r\n    },\r\n    die: {\r\n        glitch: [1],\r\n        success: [5, 6]\r\n    },\r\n    defense: {\r\n        spell: {\r\n            direct: {\r\n                mana: 'willpower',\r\n                physical: 'body'\r\n            }\r\n        }\r\n    }\r\n}\r\n","import ActorAttribute = Shadowrun.ActorAttribute;\r\nimport DamageData = Shadowrun.DamageData;\r\n\r\nexport const DataTemplates = {\r\n    grunt: {\r\n        metatype_modifiers: {\r\n            elf: {\r\n                attributes: {\r\n                    agility: +1,\r\n                    charisma: +2,\r\n                    edge: -1\r\n                }\r\n            },\r\n            ork: {\r\n                attributes: {\r\n                    body: +3,\r\n                    strength: +2,\r\n                    logic: -1,\r\n                    charisma: -1,\r\n                    edge: -1\r\n                }\r\n            },\r\n            troll: {\r\n                attributes: {\r\n                    body: +4,\r\n                    agility: -1,\r\n                    strength: +4,\r\n                    logic: -1,\r\n                    intuition: -1,\r\n                    charisma: -2,\r\n                    edge: -1,\r\n                },\r\n                general: {\r\n                    armor: +1\r\n                }\r\n            },\r\n            dwarf: {\r\n                attributes: {\r\n                    body: +2,\r\n                    reaction: -1,\r\n                    strength: +2,\r\n                    willpower: +1,\r\n                    edge: -1\r\n                }\r\n            }\r\n        }\r\n    },\r\n    damage: {\r\n        type: {\r\n            value: \"\",\r\n            base: \"\"\r\n        },\r\n        element: {\r\n            value: \"\",\r\n            base: \"\"\r\n        },\r\n        value: 0,\r\n        base: 0,\r\n        ap: {\r\n            value: 0,\r\n            base: 0,\r\n            mod: []\r\n        },\r\n        attribute: \"\",\r\n        mod: []\r\n    } as DamageData\r\n}","export abstract class DataWrapper<DataType> {\r\n    constructor(protected data: DataType) {}\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport {SafeString} from \"handlebars\";\r\nimport DamageData = Shadowrun.DamageData;\r\n\r\nexport const registerBasicHelpers = () => {\r\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\r\n        if (obj) strId = obj[strId];\r\n        return game.i18n.localize(strId);\r\n    });\r\n\r\n    Handlebars.registerHelper('toHeaderCase', function (str) {\r\n        if (str) return Helpers.label(str);\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('concatStrings', function (...args) {\r\n        return args.filter(a => typeof a === 'string').join('');\r\n    });\r\n\r\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\r\n        if (Array.isArray(strs)) {\r\n            return strs.join(c);\r\n        }\r\n        return strs;\r\n    });\r\n\r\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\r\n        let accum = '';\r\n        for (let i = from; i < to; i += 1) {\r\n            accum += options.fn(i);\r\n        }\r\n\r\n        return accum;\r\n    });\r\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\r\n        return v1 % v2;\r\n    });\r\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\r\n        if (v2 === 0) return 0;\r\n        return v1 / v2;\r\n    });\r\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            return options.fn(this);\r\n        } else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\r\n        if (arr.includes(val)) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if greater than\r\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\r\n        if (v1 > v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than\r\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\r\n        if (v1 < v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than or equal\r\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\r\n        if (v1 <= v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if not equal\r\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\r\n        if (v1 !== v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if equal\r\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\r\n        if (v1 === v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('not', function (v1) {\r\n        return !v1;\r\n    });\r\n    Handlebars.registerHelper('sum', function (v1, v2) {\r\n        return v1 + v2;\r\n    });\r\n\r\n    Handlebars.registerHelper('isDefined', function (value) {\r\n        return value !== undefined && value !== null;\r\n    });\r\n    /**\r\n     * Return a default value if the provided value is not defined (null or undefined)\r\n     */\r\n    Handlebars.registerHelper('default', function (value: string, defaultValue: string) {\r\n        return new Handlebars.SafeString(value ?? defaultValue);\r\n    });\r\n\r\n    Handlebars.registerHelper('log', function (value: string) {\r\n        console.log(value);\r\n    });\r\n    Handlebars.registerHelper('buildName', function (options) {\r\n        const hash: string[] = Helpers.orderKeys(options.hash);\r\n        const name = Object.values(hash).reduce((retVal, current, index) => {\r\n            if (index > 0) retVal += '.';\r\n            return retVal + current;\r\n        }, '');\r\n        return new Handlebars.SafeString(name);\r\n    });\r\n    Handlebars.registerHelper('disabledHelper', function (value) {\r\n        const val = Boolean(value);\r\n        return val ? val : undefined;\r\n    });\r\n    // TODO: This helper doesn't work... Don't why, but it doesn't.\r\n    Handlebars.registerHelper('localizeShortened', function (label: string, length: number, options: any): SafeString {\r\n        return new Handlebars.SafeString(Helpers.shortenAttributeLocalization(label, length));\r\n    });\r\n};\r\n","import { preloadHandlebarsTemplates } from './HandlebarTemplates';\r\nimport { registerBasicHelpers } from './BasicHelpers';\r\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\r\nimport { registerItemLineHelpers } from './ItemLineHelpers';\r\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\r\n\r\nexport class HandlebarManager {\r\n    static async loadTemplates() {\r\n        await preloadHandlebarsTemplates();\r\n    }\r\n    static registerHelpers(): void {\r\n        registerBasicHelpers();\r\n        registerRollAndLabelHelpers();\r\n        registerItemLineHelpers();\r\n        registerSkillLineHelpers();\r\n    }\r\n}","export const preloadHandlebarsTemplates = async () => {\r\n    const templatePaths = [\r\n        // actor tabs\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/ActionsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/BioTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/GearTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MagicTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MatrixTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MiscTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SocialTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SpellsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/CritterPowersTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/matrix/SpriteSkillsTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleSkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleMatrixTab.html',\r\n\r\n        // uncategorized lists\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Initiative.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Movement.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ProfileImage.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/NameInput.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ActionList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ContactList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/SinAndLifestyleList.html',\r\n\r\n        // magic\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/AdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellAndAdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpiritOptions.html',\r\n\r\n        // matrix\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ProgramList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ComplexFormList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/SpritePowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/DeviceRating.html',\r\n\r\n        // attributes\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/AttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Limits.html',\r\n\r\n        // skills\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActiveSkillList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\r\n\r\n        // vehicle\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleStatsList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleSecondStatsList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleMovement.html',\r\n\r\n        // limited actor\r\n        'systems/shadowrun5e/dist/templates/actor-limited/character.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/spirit.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/sprite.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/vehicle.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/critter.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/Header.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCharacter.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSpirit.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSprite.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscVehicle.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCritter.html',\r\n\r\n\r\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/critter_power.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/Damage.html',\r\n\r\n        // to wrap the bodies of tabs\r\n        'systems/shadowrun5e/dist/templates/common/TabWrapper.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\r\n\r\n        // Useful wrapper and implemented components\r\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueModifiers.html',\r\n\r\n        // useful select template for the common pattern\r\n        'systems/shadowrun5e/dist/templates/common/Select.html',\r\n\r\n        // to create the condition monitors and edge counter\r\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\r\n\r\n        // looks like a ListHeader\r\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/common/NameLineBlock.html',\r\n\r\n        // list components\r\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\r\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html',\r\n\r\n        // dialogs\r\n        'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html',\r\n    ];\r\n\r\n    return loadTemplates(templatePaths);\r\n};\r\n","import SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { SR5ItemDataWrapper } from '../item/SR5ItemDataWrapper';\r\n\r\nexport const registerItemLineHelpers = () => {\r\n    Handlebars.registerHelper('ItemHeaderIcons', function (id) {\r\n        const PlusIcon = 'fas fa-plus';\r\n        const AddText = game.i18n.localize('SR5.Add');\r\n        const addIcon = {\r\n            icon: PlusIcon,\r\n            text: AddText,\r\n            title: game.i18n.localize('SR5.CreateItem'),\r\n            cssClass: 'item-create',\r\n        };\r\n        switch (id) {\r\n            case 'lifestyle':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\r\n                return [addIcon];\r\n            case 'contact':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\r\n                return [addIcon];\r\n            case 'sin':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\r\n                return [addIcon];\r\n            case 'license':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\r\n                return [addIcon];\r\n            case 'quality':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\r\n                return [addIcon];\r\n            case 'adept_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\r\n                return [addIcon];\r\n            case 'action':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\r\n                return [addIcon];\r\n            case 'spell':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\r\n                return [addIcon];\r\n            case 'gear':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\r\n                return [addIcon];\r\n            case 'complex_form':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\r\n                return [addIcon];\r\n            case 'program':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\r\n                return [addIcon];\r\n            case 'weapon':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemWeapon');\r\n                return [addIcon];\r\n            case 'armor':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemArmor');\r\n                return [addIcon];\r\n            case 'ammo':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAmmo');\r\n                return [addIcon];\r\n            case 'device':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemDevice');\r\n                return [addIcon];\r\n            case 'equipment':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemEquipment');\r\n                return [addIcon];\r\n            case 'cyberware':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemCyberware');\r\n                return [addIcon];\r\n            case 'bioware':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemBioware');\r\n                return [addIcon];\r\n            case 'critter_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemCritterPower');\r\n                return [addIcon];\r\n            case 'sprite_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpritePower');\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\r\n        switch (id) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Skill'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Limit'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Modifier'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'weapon':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n            case 'ammo':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Qty'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Target'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Fade'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.PowerType'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellType'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellRange'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Drain'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'critter_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Type'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Range'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Duration'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.QualityType'),\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemRightSide', function (item: SR5ItemType) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        const qtyInput = {\r\n            input: {\r\n                type: 'number',\r\n                value: wrapper.getQuantity(),\r\n                cssClass: 'item-qty',\r\n            },\r\n        };\r\n        switch (item.type) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.activeSkills[wrapper.getActionSkill() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute2() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getLimitAttribute()\r\n                                ? game.i18n.localize(CONFIG.SR5.attributes[wrapper.getLimitAttribute() ?? ''])\r\n                                : wrapper.getActionLimit(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getActionDicePoolMod(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'armor':\r\n            case 'ammo':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n                return [qtyInput];\r\n            case 'weapon':\r\n                if (wrapper.isRangedWeapon()) {\r\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\r\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\r\n                    const text = count < max ? `${game.i18n.localize('SR5.WeaponReload')} (${count}/${max})` : game.i18n.localize('SR5.AmmoFull');\r\n                    const cssClass = 'no-break' + (count < max ? ' reload-ammo roll' : 'faded');\r\n                    return [\r\n                        {\r\n                            text: {\r\n                                title: `${game.i18n.localize('SR5.WeaponAmmoCount')}: ${count}`,\r\n                                text,\r\n                                cssClass,\r\n                            },\r\n                        },\r\n                        {\r\n                            text: {\r\n                                text: '',\r\n                            },\r\n                        },\r\n                        qtyInput,\r\n                    ];\r\n                } else {\r\n                    return [qtyInput];\r\n                }\r\n\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.qualityTypes[item.data.type ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.adeptPower.types[item.data.type ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.spellTypes[item.data.type ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.spellRanges[item.data.range ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getDrain(),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'critter_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.types[item.data.powerType ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.ranges[item.data.range ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.matrixTargets[item.data.target ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: String(item.data.fade),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [\r\n                    {\r\n                        button: {\r\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\r\n                            short: true,\r\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemIcons', function (item: SR5ItemType) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        const editIcon = {\r\n            icon: 'fas fa-edit item-edit',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash item-delete',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n        };\r\n        const equipIcon = {\r\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\r\n            title: game.i18n.localize('SR5.ToggleEquip'),\r\n        };\r\n        const pdfIcon = {\r\n            icon: 'fas fa-file open-source-pdf',\r\n            title: game.i18n.localize('SR5.OpenSourcePdf'),\r\n        };\r\n\r\n        const icons = [editIcon, removeIcon];\r\n\r\n        if (ui['PDFoundry']) {\r\n            icons.unshift(pdfIcon);\r\n        }\r\n\r\n        switch (wrapper.getType()) {\r\n            case 'program':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n            case 'weapon':\r\n                icons.unshift(equipIcon);\r\n        }\r\n\r\n        return icons;\r\n    });\r\n};\r\n","import { PartsList } from '../parts/PartsList';\r\nimport ModList = Shadowrun.ModList;\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {SafeString} from \"handlebars\";\r\nimport DamageData = Shadowrun.DamageData;\r\n\r\nexport const registerRollAndLabelHelpers = () => {\r\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\r\n        if (damage === 'physical') return 'P';\r\n        if (damage === 'stun') return 'S';\r\n        if (damage === 'matrix') return 'M';\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('damageCode', function(damage: DamageData): SafeString {\r\n        const typeCode = Handlebars.helpers.damageAbbreviation(damage.type.value);\r\n        let code = `${damage.value}${typeCode}`;\r\n        return new Handlebars.SafeString(code);\r\n    });\r\n\r\n    Handlebars.registerHelper('diceIcon', function (side) {\r\n        if (side) {\r\n            switch (side) {\r\n                case 1:\r\n                    return 'red';\r\n                case 2:\r\n                    return 'grey';\r\n                case 3:\r\n                    return 'grey';\r\n                case 4:\r\n                    return 'grey';\r\n                case 5:\r\n                    return 'green';\r\n                case 6:\r\n                    return 'green';\r\n            }\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('elementIcon', function (element) {\r\n        let icon = '';\r\n        if (element === 'electricity') {\r\n            icon = 'fas fa-bolt';\r\n        } else if (element === 'radiation') {\r\n            icon = 'fas fa-radiation-alt';\r\n        } else if (element === 'fire') {\r\n            icon = 'fas fa-fire';\r\n        } else if (element === 'acid') {\r\n            icon = 'fas fa-vials';\r\n        } else if (element === 'cold') {\r\n            icon = 'fas fa-snowflake';\r\n        }\r\n        return icon;\r\n    });\r\n\r\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\r\n        const parts = new PartsList(partsList);\r\n        return parts.total;\r\n    });\r\n\r\n    Handlebars.registerHelper('signedValue', function (value: number): string {\r\n        if (value > 0) {\r\n            return `+${value}`;\r\n        } else {\r\n            return `${value}`;\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('speakerName', Helpers.getChatSpeakerName);\r\n};\r\n","import SkillField = Shadowrun.SkillField;\r\nimport { Helpers } from '../helpers';\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\n\r\nexport const registerSkillLineHelpers = () => {\r\n    Handlebars.registerHelper('SkillHeaderIcons', function (id) {\r\n        const addIcon = {\r\n            icon: 'fas fa-plus',\r\n            title: game.i18n.localize('SR5.AddSkill'),\r\n            text: game.i18n.localize('SR5.Add'),\r\n            cssClass: '',\r\n        };\r\n        switch (id) {\r\n            case 'active':\r\n                return [{}];\r\n            case 'language':\r\n                addIcon.cssClass = 'add-language';\r\n                return [addIcon];\r\n            case 'knowledge':\r\n                addIcon.cssClass = 'add-knowledge';\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id, filters: SR5SheetFilters) {\r\n        const specs = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Specialization'),\r\n                cssClass: 'skill-spec-item',\r\n            },\r\n        };\r\n\r\n        const rtg = {\r\n            // Change Rating header to show active filtering.\r\n            text: {\r\n                text: !filters || filters.showUntrainedSkills ?\r\n                    game.i18n.localize('SR5.Rtg') :\r\n                    game.i18n.localize('SR5.RtgAboveZero'),\r\n                cssClass: 'rtg',\r\n            },\r\n        };\r\n\r\n        switch (id) {\r\n            case 'active':\r\n            case 'knowledge':\r\n            case 'language':\r\n                return [specs, rtg];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\r\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\r\n        return [\r\n            {\r\n                text: {\r\n                    text: specs.join(', ') ?? '',\r\n                    cssClass: 'skill-spec-item',\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: Helpers.calcTotal(skill),\r\n                    cssClass: 'rtg',\r\n                },\r\n            },\r\n        ];\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit',\r\n            title: game.i18n.localize('SR5.EditSkill'),\r\n            cssClass: '',\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.DeleteSkill'),\r\n            cssClass: '',\r\n        };\r\n        switch (skillType) {\r\n            case 'active':\r\n                editIcon.cssClass = 'skill-edit';\r\n                return [editIcon];\r\n            case 'language':\r\n                editIcon.cssClass = 'language-skill-edit';\r\n                removeIcon.cssClass = 'remove-language';\r\n                return [editIcon, removeIcon];\r\n            case 'knowledge':\r\n                editIcon.cssClass = 'knowledge-skill-edit';\r\n                removeIcon.cssClass = 'remove-knowledge';\r\n                return [editIcon, removeIcon];\r\n            default:\r\n                return [editIcon];\r\n        }\r\n    });\r\n\r\n};\r\n","import AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport { PartsList } from './parts/PartsList';\r\nimport LabelField = Shadowrun.LabelField;\r\nimport {FLAGS, LENGTH_UNIT, LENGTH_UNIT_TO_METERS_MULTIPLIERS, SR, SYSTEM_NAME} from \"./constants\";\r\nimport {SR5Actor} from \"./actor/SR5Actor\";\r\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\r\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\r\nimport {DataTemplates} from \"./dataTemplates\";\r\nimport DamageType = Shadowrun.DamageType;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport {DeleteConfirmationDialog} from \"./apps/dialogs/DeleteConfirmationDialog\";\r\n\r\ninterface CalcTotalOptions {\r\n    min?: number,\r\n    max?: number\r\n}\r\nexport class Helpers {\r\n    /**\r\n     * Calculate the total value for a data object\r\n     * - stores the total value and returns it\r\n     * @param data\r\n     * @param options\r\n     */\r\n    static calcTotal(data: ModifiableValue, options?: CalcTotalOptions): number {\r\n        if (data.mod === undefined) data.mod = [];\r\n        const parts = new PartsList(data.mod);\r\n        // if a temp field is found, add it as a unique part\r\n        if (data['temp'] !== undefined) {\r\n            parts.addUniquePart('SR5.Temporary', data['temp']);\r\n        }\r\n        const decimalCount = 3;\r\n        const mult = Math.pow(10, decimalCount);\r\n\r\n        data.value = Math.round((parts.total + data.base) * mult) / mult;\r\n        data.mod = parts.list;\r\n\r\n        // Apply possible range restrictions, including zero...\r\n        if (typeof options?.min === 'number') {\r\n            data.value = Math.max(options.min, data.value);\r\n        }\r\n        if (typeof options?.max === 'number') {\r\n            data.value = Math.min(options.max, data.value);\r\n        }\r\n\r\n        return data.value;\r\n    }\r\n\r\n    static listItemId(event) {\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\r\n    static onSetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\r\n            newData[newKey] = this.onSetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n    // replace 'SR5_DOT_' with 'SR5.' on keys\r\n    static onGetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\r\n            newData[newKey] = this.onGetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\r\n        if (!atts) return false;\r\n        if (typeof atts === 'boolean') return atts;\r\n        // array of labels to check for on the incoming data\r\n        const matrixLabels = [\r\n            'SR5.MatrixAttrFirewall',\r\n            'SR5.MatrixAttrDataProcessing',\r\n            'SR5.MatrixAttrSleaze',\r\n            'SR5.MatrixAttrAttack',\r\n            'SR5.SkillComputer',\r\n            'SR5.SkillHacking',\r\n            'SR5.SkillCybercombat',\r\n            'SR5.SkillElectronicWarfare',\r\n            'SR5.Software',\r\n        ];\r\n        if (!Array.isArray(atts)) atts = [atts];\r\n        atts = atts.filter((att) => att);\r\n        // iterate over the attributes and return true if we find a matrix att\r\n        for (const att of atts) {\r\n            if (typeof att === 'string') {\r\n                if (matrixLabels.indexOf(att) >= 0) {\r\n                    return true;\r\n                }\r\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\r\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // if we don't find anything return false\r\n        return false;\r\n    }\r\n\r\n    static parseInputToString(val: number | string | string[] | undefined): string {\r\n        if (val === undefined) return '';\r\n        if (typeof val === 'number') return val.toString();\r\n        if (typeof val === 'string') return val;\r\n        if (Array.isArray(val)) {\r\n            return val.join(',');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\r\n        if (typeof val === 'number') return val;\r\n        if (typeof val === 'string') {\r\n            const ret = +val;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        if (Array.isArray(val)) {\r\n            const str = val.join('');\r\n            const ret = +str;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static setupCustomCheckbox(app, html) {\r\n        const setContent = (el) => {\r\n            const checkbox = $(el).children('input[type=checkbox]');\r\n            const checkmark = $(el).children('.checkmark');\r\n            if ($(checkbox).prop('checked')) {\r\n                $(checkmark).addClass('fa-check-circle');\r\n                $(checkmark).removeClass('fa-circle');\r\n            } else {\r\n                $(checkmark).addClass('fa-circle');\r\n                $(checkmark).removeClass('fa-check-circle');\r\n            }\r\n        };\r\n        html.find('label.checkbox').each(function () {\r\n            setContent(this);\r\n        });\r\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\r\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\r\n    }\r\n\r\n    static mapRoundsToDefenseMod(rounds) {\r\n        if (rounds === 1) return 0;\r\n        if (rounds === 3) return -2;\r\n        if (rounds === 6) return -5;\r\n        if (rounds === 10) return -9;\r\n        return 0;\r\n    }\r\n\r\n    static mapRoundsToDefenseDesc(rounds) {\r\n        if (rounds === 1) return '';\r\n        if (rounds === 3) return '-2';\r\n        if (rounds === 6) return '-5';\r\n        if (rounds === 10) return '-9';\r\n        if (rounds === 20) return 'SR5.DuckOrCover';\r\n        return '';\r\n    }\r\n\r\n    static label(str) {\r\n        const frags = str.split('_');\r\n        for (let i = 0; i < frags.length; i++) {\r\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\r\n        }\r\n        frags.forEach((frag, idx) => {\r\n            if (frag === 'Processing') frags[idx] = 'Proc.';\r\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\r\n        });\r\n        return frags.join(' ');\r\n    }\r\n\r\n    static orderKeys(obj) {\r\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\r\n            if (k1 < k2) return -1;\r\n            if (k1 > k2) return +1;\r\n            return 0;\r\n        });\r\n\r\n        let i;\r\n        const after = {};\r\n        for (i = 0; i < keys.length; i++) {\r\n            after[keys[i]] = obj[keys[i]];\r\n            delete obj[keys[i]];\r\n        }\r\n\r\n        for (i = 0; i < keys.length; i++) {\r\n            obj[keys[i]] = after[keys[i]];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static hasModifiers(event) {\r\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\r\n    }\r\n\r\n    static filter(obj, comp) {\r\n        const retObj = {};\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            Object.entries(obj).forEach(([key, value]) => {\r\n                if (comp([key, value])) retObj[key] = value;\r\n            });\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n    static addLabels(obj, label) {\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\r\n                obj.label = label;\r\n            }\r\n            Object.entries(obj)\r\n                .filter(([, value]) => typeof value === 'object')\r\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\r\n        }\r\n    }\r\n\r\n    /* Handle Shadowrun style shortened attribute names with typical three letter shortening. */\r\n    static shortenAttributeLocalization(label: string, length: number = 3): string {\r\n        const name = game.i18n.localize(label);\r\n\r\n        if (length <= 0) {\r\n            return name;\r\n        }\r\n\r\n        if (name.length < length) {\r\n            length = name.length;\r\n        }\r\n\r\n        return name.slice(0, length).toUpperCase();\r\n    }\r\n\r\n    static getToken(id?: string): Token|undefined {\r\n        for (const token of canvas.tokens.placeables) {\r\n            if (token.id === id) {\r\n                return token;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getSceneToken(sceneTokenId: string): Token|undefined {\r\n        const [sceneId, tokenId] = sceneTokenId.split('.');\r\n\r\n        const isActiveScene = sceneId === canvas?.scene._id;\r\n        if (isActiveScene) {\r\n            return canvas.tokens.get(tokenId);\r\n        }\r\n\r\n        // Build Token using it's data from the connected scene as a fallback.\r\n        const scene = game.scenes.get(sceneId);\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        //@ts-ignore\r\n        const tokenData = scene.data.tokens.find((t) => t.id === Number(tokenId));\r\n        if (!tokenData) {\r\n            return;\r\n        }\r\n\r\n        return new Token(tokenData);\r\n    }\r\n\r\n    static getUserTargets(user?: User): Token[] {\r\n        user = user ? user : game.user;\r\n\r\n        if (user) {\r\n            return Array.from(user.targets);\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    static userHasTargets(user?: User): boolean {\r\n        user = user ? user : game.user;\r\n\r\n        return user.targets.size > 0;\r\n    }\r\n\r\n    static measureTokenDistance(tokenOrigin: Token, tokenDest: Token): number {\r\n        if (!tokenOrigin || !tokenDest) return 0;\r\n\r\n        const origin = new PIXI.Point(...canvas.grid.getCenter(tokenOrigin.data.x, tokenOrigin.data.y));\r\n        const dest = new PIXI.Point(...canvas.grid.getCenter(tokenDest.data.x, tokenDest.data.y));\r\n\r\n        const distanceInGridUnits = canvas.grid.measureDistance(origin, dest, {gridSpaces: true});\r\n        const sceneUnit = canvas.scene.data.gridUnits;\r\n        // TODO: Define weapon range units somewhere (settings)\r\n        return Helpers.convertLengthUnit(distanceInGridUnits, sceneUnit);\r\n    }\r\n\r\n    static convertLengthUnit(length:number, fromUnit: string): number {\r\n        //@ts-ignore\r\n        fromUnit = fromUnit.toLowerCase();\r\n\r\n        if (!LENGTH_UNIT_TO_METERS_MULTIPLIERS.hasOwnProperty(fromUnit)) {\r\n            console.error(`Distance can't be converted from ${fromUnit} to ${LENGTH_UNIT}`);\r\n            return 0;\r\n        }\r\n\r\n        // Round down since X.8 will hit X and not X+1.\r\n        return Math.floor(length * LENGTH_UNIT_TO_METERS_MULTIPLIERS[fromUnit]);\r\n    }\r\n\r\n    static getWeaponRange(distance: number, ranges: RangesTemplateData): RangeTemplateData {\r\n        // Assume ranges to be in ASC order and to define their max range.\r\n        // Should no range be found, assume distance to be out of range.\r\n        const rangeKey = Object.keys(ranges).find(range => distance < ranges[range].distance);\r\n        if (rangeKey) {\r\n            return ranges[rangeKey];\r\n        } else {\r\n            const {extreme} = ranges;\r\n            return Helpers.createRangeDescription('SR5.OutOfRange', extreme.distance, SR.combat.environmental.range_modifiers.out_of_range);\r\n        }\r\n    }\r\n\r\n    static getControlledTokens(): Token[] {\r\n        return canvas.tokens.controlled;\r\n    }\r\n\r\n    static getSelectedActorsOrCharacter(): SR5Actor[] {\r\n        const tokens = Helpers.getControlledTokens();\r\n        const actors = tokens.map(token => token.actor) as SR5Actor[];\r\n\r\n        // Try to default to a users character.\r\n        if (actors.length === 0 && game.user?.character) {\r\n            actors.push(game.user.character as SR5Actor);\r\n        }\r\n\r\n        return actors;\r\n    }\r\n\r\n    static createRangeDescription(label: string, distance: number, modifier: number): RangeTemplateData {\r\n        label = game.i18n.localize(label);\r\n        return {label, distance, modifier}\r\n    }\r\n\r\n    static convertIndexedObjectToArray(indexedObject: object): object[] {\r\n        return Object.keys(indexedObject).map((index) => {\r\n            if (Number.isNaN(index)) {\r\n                console.warn('An object with no numerical index was given, which is likely a bug.', indexedObject);\r\n            }\r\n            return indexedObject[index];\r\n        });\r\n    }\r\n\r\n    static getChatSpeakerName(actor: SR5Actor): string {\r\n        if (!actor) return '';\r\n\r\n        const useTokenNameForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\r\n        const token = actor.getToken();\r\n\r\n        if (useTokenNameForChatOutput && token) return token.data.name;\r\n\r\n        return actor.name;\r\n    }\r\n\r\n    static createDamageData(value: number, type: DamageType, ap: number = 0, element: DamageElement = ''): DamageData {\r\n        const damage = duplicate(DataTemplates.damage);\r\n        damage.base = value;\r\n        damage.value = value;\r\n        damage.type.base = type;\r\n        damage.type.value = type;\r\n        damage.ap.base = ap;\r\n        damage.ap.value = ap;\r\n        damage.element.base = element;\r\n        damage.element.value = element;\r\n\r\n        return damage;\r\n    }\r\n\r\n    static modifyDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\r\n        const modified = duplicate(incoming);\r\n        modified.mod = PartsList.AddUniquePart(modified.mod, modificationLabel, -hits);\r\n        modified.value = Helpers.calcTotal(modified, {min: 0});\r\n\r\n        return {incoming, modified};\r\n    }\r\n\r\n    static async confirmDeletion(): Promise<boolean> {\r\n        const dialog = new DeleteConfirmationDialog();\r\n        await dialog.select();\r\n        return !dialog.canceled && dialog.selectedButton === 'delete';\r\n    }\r\n}\r\n","import { SR5 } from './config';\r\nimport { Migrator } from './migrator/Migrator';\r\nimport { registerSystemSettings } from './settings';\r\nimport { SYSTEM_NAME } from './constants';\r\nimport { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5ActorSheet } from './actor/SR5ActorSheet';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport { SR5ItemSheet } from './item/SR5ItemSheet';\r\nimport { ShadowrunRoller } from './rolls/ShadowrunRoller';\r\nimport { Helpers } from './helpers';\r\nimport { HandlebarManager } from './handlebars/HandlebarManager';\r\nimport { measureDistance } from './canvas';\r\nimport * as chat from './chat';\r\nimport { createItemMacro, rollItemMacro } from './macros';\r\n\r\nimport { OverwatchScoreTracker } from './apps/gmtools/OverwatchScoreTracker';\r\nimport { SR5Combat } from './combat/SR5Combat';\r\nimport { Import } from './importer/apps/import-form';\r\nimport {ChangelogApplication} from \"./apps/ChangelogApplication\";\r\n\r\nexport class HooksManager {\r\n    static registerHooks() {\r\n        // Register your highest level hook callbacks here for a quick overview of what's hooked into.\r\n\r\n        Hooks.once('init', HooksManager.init);\r\n\r\n        Hooks.on('canvasInit', HooksManager.canvasInit);\r\n        Hooks.on('ready', HooksManager.ready);\r\n        Hooks.on('renderChatMessage', HooksManager.renderChatMessage);\r\n        Hooks.on('getChatLogEntryContext', chat.addChatMessageContextOptions);\r\n        Hooks.on('hotbarDrop', HooksManager.hotbarDrop);\r\n        Hooks.on('renderSceneControls', HooksManager.renderSceneControls);\r\n        Hooks.on('getSceneControlButtons', HooksManager.getSceneControlButtons);\r\n        Hooks.on('getCombatTrackerEntryContext', SR5Combat.addCombatTrackerContextOptions);\r\n        Hooks.on('renderItemDirectory', HooksManager.renderItemDirectory);\r\n    }\r\n\r\n    static init() {\r\n        console.log(`Loading Shadowrun 5e System\r\n___________________\r\n ___________ _____ \r\n/  ___| ___ \\\\  ___|\r\n\\\\ \\`--.| |_/ /___ \\\\ \r\n \\`--. \\\\    /    \\\\ \\\\\r\n/\\\\__/ / |\\\\ \\\\/\\\\__/ /\r\n\\\\____/\\\\_| \\\\_\\\\____/ \r\n===================\r\n`);\r\n\r\n        // Create a shadowrun5e namespace within the game global\r\n        game['shadowrun5e'] = {\r\n            SR5Actor,\r\n            ShadowrunRoller,\r\n            SR5Item,\r\n            rollItemMacro,\r\n        };\r\n\r\n        CONFIG.SR5 = SR5;\r\n        // @ts-ignore\r\n        CONFIG.Actor.entityClass = SR5Actor;\r\n        // @ts-ignore\r\n        CONFIG.Item.entityClass = SR5Item;\r\n        CONFIG.Combat.entityClass = SR5Combat;\r\n\r\n        registerSystemSettings();\r\n\r\n        // Register sheet application classes\r\n        // NOTE: See dnd5e for a multi class approach for all actor types using the types array in Actors.registerSheet\r\n        Actors.unregisterSheet('core', ActorSheet);\r\n        Actors.registerSheet(SYSTEM_NAME, SR5ActorSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true\r\n        });\r\n        Items.unregisterSheet('core', ItemSheet);\r\n        Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, {\r\n            label: \"SR5.SheetItem\",\r\n            makeDefault: true\r\n        });\r\n\r\n        ['renderSR5ActorSheet', 'renderSR5ItemSheet'].forEach((s) => {\r\n            Hooks.on(s, (app, html) => Helpers.setupCustomCheckbox(app, html));\r\n        });\r\n\r\n        HandlebarManager.loadTemplates();\r\n    }\r\n\r\n    static async ready() {\r\n        if (game.user.isGM) {\r\n            await Migrator.BeginMigration();\r\n\r\n            if (ChangelogApplication.showApplication) {\r\n                await new ChangelogApplication().render(true);\r\n            }\r\n\r\n        }\r\n\r\n        // TODO make based on foundry version\r\n        const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\r\n        $(document).on('click', diceIconSelector, () => ShadowrunRoller.promptRoll());\r\n        const diceIconSelectorNew = '#chat-controls .chat-control-icon .fa-dice-d20';\r\n        $(document).on('click', diceIconSelectorNew, () => ShadowrunRoller.promptRoll());\r\n\r\n\r\n    }\r\n\r\n    static canvasInit() {\r\n        canvas.grid.diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\r\n        //@ts-ignore\r\n        // SquareGrid isn't typed.\r\n        SquareGrid.prototype.measureDistances = measureDistance;\r\n    }\r\n\r\n    static hotbarDrop(bar, data, slot) {\r\n        if (data.type !== 'Item') return;\r\n\r\n        createItemMacro(data.data, slot);\r\n        return false;\r\n    }\r\n\r\n    static renderSceneControls(controls, html) {\r\n        html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\r\n            event.preventDefault();\r\n            new OverwatchScoreTracker().render(true);\r\n        });\r\n    }\r\n\r\n    static getSceneControlButtons(controls) {\r\n        if (game.user.isGM) {\r\n            const tokenControls = controls.find((c) => c.name === 'token');\r\n            tokenControls.tools.push({\r\n                name: 'overwatch-score-tracker',\r\n                title: 'CONTROLS.SR5.OverwatchScoreTracker',\r\n                icon: 'fas fa-network-wired',\r\n            });\r\n        }\r\n    }\r\n\r\n    static renderChatMessage(app, html) {\r\n        chat.addRollListeners(app, html);\r\n    }\r\n\r\n    static renderItemDirectory(app: Application, html: JQuery) {\r\n        const button = $('<button>Import Chummer Data</button>');\r\n        html.find('footer').before(button);\r\n        button.on('click', (event) => {\r\n            new Import().render(true);\r\n        });\r\n    }\r\n}\r\n","import { WeaponImporter } from '../importer/WeaponImporter';\r\nimport { ArmorImporter } from '../importer/ArmorImporter';\r\nimport { DataImporter } from '../importer/DataImporter';\r\nimport { AmmoImporter } from '../importer/AmmoImporter';\r\nimport { ModImporter } from '../importer/ModImporter';\r\nimport { SpellImporter } from '../importer/SpellImporter';\r\nimport { QualityImporter } from '../importer/QualityImporter';\r\nimport { ComplexFormImporter } from '../importer/ComplexFormImporter';\r\nimport { WareImporter } from '../importer/WareImporter';\r\nimport { CritterPowerImporter } from '../importer/CritterPowerImporter';\r\nimport { ImportHelper, ImportMode } from '../helper/ImportHelper';\r\nimport {DeviceImporter} from \"../importer/DeviceImporter\";\r\nimport {EquipmentImporter} from \"../importer/EquipmentImporter\";\r\n\r\n\r\nexport class Import extends Application {\r\n    private supportedDataFiles: string[] = [];\r\n    private dataFiles: File[] = [];\r\n    private langDataFile: File;\r\n    private parsedFiles: string[] = [];\r\n    private disableImportButton: boolean = true;\r\n    private currentParsedFile: string;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.collectDataImporterFileSupport();\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-data-import';\r\n        options.classes = ['app', 'window-app', 'filepicker'];\r\n        options.title = 'Chummer/Data Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/compendium-import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData(options?: any): any {\r\n        const data = super.getData(options);\r\n\r\n        data.dataFiles = {};\r\n        this.supportedDataFiles.forEach((supportedFileName: string) => {\r\n            const missing = !this.dataFiles.some((dataFile) => supportedFileName === dataFile.name);\r\n            const parsed = this.parsedFiles.some((parsedFileName) => supportedFileName === parsedFileName);\r\n            const parsing = supportedFileName === this.currentParsedFile;\r\n\r\n            data.dataFiles[supportedFileName] = {\r\n                name: supportedFileName,\r\n                missing,\r\n                parsed,\r\n                parsing\r\n            };\r\n        });\r\n        data.langDataFile = this.langDataFile ? this.langDataFile.name : '';\r\n        data.finishedOverallParsing = this.supportedDataFiles.length === this.parsedFiles.length;\r\n        data.disableImportButton = this.disableImportButton;\r\n\r\n        return { ...data };\r\n    }\r\n\r\n    private collectDataImporterFileSupport() {\r\n        this.supportedDataFiles = [];\r\n        Import.Importers.forEach(importer => {\r\n            if (this.supportedDataFiles.some(supported => importer.files.includes(supported))) {\r\n                return;\r\n            }\r\n            this.supportedDataFiles = this.supportedDataFiles.concat(importer.files);\r\n        });\r\n    }\r\n\r\n    private clearParsingStatus() {\r\n        this.parsedFiles = [];\r\n    }\r\n\r\n    //Order is important, ex. some weapons need mods to fully import\r\n    static Importers: DataImporter[] = [\r\n        new ModImporter(),\r\n        new WeaponImporter(),\r\n        new ArmorImporter(),\r\n        new AmmoImporter(),\r\n        new SpellImporter(),\r\n        new ComplexFormImporter(),\r\n        new QualityImporter(),\r\n        new WareImporter(),\r\n        new CritterPowerImporter(),\r\n        new DeviceImporter(),\r\n        new EquipmentImporter()\r\n    ];\r\n\r\n    async parseXML(xmlSource, fileName) {\r\n        let jsonSource = await DataImporter.xml2json(xmlSource);\r\n        ImportHelper.SetMode(ImportMode.XML);\r\n\r\n        for (const di of Import.Importers) {\r\n            if (di.CanParse(jsonSource)) {\r\n                di.ExtractTranslation(fileName);\r\n                await di.Parse(jsonSource);\r\n            }\r\n        }\r\n    }\r\n\r\n    async parseXmli18n(xmlSource) {\r\n        if (!xmlSource) {\r\n            return;\r\n        }\r\n        let jsonSource = await DataImporter.xml2json(xmlSource);\r\n\r\n        if (DataImporter.CanParseI18n(jsonSource)) {\r\n            DataImporter.ParseTranslation(jsonSource);\r\n        }\r\n    }\r\n\r\n    isDataFile = (file: File): boolean => {\r\n        return this.supportedDataFiles.some((supported) => supported === file.name);\r\n    };\r\n\r\n    isLangDataFile = (file: File): boolean => {\r\n        const pattern = /[a-zA-Z]{2}-[a-zA-Z]{2}_data\\.xml/;\r\n        return file.name.match(pattern) !== null;\r\n    };\r\n\r\n    activateListeners(html) {\r\n        html.find(\"button[type='submit']\").on('click', async (event) => {\r\n            event.preventDefault();\r\n\r\n            this.clearParsingStatus();\r\n            this.disableImportButton = true;\r\n\r\n            await this.render();\r\n\r\n            if (this.langDataFile) {\r\n                const text = await this.langDataFile.text();\r\n                await this.parseXmli18n(text);\r\n            }\r\n\r\n            // Use 'for of'-loop to allow await to actually pause.\r\n            // don't use .forEach as it won't await for async callbacks.\r\n            // iterate over supportedDataFiles to adhere to Importer order\r\n            for (const supportedFile of this.supportedDataFiles) {\r\n                // Only try supported files.\r\n                const dataFile = this.dataFiles.find((dataFile) => dataFile.name === supportedFile);\r\n                if (dataFile) {\r\n                    const text = await dataFile.text();\r\n\r\n                     // Show status for current parsing progression.\r\n                    this.currentParsedFile = dataFile.name;\r\n                    await this.render();\r\n\r\n\r\n                    await this.parseXML(text, dataFile.name);\r\n\r\n                    // Store status to show parsing progression.\r\n                    if (!this.parsedFiles.some((parsedFileName) => parsedFileName === dataFile.name)) {\r\n                        this.parsedFiles.push(dataFile.name);\r\n                    }\r\n\r\n                    await this.render();\r\n                }\r\n            }\r\n\r\n            this.disableImportButton = false;\r\n\r\n            await this.render();\r\n        });\r\n\r\n        html.find(\"input[type='file'].langDataFileDrop\").on('change', async (event) => {\r\n            Array.from(event.target.files).forEach((file: File) => {\r\n                if (this.isLangDataFile(file)) {\r\n                    this.langDataFile = file;\r\n                    this.render();\r\n                }\r\n            });\r\n            return true;\r\n        });\r\n\r\n        html.find(\"input[type='file'].filedatadrop\").on('change', async (event) => {\r\n            Array.from(event.target.files).forEach((file: File) => {\r\n                if (this.isDataFile(file)) {\r\n                    // Allow user to overwrite an already added file, they have their reasons.\r\n                    const existingIdx = this.dataFiles.findIndex((dataFile) => dataFile.name === file.name);\r\n                    if (existingIdx === -1) {\r\n                        this.dataFiles.push(file);\r\n                    } else {\r\n                        this.dataFiles[existingIdx] = file;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.dataFiles.length > 0) {\r\n                this.disableImportButton = false;\r\n            }\r\n\r\n            this.render();\r\n        });\r\n    }\r\n}\r\n","import { Constants } from '../importer/Constants';\r\nimport { XMLStrategy } from './XMLStrategy';\r\nimport { JSONStrategy } from './JSONStrategy';\r\nimport { ImportStrategy } from './ImportStrategy';\r\n\r\nexport enum ImportMode {\r\n    XML = 1,\r\n    JSON = 2,\r\n}\r\nexport enum LookupMode {\r\n    Directory = 0,\r\n    Actor = 1,\r\n}\r\n\r\n/**\r\n * An import helper to standardize data extraction.\r\n * Mostly conceived to reduced required refactoring if Chummer changes data file layout.\r\n * Also contains helper methods to safely parse values to appropriate types.\r\n */\r\nexport class ImportHelper {\r\n    public static readonly CHAR_KEY = '_TEXT';\r\n\r\n    private static s_Strategy: ImportStrategy = new XMLStrategy();\r\n\r\n    public static SetMode(mode: ImportMode) {\r\n        switch (mode) {\r\n            case ImportMode.XML:\r\n                ImportHelper.s_Strategy = new XMLStrategy();\r\n                break;\r\n            case ImportMode.JSON:\r\n                ImportHelper.s_Strategy = new JSONStrategy();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Helper method to create a new folder.\r\n     * @param name The name of the folder.\r\n     * @param parent The parent folder.\r\n     * @returns {Promise<Folder>} A promise that resolves with the folder object when the folder is created.\r\n     */\r\n    public static async NewFolder(name: string, parent: Folder | null = null): Promise<Folder> {\r\n        return await Folder.create({\r\n            type: 'Item',\r\n            parent: parent === null ? null : parent.id,\r\n            name: name,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get a folder at a path in the items directory.\r\n     * @param path The absolute path of the folder.\r\n     * @param mkdirs If true, will make all folders along the hierarchy if they do not exist.\r\n     * @returns A promise that will resolve with the found folder.\r\n     */\r\n    public static async GetFolderAtPath(path: string, mkdirs: boolean = false): Promise<Entity> {\r\n        let idx = 0;\r\n        let curr,\r\n            last = null;\r\n        let next = path.split('/');\r\n        while (idx < next.length) {\r\n            // @ts-ignore // TODO: foundry-pc-type defines Folder without parent property, but it does exist.\r\n            curr = game.folders.find((folder) => folder.parent === last && folder.name === next[idx]);\r\n            if (curr === null) {\r\n                if (!mkdirs) {\r\n                    return Promise.reject(`Unable to find folder: ${path}`);\r\n                }\r\n\r\n                curr = await ImportHelper.NewFolder(next[idx], last);\r\n            }\r\n            last = curr;\r\n            idx++;\r\n        }\r\n        return Promise.resolve(curr);\r\n    }\r\n\r\n    /**\r\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found\r\n     * or is unable to be parsed to an integer.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static IntValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        return ImportHelper.s_Strategy.intValue(jsonData, key, fallback);\r\n    }\r\n\r\n    /**\r\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static StringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        return ImportHelper.s_Strategy.stringValue(jsonData, key, fallback);\r\n    }\r\n\r\n    /**\r\n     * Get an object from the the provided jsonData, optionally returning a default value if it is not found.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static ObjectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        return ImportHelper.s_Strategy.objectValue(jsonData, key, fallback);\r\n    }\r\n\r\n    //TODO\r\n    public static findItem(nameOrCmp: string | ItemComparer): Entity {\r\n        let result: any | null;\r\n        if (typeof nameOrCmp === 'string') {\r\n            result = game.items.find((item) => item.name == nameOrCmp);\r\n        } else {\r\n            result = game.items.find(nameOrCmp);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static TranslateCategory(name, jsonCategoryTranslations?) {\r\n        if (jsonCategoryTranslations && jsonCategoryTranslations.hasOwnProperty(name)) {\r\n            return jsonCategoryTranslations[name];\r\n        }\r\n\r\n        return name;\r\n    }\r\n    //TODO\r\n    public static async MakeCategoryFolders(\r\n        jsonData: object,\r\n        path: string,\r\n        jsonCategoryTranslations?: object | undefined,\r\n    ): Promise<{ [name: string]: Folder }> {\r\n        let folders = {};\r\n        let jsonCategories = jsonData['categories']['category'];\r\n\r\n        for (let i = 0; i < jsonCategories.length; i++) {\r\n            let categoryName = jsonCategories[i][ImportHelper.CHAR_KEY];\r\n            // use untranslated category name for easier mapping during DataImporter.Parse implementations.\r\n            let origCategoryName = categoryName;\r\n            categoryName = ImportHelper.TranslateCategory(categoryName, jsonCategoryTranslations);\r\n            folders[origCategoryName.toLowerCase()] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${path}/${categoryName}`, true);\r\n        }\r\n\r\n        return folders;\r\n    }\r\n\r\n    /** Extract the correct <chummer file=\"${dataFileName}>[...]</chummer> element from xx-xx_data.xml translations.\r\n     *\r\n     * @param jsoni18n\r\n     * @param dataFileName Expected translation target file name\r\n     */\r\n    public static ExtractDataFileTranslation(jsoni18n, dataFileName): object {\r\n        for (let i = 0; i < jsoni18n.length; i++) {\r\n            const translation = jsoni18n[i];\r\n            if (translation.$.file === dataFileName) {\r\n                return translation;\r\n            }\r\n        }\r\n        return {};\r\n    }\r\n\r\n    /** Extract categories translations within xx-xx_data.xml <chummer/> translation subset.\r\n     *\r\n     *  Note: Not all file translations provide categories.\r\n     *\r\n     * @param jsonChummeri18n Translations as given by ExtractDataFileTranslations\r\n     */\r\n    public static ExtractCategoriesTranslation(jsonChummeri18n) {\r\n        const categoryTranslations = {};\r\n        if (jsonChummeri18n && jsonChummeri18n.hasOwnProperty('categories')) {\r\n            jsonChummeri18n.categories.category.forEach((category) => {\r\n                const name = category[ImportHelper.CHAR_KEY];\r\n                const translate = category.$.translate;\r\n                categoryTranslations[name] = translate;\r\n            });\r\n        }\r\n        return categoryTranslations;\r\n    }\r\n\r\n    /** Extract item type translations within xx-xx_data.xml <chummer/> translation subset.\r\n     *\r\n     * @param jsonItemsi18n Translations as given by ExtractDataFileTranslations\r\n     * @param typeKey The item type to translate. Tends to be plural.\r\n     * @param listKey The item to translate. Tends to be singular.\r\n     */\r\n    public static ExtractItemTranslation(jsonItemsi18n, typeKey, listKey) {\r\n        const itemTranslation = {};\r\n        if (jsonItemsi18n && jsonItemsi18n[typeKey] && jsonItemsi18n[typeKey][listKey] && jsonItemsi18n[typeKey][listKey].length > 0) {\r\n            jsonItemsi18n[typeKey][listKey].forEach((item) => {\r\n                const name = item.name[ImportHelper.CHAR_KEY];\r\n                const translate = item.translate[ImportHelper.CHAR_KEY];\r\n                const altpage = item.altpage[ImportHelper.CHAR_KEY];\r\n                itemTranslation[name] = { translate, altpage };\r\n            });\r\n        }\r\n\r\n        return itemTranslation;\r\n    }\r\n\r\n    static MapNameToTranslationKey(translationMap, name, key, fallbackValue = ''): string {\r\n        if (translationMap && translationMap.hasOwnProperty(name) && translationMap[name].hasOwnProperty(key)) {\r\n            return translationMap[name][key];\r\n        }\r\n\r\n        return fallbackValue;\r\n    }\r\n\r\n    public static MapNameToTranslation(translationMap, name): string {\r\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'translate', name);\r\n    }\r\n\r\n    public static MapNameToPageSource(translationMap, name, fallback='?'): string {\r\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'altpage', fallback);\r\n    }\r\n}\r\nexport type ItemComparer = (item: Item) => boolean;\r\n","export abstract class ImportStrategy {\r\n    public abstract intValue(jsonData: object, key: string, fallback: number | undefined): number;\r\n    public abstract stringValue(jsonData: object, key: string | number, fallback: string | undefined): string;\r\n    public abstract objectValue(jsonData: object, key: string | number, fallback: object | null | undefined): object | null;\r\n}\r\nexport type ItemComparer = (item: Item) => boolean;\r\n","import { ImportStrategy } from './ImportStrategy';\r\n\r\nexport class JSONStrategy extends ImportStrategy {\r\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        throw new Error('Unimplemented');\r\n    }\r\n\r\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        throw new Error('Unimplemented');\r\n    }\r\n\r\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        throw new Error('Unimplemented');\r\n    }\r\n}\r\n","import { ImportHelper } from './ImportHelper';\r\nimport { ImportStrategy } from './ImportStrategy';\r\n\r\nexport class XMLStrategy extends ImportStrategy {\r\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        try {\r\n            return parseInt(jsonData[key][ImportHelper.CHAR_KEY]);\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        try {\r\n            return jsonData[key][ImportHelper.CHAR_KEY];\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        try {\r\n            return jsonData[key];\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport Ammo = Shadowrun.Ammo;\r\nimport WeaponData = Shadowrun.WeaponData;\r\n\r\nexport class AmmoImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData(): Ammo {\r\n        return {\r\n            name: '',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'ammo',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    wireless: true\r\n                },\r\n\r\n                element: '',\r\n                ap: 0,\r\n                damage: 0,\r\n                damageType: 'physical',\r\n                blast: {\r\n                    radius: 0,\r\n                    dropoff: 0,\r\n                },\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        let ammoDatas: Ammo[] = [];\r\n        let jsonAmmos = jsonObject['gears']['gear'];\r\n        for (let i = 0; i < jsonAmmos.length; i++) {\r\n            let jsonData = jsonAmmos[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            if (ImportHelper.StringValue(jsonData, 'category', '') !== 'Ammunition') {\r\n                continue;\r\n            }\r\n\r\n            let data = this.GetDefaultData();\r\n            data.name = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\r\n\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n            data.data.technology.rating = 2;\r\n            data.data.technology.availability = ImportHelper.StringValue(jsonData, 'avail');\r\n            data.data.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\r\n\r\n            let bonusData = ImportHelper.ObjectValue(jsonData, 'weaponbonus', null);\r\n            if (bonusData !== undefined && bonusData !== null) {\r\n                data.data.ap = ImportHelper.IntValue(bonusData, 'ap', 0);\r\n                data.data.damage = ImportHelper.IntValue(bonusData, 'damage', 0);\r\n\r\n                let damageType = ImportHelper.StringValue(bonusData, 'damagetype', '');\r\n                if (damageType.length > 0) {\r\n                    if (damageType.includes('P')) {\r\n                        data.data.damageType = 'physical';\r\n                    } else if (damageType.includes('S')) {\r\n                        data.data.damageType = 'stun';\r\n                    } else if (damageType.includes('M')) {\r\n                        data.data.damageType = 'matrix';\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shouldLookForWeapons = false;\r\n            let nameLower = data.name.toLowerCase();\r\n            ['grenade', 'rocket', 'missile'].forEach((compare) => {\r\n                shouldLookForWeapons = shouldLookForWeapons || nameLower.includes(compare);\r\n            });\r\n            // NOTE: Should either weapons or gear not have been imported with translation, this will fail.\r\n            if (shouldLookForWeapons) {\r\n                let foundWeapon = ImportHelper.findItem((item) => {\r\n                    // Filter for weapon type due to possible double naming giving other item types.\r\n                    return item.type === 'weapon' && item.name.toLowerCase() === nameLower;\r\n                });\r\n\r\n                if (foundWeapon !== null && \"action\" in foundWeapon.data.data) {\r\n                    console.log(foundWeapon);\r\n\r\n                    const weaponData = foundWeapon.data.data as WeaponData;\r\n                    data.data.damage = weaponData.action.damage.value;\r\n                    data.data.ap =weaponData.action.damage.ap.value;\r\n                }\r\n            }\r\n\r\n            // ammo doesn't have conceal rating from looking at the data\r\n            // data.data.technology.conceal.base = ImportHelper.intValue(jsonData, \"conceal\");\r\n            data.data.technology.conceal.base = 0;\r\n\r\n            ammoDatas.push(data);\r\n        }\r\n\r\n        for (let i = 0; i < ammoDatas.length; i++) {\r\n            let folderName = 'Misc';\r\n            let ammo = ammoDatas[i];\r\n\r\n            let splitName = ammo.name.split(':');\r\n            if (splitName.length > 1) {\r\n                folderName = splitName[0].trim();\r\n            }\r\n\r\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Ammo/${folderName}`, true);\r\n\r\n            ammo.folder = folder.id;\r\n        }\r\n\r\n        return await Item.create(ammoDatas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport Armor = Shadowrun.Armor;\r\nimport { ArmorParserBase } from '../parser/armor/ArmorParserBase';\r\n\r\nexport class ArmorImporter extends DataImporter {\r\n    public armorTranslations: any;\r\n    public categoryTranslations: any;\r\n    public files = ['armor.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('armors') && jsonObject['armors'].hasOwnProperty('armor');\r\n    }\r\n\r\n    GetDefaultData(): Armor {\r\n        return {\r\n            name: 'Unnamed Armor',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'armor',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    wireless: true\r\n                },\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonArmori18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonArmori18n);\r\n        this.armorTranslations = ImportHelper.ExtractItemTranslation(jsonArmori18n, 'armors', 'armor');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Armor', this.categoryTranslations);\r\n\r\n        const parser = new ArmorParserBase();\r\n\r\n        let datas: Armor[] = [];\r\n        let jsonDatas = jsonObject['armors']['armor'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData());\r\n            const category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\r\n            data.name = ImportHelper.MapNameToTranslation(this.armorTranslations, data.name);\r\n            data.folder = folders[category].id;\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { ComplexFormParserBase } from '../parser/complex-form/ComplexFormParserBase';\r\nimport ComplexForm = Shadowrun.ComplexForm;\r\nimport {DeviceImporter} from \"./DeviceImporter\";\r\n\r\nexport class ComplexFormImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public nameTranslations: any;\r\n    public files = ['complexforms.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('complexforms') && jsonObject['complexforms'].hasOwnProperty('complexform');\r\n    }\r\n\r\n    GetDefaultData(): ComplexForm {\r\n        return {\r\n            name: 'Unnamed Form',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'complex_form',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: {\r\n                    type: 'complex',\r\n                    category: '',\r\n                    attribute: 'resonance',\r\n                    attribute2: '',\r\n                    skill: 'compiling',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: 'physical',\r\n                            value: 'physical',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: 'defense',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                target: '',\r\n                duration: '',\r\n                fade: 0,\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        // Complexforms don't provide a category translation.\r\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.nameTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, 'complexforms', 'complexform');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const parser = new ComplexFormParserBase();\r\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Complex Forms`, true);\r\n\r\n        let datas: ComplexForm[] = [];\r\n        let jsonDatas = jsonObject['complexforms']['complexform'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.nameTranslations);\r\n            data.folder = folder.id;\r\n\r\n            // TODO: Follow ComplexFormParserBase approach.\r\n            data.name = ImportHelper.MapNameToTranslation(this.nameTranslations, data.name);\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","export class Constants {\r\n    public static readonly MAP_CATEGORY_TO_SKILL = {\r\n        'Assault Cannons': 'heavy_weapons',\r\n        'Assault Rifles': 'automatics',\r\n        'Blades': 'blades',\r\n        'Bows': 'archery',\r\n        'Carbines': 'automatics',\r\n        'Clubs': 'clubs',\r\n        'Crossbows': 'archery',\r\n        'Exotic Melee Weapons': 'exotic_melee',\r\n        'Exotic Ranged Weapons': 'exotic_ranged',\r\n        'Flamethrowers': 'exotic_ranged',\r\n        'Grenade Launchers': 'heavy_weapons',\r\n        'Heavy Machine Guns': 'heavy_weapons',\r\n        'Heavy Pistols': 'pistols',\r\n        'Holdouts': 'pistols',\r\n        'Laser Weapons': 'exotic_ranged',\r\n        'Light Machine Guns': 'heavy_weapons',\r\n        'Light Pistols': 'pistols',\r\n        'Machine Pistols': 'automatics',\r\n        'Medium Machine Guns': 'automatics',\r\n        'Missile Launchers': 'heavy_weapons',\r\n        'Shotguns': 'longarms',\r\n        'Sniper Rifles': 'longarms',\r\n        'Sporting Rifles': 'longarms',\r\n        'Submachine Guns': 'automatics',\r\n        'Tasers': 'pistols',\r\n        'Unarmed': 'unarmed_combat',\r\n    };\r\n    public static readonly WEAPON_RANGES = {\r\n        'Tasers': {\r\n            short: 5,\r\n            medium: 10,\r\n            long: 15,\r\n            extreme: 20,\r\n        },\r\n        'Holdouts': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Light Pistols': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Heavy Pistols': {\r\n            short: 5,\r\n            medium: 20,\r\n            long: 40,\r\n            extreme: 60,\r\n        },\r\n        'Machine Pistols': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Submachine Guns': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Assault Rifles': {\r\n            short: 25,\r\n            medium: 150,\r\n            long: 350,\r\n            extreme: 550,\r\n        },\r\n        'Shotguns': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Shotguns (slug)': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Shotguns (flechette)': {\r\n            short: 15,\r\n            medium: 30,\r\n            long: 45,\r\n            extreme: 60,\r\n        },\r\n        'Sniper Rifles': {\r\n            short: 50,\r\n            medium: 350,\r\n            long: 800,\r\n            extreme: 1500,\r\n        },\r\n        'Sporting Rifles': {\r\n            short: 50,\r\n            medium: 250,\r\n            long: 500,\r\n            extreme: 750,\r\n        },\r\n        'Light Machine Guns': {\r\n            short: 25,\r\n            medium: 200,\r\n            long: 400,\r\n            extreme: 800,\r\n        },\r\n        'Medium/Heavy Machinegun': {\r\n            short: 40,\r\n            medium: 250,\r\n            long: 750,\r\n            extreme: 1200,\r\n        },\r\n        'Assault Cannons': {\r\n            short: 50,\r\n            medium: 300,\r\n            long: 750,\r\n            extreme: 1500,\r\n        },\r\n        'Grenade Launchers': {\r\n            min: 5,\r\n            short: 50,\r\n            medium: 100,\r\n            long: 150,\r\n            extreme: 500,\r\n        },\r\n        'Missile Launchers': {\r\n            min: 20,\r\n            short: 70,\r\n            medium: 150,\r\n            long: 450,\r\n            extreme: 1500,\r\n        },\r\n        'Bows': {\r\n            short: 1,\r\n            medium: 10,\r\n            long: 30,\r\n            extreme: 60,\r\n            attribute: 'strength',\r\n        },\r\n        'Light Crossbows': {\r\n            short: 6,\r\n            medium: 24,\r\n            long: 60,\r\n            extreme: 120,\r\n        },\r\n        'Medium Crossbows': {\r\n            short: 9,\r\n            medium: 36,\r\n            long: 90,\r\n            extreme: 150,\r\n        },\r\n        'Heavy Crossbows': {\r\n            short: 15,\r\n            medium: 45,\r\n            long: 120,\r\n            extreme: 180,\r\n        },\r\n        'Thrown Knife': {\r\n            short: 1,\r\n            medium: 2,\r\n            long: 3,\r\n            extreme: 5,\r\n            attribute: 'strength',\r\n        },\r\n        'Net': {\r\n            short: 0.5,\r\n            medium: 1,\r\n            long: 1.5,\r\n            extreme: 2.5,\r\n            attribute: 'strength',\r\n        },\r\n        'Shuriken': {\r\n            short: 1,\r\n            medium: 2,\r\n            long: 5,\r\n            extreme: 7,\r\n            attribute: 'strength',\r\n        },\r\n        'Standard Grenade': {\r\n            short: 2,\r\n            medium: 4,\r\n            long: 6,\r\n            extreme: 10,\r\n            attribute: 'strength',\r\n        },\r\n        'Aerodynamic Grenade': {\r\n            min: 0,\r\n            short: 2,\r\n            medium: 4,\r\n            long: 8,\r\n            extreme: 15,\r\n            attribute: 'strength',\r\n        },\r\n        'Harpoon Gun': {\r\n            short: 5,\r\n            medium: 20,\r\n            long: 40,\r\n            extreme: 60,\r\n        },\r\n        'Harpoon Gun (Underwater)': {\r\n            short: 6,\r\n            medium: 24,\r\n            long: 60,\r\n            extreme: 120,\r\n        },\r\n        'Flamethrowers': {\r\n            short: 15,\r\n            medium: 20,\r\n            long: -1,\r\n            extreme: -1,\r\n        },\r\n    };\r\n\r\n    public static readonly ROOT_IMPORT_FOLDER_NAME = 'SR5e';\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport CritterPower = Shadowrun.CritterPower;\r\nimport { CritterPowerParserBase } from '../parser/critter-power/CritterPowerParserBase';\r\nimport { ParserMap } from '../parser/ParserMap';\r\nimport { Constants } from './Constants';\r\n\r\nexport class CritterPowerImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['critterpowers.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('powers') && jsonObject['powers'].hasOwnProperty('power');\r\n    }\r\n\r\n    GetDefaultData(): CritterPower {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'critter_power',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n                category: '',\r\n                powerType: '',\r\n                range: '',\r\n                duration: '',\r\n                karma: 0,\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonCritterPoweri18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonCritterPoweri18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonCritterPoweri18n, 'powers', 'power');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n      const parser = new CritterPowerParserBase();\r\n      const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Critter Powers`, true);\r\n\r\n      let datas: CritterPower[] = [];\r\n      let jsonDatas = jsonObject['powers']['power'];\r\n      for (let i = 0; i < jsonDatas.length; i++) {\r\n          let jsonData = jsonDatas[i];\r\n\r\n          let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n          data.folder = folder.id;\r\n          data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\r\n\r\n          datas.push(data);\r\n      }\r\n\r\n      return await Item.create(datas);\r\n    }\r\n}\r\n","import { ImportHelper } from '../helper/ImportHelper';\r\n\r\nconst xml2js = require('xml2js');\r\n\r\nexport abstract class DataImporter {\r\n    public abstract files: string[];\r\n    public static jsoni18n: any;\r\n    public categoryTranslations: any;\r\n    public entryTranslations: any;\r\n    public static unsupportedBooks: string[] = ['2050'];\r\n\r\n    /**\r\n     * Get default data for constructing a TItem.\r\n     */\r\n    public abstract GetDefaultData(): any;\r\n\r\n    /**\r\n     *\r\n     * @param jsonObject JSON Data with all data translations for one language.\r\n     */\r\n    public static CanParseI18n(jsonObject: any): boolean {\r\n        return jsonObject.hasOwnProperty('chummer') && jsonObject.chummer.length > 0 && jsonObject.chummer[0].$.hasOwnProperty('file');\r\n    }\r\n\r\n    /**\r\n     * Stores translations as a whole for all implementing classes to extract from without reparsing.\r\n     * @param jsonObject JSON Data with all data translations for one language.\r\n     */\r\n    public static ParseTranslation(jsonObject: object) {\r\n        if (jsonObject && jsonObject.hasOwnProperty('chummer')) {\r\n            DataImporter.jsoni18n = jsonObject['chummer'];\r\n        }\r\n    }\r\n    /**\r\n     * Implementing classes can use ExtractTranslation to only extract needed translations.\r\n     */\r\n    public abstract ExtractTranslation(fileName?: string);\r\n\r\n    /**\r\n     * Validate if this importer is capable of parsing the provided JSON data.\r\n     * @param jsonObject JSON data to check import capability for.\r\n     * @returns boolean True if the importer is capable of parsing the provided XML data.\r\n     */\r\n    public abstract CanParse(jsonObject: object): boolean;\r\n\r\n    /**\r\n     * Parse the specified jsonObject and return Item representations.\r\n     * @param jsonObject The JSON data to parse.\r\n     * @returns An array of created objects.\r\n     */\r\n    public abstract async Parse(jsonObject: object): Promise<Entity>;\r\n\r\n    /**\r\n     * Parse an XML string into a JSON object.\r\n     * @param xmlString The string to parse as XML.\r\n     * @returns A json object converted from the string.\r\n     */\r\n    public static async xml2json(xmlString: string): Promise<object> {\r\n        const parser = xml2js.Parser({\r\n            explicitArray: false,\r\n            explicitCharkey: true,\r\n            charkey: ImportHelper.CHAR_KEY,\r\n        });\r\n\r\n        return (await parser.parseStringPromise(xmlString))['chummer'];\r\n    }\r\n\r\n    public static unsupportedBookSource(jsonObject) {\r\n        if (!jsonObject.hasOwnProperty('source')) return false;\r\n        const source = ImportHelper.StringValue(jsonObject, 'source', '');\r\n        return DataImporter.unsupportedBooks.includes(source);\r\n    }\r\n\r\n    public static unsupportedEntry(jsonObject) {\r\n        if (DataImporter.unsupportedBookSource(jsonObject)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","import {DataImporter} from \"./DataImporter\";\r\nimport {ImportHelper} from \"../helper/ImportHelper\";\r\nimport {Constants} from \"./Constants\";\r\n\r\nexport class DeviceImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData() {\r\n        return {\r\n            name: '',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'device',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                },\r\n                category: 'commlink',\r\n                \"atts\": {\r\n                    \"att1\": {\r\n                        \"value\": 0,\r\n                        \"att\": \"attack\"\r\n                    },\r\n                    \"att2\": {\r\n                        \"value\": 0,\r\n                        \"att\": \"sleaze\"\r\n                    },\r\n                    \"att3\": {\r\n                        \"value\": 0,\r\n                        \"att\": \"data_processing\"\r\n                    },\r\n                    \"att4\": {\r\n                        \"value\": 0,\r\n                        \"att\": \"firewall\"\r\n                    }\r\n                },\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation(fileName?: string) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    ParseCommlinkDevices(commlinks, folder) {\r\n        const entries = [];\r\n\r\n        for (const commlink of commlinks) {\r\n            if (DataImporter.unsupportedEntry(commlink)) {\r\n                continue;\r\n            }\r\n            const data = this.GetDefaultData();\r\n\r\n            data.name = ImportHelper.StringValue(commlink, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\r\n\r\n            data.data.description.source = `${ImportHelper.StringValue(commlink, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(commlink, 'name'), ImportHelper.StringValue(commlink, 'page'))}`;\r\n            data.data.technology.rating = ImportHelper.IntValue(commlink, 'devicerating', 0);\r\n            data.data.technology.availability = ImportHelper.StringValue(commlink, 'avail');\r\n            data.data.technology.cost = ImportHelper.IntValue(commlink, 'cost', 0);\r\n            data.data.atts.att3.value = ImportHelper.IntValue(commlink, 'dataprocessing', 0);\r\n            data.data.atts.att4.value = ImportHelper.IntValue(commlink, 'firewall', 0);\r\n\r\n            //@ts-ignore\r\n            data.folder = folder.id;\r\n            //@ts-ignore\r\n            entries.push(data);\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    ParseCyberdeckDevices(cyberdecks, folder) {\r\n        const entries = [];\r\n\r\n        for (const cyberdeck of cyberdecks) {\r\n            if (DataImporter.unsupportedEntry(cyberdeck)) {\r\n                continue;\r\n            }\r\n\r\n            const data = this.GetDefaultData();\r\n\r\n            data.data.category = 'cyberdeck';\r\n            data.name = ImportHelper.StringValue(cyberdeck, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\r\n\r\n            data.data.description.source = `${ImportHelper.StringValue(cyberdeck, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(cyberdeck, 'name'), ImportHelper.StringValue(cyberdeck, 'page'))}`;\r\n            data.data.technology.rating = ImportHelper.IntValue(cyberdeck, 'devicerating', 0);\r\n            data.data.technology.availability = ImportHelper.StringValue(cyberdeck, 'avail');\r\n            data.data.technology.cost = ImportHelper.IntValue(cyberdeck, 'cost', 0);\r\n\r\n            // Some cyberdecks have a flexible attribute order\r\n            // attributearray is a ',' separated list of values. Since it's hacky, be very unforgiving.\r\n            if (cyberdeck.hasOwnProperty('attributearray')) {\r\n                const attributeOrder = ImportHelper.StringValue(cyberdeck, 'attributearray').split(',');\r\n                const att1 = Number(attributeOrder[0]);\r\n                const att2 = Number(attributeOrder[1]);\r\n                const att3 = Number(attributeOrder[2]);\r\n                const att4 = Number(attributeOrder[3]);\r\n                data.data.atts.att1.value = att1;\r\n                data.data.atts.att2.value = att2;\r\n                data.data.atts.att3.value = att3;\r\n                data.data.atts.att4.value = att4;\r\n\r\n            // Some cyberdecks have a fixed attribute order\r\n            } else if (cyberdeck.hasOwnProperty('attack')) {\r\n                data.data.atts.att1.value = ImportHelper.IntValue(cyberdeck, 'attack', 0);\r\n                data.data.atts.att2.value = ImportHelper.IntValue(cyberdeck, 'sleaze', 0);\r\n                data.data.atts.att3.value = ImportHelper.IntValue(cyberdeck, 'dataprocessing', 0);\r\n                data.data.atts.att4.value = ImportHelper.IntValue(cyberdeck, 'firewall', 0);\r\n            }\r\n\r\n            //@ts-ignore\r\n            data.folder = folder.id;\r\n            //@ts-ignore\r\n            entries.push(data);\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        let entries = [];\r\n        const commlinks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Commlinks');\r\n        const cyberdecks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Cyberdecks');\r\n\r\n        let commlinksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCommlink')}`, true);\r\n        let cyberdecksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCyberdeck')}`, true);\r\n\r\n        entries = entries.concat(this.ParseCommlinkDevices(commlinks, commlinksFolder));\r\n        entries = entries.concat(this.ParseCyberdeckDevices(cyberdecks, cyberdecksFolder));\r\n\r\n        return await Item.create(entries)\r\n    }\r\n\r\n    /* List of unsupported Commlinks, due to dynamics value calculations.\r\n     */\r\n    static unsupportedEntry(jsonData): boolean {\r\n        if (DataImporter.unsupportedEntry(jsonData)) {\r\n            return true;\r\n        }\r\n\r\n        const unsupportedIds = [\r\n            'd63eb841-7b15-4539-9026-b90a4924aeeb',  // Dynamic rating value.\r\n        ];\r\n        return unsupportedIds.includes(ImportHelper.StringValue(jsonData, 'id'));\r\n    }\r\n}","import {DataImporter} from \"./DataImporter\";\r\nimport {ImportHelper} from \"../helper/ImportHelper\";\r\nimport {Constants} from \"./Constants\";\r\n\r\nexport class EquipmentImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData() {\r\n        return {\r\n            name: '',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'equipment',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                }\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation(fileName?: string) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    async ParseEquipments(equipments) {\r\n        const entries = [];\r\n\r\n        for (const equipment of equipments) {\r\n            if (DataImporter.unsupportedEntry(equipment)) {\r\n                continue;\r\n            }\r\n\r\n            // Replace / as it's used as a separator in GetFolderAtPath.\r\n            const category = ImportHelper.TranslateCategory(ImportHelper.StringValue(equipment, 'category'), this.categoryTranslations).replace('/', ' ');\r\n            let categoryFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.Gear')}/${category}`, true);\r\n\r\n            const data = this.GetDefaultData();\r\n            data.name = ImportHelper.StringValue(equipment, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\r\n\r\n            data.data.description.source = `${ImportHelper.StringValue(equipment, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(equipment, 'name'), ImportHelper.StringValue(equipment, 'page'))}`;\r\n            data.data.technology.rating = ImportHelper.IntValue(equipment, 'rating', 0);\r\n            data.data.technology.availability = ImportHelper.StringValue(equipment, 'avail');\r\n            data.data.technology.cost = ImportHelper.IntValue(equipment, 'cost', 0);\r\n\r\n            //@ts-ignore\r\n            data.folder = categoryFolder.id;\r\n            //@ts-ignore\r\n            entries.push(data);\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    FilterJsonObjects(jsonObject) {\r\n        const unsupportedCategories = [\r\n            'Ammunition',\r\n            'Commlinks',\r\n            'Cyberdecks',\r\n            'Hacking Programs',\r\n            'Rigger Command Consoles',\r\n            'Custom'\r\n        ]\r\n\r\n        return jsonObject['gears']['gear'].filter(gear => !unsupportedCategories.includes(ImportHelper.StringValue(gear, 'category', '')));\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const equipments = this.FilterJsonObjects(jsonObject);\r\n\r\n        const entries = await this.ParseEquipments(equipments);\r\n\r\n        return await Item.create(entries);\r\n    }\r\n}","import { DataImporter } from './DataImporter';\r\nimport Mod = Shadowrun.Modification;\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { ModParserBase } from '../parser/mod/ModParserBase';\r\n\r\nexport class ModImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public accessoryTranslations: any;\r\n    public files = ['weapons.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('accessories') && jsonObject['accessories'].hasOwnProperty('accessory');\r\n    }\r\n\r\n    GetDefaultData(): Mod {\r\n        return {\r\n            name: '',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'modification',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    wireless: true\r\n                },\r\n                type: '',\r\n                mount_point: '',\r\n                dice_pool: 0,\r\n                accuracy: 0,\r\n                rc: 0,\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonWeaponsi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        // Parts of weapon accessory translations are within the application translation. Currently only data translation is used.\r\n        this.accessoryTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponsi18n, 'accessories', 'accessory');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const parser = new ModParserBase();\r\n\r\n        let datas: Mod[] = [];\r\n        let jsonDatas = jsonObject['accessories']['accessory'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData());\r\n            // TODO: Integrate into ModParserBase approach.\r\n            data.name = ImportHelper.MapNameToTranslation(this.accessoryTranslations, data.name);\r\n            //TODO: Test this\r\n\r\n            let folderName = data.data.mount_point !== undefined ? data.data.mount_point : 'Other';\r\n            if (folderName.includes('/')) {\r\n                let splitName = folderName.split('/');\r\n                folderName = splitName[0];\r\n            }\r\n\r\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Mods/${folderName}`, true);\r\n            data.folder = folder.id;\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { QualityParserBase } from '../parser/quality/QualityParserBase';\r\nimport Quality = Shadowrun.Quality;\r\nimport {DeviceImporter} from \"./DeviceImporter\";\r\n\r\nexport class QualityImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['qualities.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('qualities') && jsonObject['qualities'].hasOwnProperty('quality');\r\n    }\r\n\r\n    GetDefaultData(): Quality {\r\n        return {\r\n            name: 'Unnamed Armor',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'quality',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                type: '',\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonQualityi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonQualityi18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonQualityi18n, 'qualities', 'quality');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const jsonNameTranslations = {};\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Qualities', this.categoryTranslations);\r\n        console.log(folders);\r\n\r\n        const parser = new QualityParserBase();\r\n\r\n        let datas: Quality[] = [];\r\n        let jsonDatas = jsonObject['qualities']['quality'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n\r\n            let category = ImportHelper.StringValue(jsonData, 'category');\r\n            data.folder = folders[category.toLowerCase()].id;\r\n            data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport Spell = Shadowrun.Spell;\r\nimport { SpellParserBase } from '../parser/spell/SpellParserBase';\r\nimport { CombatSpellParser } from '../parser/spell/CombatSpellParser';\r\nimport { ManipulationSpellParser } from '../parser/spell/ManipulationSpellParser';\r\nimport { IllusionSpellParser } from '../parser/spell/IllusionSpellParser';\r\nimport { DetectionSpellImporter } from '../parser/spell/DetectionSpellImporter';\r\nimport { ParserMap } from '../parser/ParserMap';\r\nimport {DeviceImporter} from \"./DeviceImporter\";\r\n\r\nexport class SpellImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['spells.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('spells') && jsonObject['spells'].hasOwnProperty('spell');\r\n    }\r\n\r\n    GetDefaultData(): Spell {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'spell',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: {\r\n                    type: 'varies',\r\n                    category: '',\r\n                    attribute: 'magic',\r\n                    attribute2: '',\r\n                    skill: 'spellcasting',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                drain: 0,\r\n                category: '',\r\n                type: '',\r\n                range: '',\r\n                duration: '',\r\n                combat: {\r\n                    type: '',\r\n                },\r\n                detection: {\r\n                    passive: false,\r\n                    type: '',\r\n                    extended: false,\r\n                },\r\n                illusion: {\r\n                    type: '',\r\n                    sense: '',\r\n                },\r\n                manipulation: {\r\n                    damaging: false,\r\n                    mental: false,\r\n                    environmental: false,\r\n                    physical: false,\r\n                },\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonSpelli18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonSpelli18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonSpelli18n, 'spells', 'spell');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Spells', this.categoryTranslations);\r\n\r\n        const parser = new ParserMap<Spell>('category', [\r\n            { key: 'Combat', value: new CombatSpellParser() },\r\n            { key: 'Manipulation', value: new ManipulationSpellParser() },\r\n            { key: 'Illusion', value: new IllusionSpellParser() },\r\n            { key: 'Detection', value: new DetectionSpellImporter() },\r\n            { key: 'Health', value: new SpellParserBase() },\r\n            { key: 'Enchantments', value: new SpellParserBase() },\r\n            { key: 'Rituals', value: new SpellParserBase() },\r\n        ]);\r\n\r\n        let datas: Spell[] = [];\r\n        let jsonDatas = jsonObject['spells']['spell'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n            data.folder = folders[data.data.category].id;\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { CyberwareParser } from '../parser/ware/CyberwareParser';\r\nimport Ware = Shadowrun.Ware;\r\nimport Cyberware = Shadowrun.Cyberware;\r\n\r\nexport class WareImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['cyberware.xml', 'bioware.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('cyberwares') && jsonObject['cyberwares'].hasOwnProperty('cyberware') ||\r\n               jsonObject.hasOwnProperty('biowares') && jsonObject['biowares'].hasOwnProperty('bioware');\r\n    }\r\n\r\n    GetDefaultCyberwareData(): Cyberware {\r\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\r\n        return {...this.GetDefaultData(), type: 'cyberware'};\r\n    }\r\n\r\n    GetDefaultBiowareData(): Cyberware {\r\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\r\n        return {...this.GetDefaultData(), type: 'bioware'};\r\n    }\r\n\r\n    GetDefaultData(): Ware {\r\n        return {\r\n            name: 'Unnamed Form',\r\n            type: 'cyberware',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    wireless: true\r\n                },\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n                action: {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                grade: 'standard',\r\n                essence: 0,\r\n                capacity: 0,\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n    ExtractTranslation(fileName) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, fileName);\r\n         // TODO: Move ExtractTranslation phase before the parsing phase and initiate it with the filename to parse.\r\n            if (this.files.length !== 2) console.error('Lazily hacked code will fail for more or less than two files.');\r\n\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonItemi18n);\r\n\r\n        const {typeKey, listKey} = fileName === 'cyberware.xml' ?\r\n                {typeKey: 'cyberwares', listKey: 'cyberware'} :\r\n                {typeKey: 'biowares', listKey: 'bioware'};\r\n\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, typeKey, listKey);\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const cyberParser = new CyberwareParser();\r\n\r\n        let key = jsonObject.hasOwnProperty('cyberwares') ? 'Cyberware' : 'Bioware';\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, key);\r\n\r\n        key = key.toLowerCase();\r\n        let datas: Ware[] = [];\r\n        let jsonDatas = jsonObject[key + 's'][key];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            const defaultData = key === 'cyberware' ? this.GetDefaultCyberwareData() : this.GetDefaultBiowareData();\r\n            let data = cyberParser.Parse(jsonData, defaultData, this.itemTranslations);\r\n            const category = ImportHelper.StringValue(jsonData, 'category');\r\n\r\n            // TODO: Does this type mixture cause later issues? Will it carry over?\r\n            //@ts-ignore\r\n            data.folder = folders[category.toLowerCase()].id;\r\n\r\n            // // TODO: Follow ComplexFormParserBase approach.\r\n            // data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { RangedParser } from '../parser/weapon/RangedParser';\r\nimport { MeleeParser } from '../parser/weapon/MeleeParser';\r\nimport { ThrownParser } from '../parser/weapon/ThrownParser';\r\nimport { ParserMap } from '../parser/ParserMap';\r\nimport Weapon = Shadowrun.Weapon;\r\nimport { WeaponParserBase } from '../parser/weapon/WeaponParserBase';\r\n\r\nexport class WeaponImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['weapons.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('weapons') && jsonObject['weapons'].hasOwnProperty('weapon');\r\n    }\r\n\r\n    GetDefaultData(): Weapon {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            _id: '',\r\n            folder: '',\r\n            img: 'icons/svg/mystery-man.svg',\r\n            flags: {},\r\n            type: 'weapon',\r\n            data: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: {\r\n                    type: 'varies',\r\n                    category: '',\r\n                    attribute: 'agility',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    mod_description: '',\r\n                    damage: {\r\n                        type: {\r\n                            base: 'physical',\r\n                            value: 'physical',\r\n                        },\r\n                        element: {\r\n                            base: '',\r\n                            value: '',\r\n                        },\r\n                        base: 0,\r\n                        value: 0,\r\n                        ap: {\r\n                            base: 0,\r\n                            value: 0,\r\n                            mod: [],\r\n                        },\r\n                        attribute: '',\r\n                        mod: [],\r\n                    },\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                        mod: [],\r\n                        base: 0,\r\n                    },\r\n                    extended: false,\r\n                    opposed: {\r\n                        type: 'defense',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                    alt_mod: 0,\r\n                    dice_pool_mod: [],\r\n                },\r\n                technology: {\r\n                    rating: 1,\r\n                    availability: '',\r\n                    quantity: 1,\r\n                    cost: 0,\r\n                    equipped: true,\r\n                    conceal: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    condition_monitor: {\r\n                        label: '',\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    wireless: true\r\n                },\r\n                ammo: {\r\n                    spare_clips: {\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    current: {\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                },\r\n                range: {\r\n                    category: '',\r\n                    ranges: {\r\n                        short: 0,\r\n                        medium: 0,\r\n                        long: 0,\r\n                        extreme: 0,\r\n                    },\r\n                    rc: {\r\n                        value: 0,\r\n                        base: 0,\r\n                        mod: [],\r\n                    },\r\n                    modes: {\r\n                        single_shot: false,\r\n                        semi_auto: false,\r\n                        burst_fire: false,\r\n                        full_auto: false,\r\n                    },\r\n                },\r\n                melee: {\r\n                    reach: 0,\r\n                },\r\n                thrown: {\r\n                    ranges: {\r\n                        short: 0,\r\n                        medium: 0,\r\n                        long: 0,\r\n                        extreme: 0,\r\n                        attribute: '',\r\n                    },\r\n                    blast: {\r\n                        radius: 0,\r\n                        dropoff: 0,\r\n                    },\r\n                },\r\n                category: 'range',\r\n                subcategory: '',\r\n            },\r\n            permission: {\r\n                default: 2,\r\n            },\r\n        };\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonWeaponi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonWeaponi18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponi18n, 'weapons', 'weapon');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Entity> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Weapons', this.categoryTranslations);\r\n\r\n        folders['gear'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Gear`, true);\r\n        folders['quality'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Quality`, true);\r\n\r\n        const parser = new ParserMap<Weapon>(WeaponParserBase.GetWeaponType, [\r\n            { key: 'range', value: new RangedParser() },\r\n            { key: 'melee', value: new MeleeParser() },\r\n            { key: 'thrown', value: new ThrownParser() },\r\n        ]);\r\n\r\n        let datas: Weapon[] = [];\r\n        let jsonDatas = jsonObject['weapons']['weapon'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n            data.folder = folders[data.data.subcategory].id;\r\n\r\n            datas.push(data);\r\n        }\r\n\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n","export abstract class Parser<TResult> {\r\n    public abstract Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult;\r\n}\r\n","import { Parser } from './Parser';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\n\r\nexport class ParserMap<TResult> extends Parser<TResult> {\r\n    private readonly m_BranchKey: string | BranchFunc<TResult>;\r\n    private readonly m_Map: Map<string, Parser<TResult>>;\r\n\r\n    public constructor(branchKey: string | BranchFunc<TResult>, elements: CArg<TResult>[]) {\r\n        super();\r\n\r\n        this.m_BranchKey = branchKey;\r\n\r\n        this.m_Map = new Map();\r\n        for (const { key, value } of elements) {\r\n            this.m_Map.set(key, value);\r\n        }\r\n    }\r\n\r\n    public Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\r\n        let key;\r\n        if (typeof this.m_BranchKey === 'function') {\r\n            key = this.m_BranchKey(jsonData);\r\n        } else {\r\n            key = this.m_BranchKey;\r\n            key = ImportHelper.StringValue(jsonData, key);\r\n        }\r\n\r\n        const parser = this.m_Map.get(key);\r\n        if (parser === undefined) {\r\n            console.warn(`Could not find mapped parser for category ${key}.`);\r\n            return data;\r\n        }\r\n        return parser.Parse(jsonData, data, jsonTranslation);\r\n    }\r\n}\r\n\r\ntype CArg<TResult> = {\r\n    key: string;\r\n    value: Parser<TResult>;\r\n};\r\ntype BranchFunc<TResult> = (TResult) => string;\r\n","import Armor = Shadowrun.Armor;\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\n\r\nexport class ArmorParserBase extends TechnologyItemParserBase<Armor> {\r\n    Parse(jsonData: object, data: Shadowrun.Armor): Shadowrun.Armor {\r\n        data = super.Parse(jsonData, data);\r\n\r\n        data.data.armor.value = ImportHelper.IntValue(jsonData, 'armor', 0);\r\n        data.data.armor.mod = ImportHelper.StringValue(jsonData, 'armor').includes('+');\r\n\r\n        return data;\r\n    }\r\n}\r\n","import ComplexForm = Shadowrun.ComplexForm;\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\nimport ComplexFormTarget = Shadowrun.ComplexFormTarget;\r\n\r\nexport class ComplexFormParserBase extends ItemParserBase<ComplexForm> {\r\n    Parse(jsonData: object, data: Shadowrun.ComplexForm, jsonTranslation?: object): Shadowrun.ComplexForm {\r\n        data.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        let fade = ImportHelper.StringValue(jsonData, 'fv');\r\n        if (fade.includes('+') || fade.includes('-')) {\r\n            data.data.fade = parseInt(fade.substring(1, fade.length));\r\n        }\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'I') {\r\n            data.data.duration = 'instant';\r\n        } else if (duration === 'S') {\r\n            data.data.duration = 'sustained';\r\n        } else if (duration === 'P') {\r\n            data.data.duration = 'permanent';\r\n        }\r\n\r\n        let target = ImportHelper.StringValue(jsonData, 'target');\r\n        switch (target) {\r\n            case 'Device':\r\n            case 'File':\r\n            case 'Host':\r\n            case 'Persona':\r\n            case 'Self':\r\n            case 'Sprite':\r\n                data.data.target = target.toLowerCase() as ComplexFormTarget;\r\n                break;\r\n            default:\r\n                data.data.target = 'other';\r\n                break;\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport CritterPower = Shadowrun.CritterPower;\r\nimport CritterPowerCategory = Shadowrun.CritterPowerCategory;\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\n\r\nexport class CritterPowerParserBase extends ItemParserBase<CritterPower> {\r\n    public Parse(jsonData: object, data: CritterPower, jsonTranslation?: object): CritterPower {\r\n\r\n        console.log(jsonData);\r\n\r\n        data.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n        data.data.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as CritterPowerCategory;\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'Always') {\r\n            data.data.duration = 'always';\r\n        } else if (duration === 'Instant') {\r\n            data.data.duration = 'instant';\r\n        } else if (duration === 'Sustained') {\r\n            data.data.duration = 'sustained';\r\n        } else if (duration === 'Permanent') {\r\n            data.data.duration = 'permanent';\r\n        } else {\r\n              data.data.duration = 'special';\r\n        }\r\n\r\n        let range = ImportHelper.StringValue(jsonData, 'range');\r\n        if (range === 'T') {\r\n            data.data.range = 'touch';\r\n        } else if (range === 'LOS') {\r\n            data.data.range = 'los';\r\n        } else if (range === 'LOS (A)') {\r\n            data.data.range = 'los_a';\r\n        } else if (range === 'Self') {\r\n           data.data.range = 'self';\r\n        } else {\r\n          data.data.range = 'special';\r\n        }\r\n\r\n        let type = ImportHelper.StringValue(jsonData, 'type');\r\n        if (type === 'P') {\r\n            data.data.powerType = 'physical';\r\n        } else if (type === 'M') {\r\n            data.data.powerType = 'mana';\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { Parser } from '../Parser';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\n\r\nexport abstract class ItemParserBase<TResult extends SR5ItemType> extends Parser<TResult> {\r\n    Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\r\n        data.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { ItemParserBase } from './ItemParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport Technology = Shadowrun.Technology;\r\n\r\nexport abstract class TechnologyItemParserBase<TResult extends Technology & SR5ItemType> extends ItemParserBase<TResult> {\r\n    Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        data.data.technology.availability = ImportHelper.StringValue(jsonData, 'avail', '0');\r\n        data.data.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\r\n        data.data.technology.rating = ImportHelper.IntValue(jsonData, 'rating', 0);\r\n\r\n        return data;\r\n    }\r\n}\r\n","import Mod = Shadowrun.Modification;\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport MountType = Shadowrun.MountType;\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\n\r\nexport class ModParserBase extends TechnologyItemParserBase<Mod> {\r\n    Parse(jsonData: object, data: Mod): Mod {\r\n        data = super.Parse(jsonData, data);\r\n\r\n        data.data.type = 'weapon';\r\n\r\n        data.data.mount_point = ImportHelper.StringValue(jsonData, 'mount') as MountType;\r\n\r\n        data.data.rc = ImportHelper.IntValue(jsonData, 'rc', 0);\r\n        data.data.accuracy = ImportHelper.IntValue(jsonData, 'accuracy', 0);\r\n\r\n        data.data.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal', 0);\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport Quality = Shadowrun.Quality;\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\n\r\nexport class QualityParserBase extends ItemParserBase<Quality> {\r\n    public Parse(jsonData: object, data: Quality, jsonTranslation?): Quality {\r\n        data.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        data.data.type = ImportHelper.StringValue(jsonData, 'category') === 'Positive' ? 'positive' : 'negative';\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\n\r\nexport class CombatSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, data: Shadowrun.Spell, jsonTranslation?: object): Shadowrun.Spell {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        data.data.combat.type = descriptor.includes('Indirect') ? 'indirect' : 'direct';\r\n        if (data.data.combat.type === 'direct') {\r\n            data.data.action.opposed.type = 'defense';\r\n            switch (data.data.type) {\r\n                case 'physical':\r\n                    data.data.action.opposed.attribute = 'body';\r\n                    break;\r\n                case 'mana':\r\n                    data.data.action.opposed.attribute = 'willpower';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else if (data.data.combat.type === 'indirect') {\r\n            data.data.action.opposed.type = 'defense';\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\n\r\nexport class DetectionSpellImporter extends SpellParserBase {\r\n    Parse(jsonData: object, data: Shadowrun.Spell, jsonTranslation?: object): Shadowrun.Spell {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        data.data.detection.passive = descriptor.includes('Passive');\r\n        if (!data.data.detection.passive) {\r\n            data.data.action.opposed.type = 'custom';\r\n            data.data.action.opposed.attribute = 'willpower';\r\n            data.data.action.opposed.attribute2 = 'logic';\r\n        }\r\n\r\n        data.data.detection.extended = descriptor.includes('Extended');\r\n\r\n        if (descriptor.includes('Psychic')) {\r\n            data.data.detection.type = 'psychic';\r\n        } else if (descriptor.includes('Directional')) {\r\n            data.data.detection.type = 'directional';\r\n        } else if (descriptor.includes('Area')) {\r\n            data.data.detection.type = 'area';\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\n\r\nexport class IllusionSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, data: Shadowrun.Spell, jsonTranslation?: object): Shadowrun.Spell {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        if (data.data.type === 'mana') {\r\n            data.data.action.opposed.type = 'custom';\r\n            data.data.action.opposed.attribute = 'logic';\r\n            data.data.action.opposed.attribute2 = 'willpower';\r\n        } else if (data.data.type === 'physical') {\r\n            data.data.action.opposed.type = 'custom';\r\n            data.data.action.opposed.attribute = 'intuition';\r\n            data.data.action.opposed.attribute2 = 'logic';\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport Spell = Shadowrun.Spell;\r\n\r\nexport class ManipulationSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, data: Spell, jsonTranslation?: object): Spell {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        data.data.manipulation.environmental = descriptor.includes('Environmental');\r\n        // Generally no resistance roll.\r\n\r\n        data.data.manipulation.mental = descriptor.includes('Mental');\r\n        if (data.data.manipulation.mental) {\r\n            data.data.action.opposed.type = 'custom';\r\n            data.data.action.opposed.attribute = 'logic';\r\n            data.data.action.opposed.attribute2 = 'willpower';\r\n        }\r\n\r\n        data.data.manipulation.physical = descriptor.includes('Physical');\r\n        if (data.data.manipulation.physical) {\r\n            data.data.action.opposed.type = 'custom';\r\n            data.data.action.opposed.attribute = 'body';\r\n            data.data.action.opposed.attribute2 = 'strength';\r\n        }\r\n        data.data.manipulation.damaging = descriptor.includes('Damaging');\r\n        if (data.data.manipulation.damaging) {\r\n            data.data.action.opposed.type = 'soak';\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport Spell = Shadowrun.Spell;\r\nimport SpellCateogry = Shadowrun.SpellCateogry;\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\n\r\nexport class SpellParserBase extends ItemParserBase<Spell> {\r\n    public Parse(jsonData: object, data: Spell, jsonTranslation?: object): Spell {\r\n        data.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n        data.data.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as SpellCateogry;\r\n\r\n        let damage = ImportHelper.StringValue(jsonData, 'damage');\r\n        if (damage === 'P') {\r\n            data.data.action.damage.type.base = 'physical';\r\n            data.data.action.damage.type.value = 'physical';\r\n        } else if (damage === 'S') {\r\n            data.data.action.damage.type.base = 'stun';\r\n            data.data.action.damage.type.value = 'stun';\r\n        }\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'I') {\r\n            data.data.duration = 'instant';\r\n        } else if (duration === 'S') {\r\n            data.data.duration = 'sustained';\r\n        } else if (duration === 'P') {\r\n            data.data.duration = 'permanent';\r\n        }\r\n\r\n        let drain = ImportHelper.StringValue(jsonData, 'dv');\r\n        if (drain.includes('+') || drain.includes('-')) {\r\n            data.data.drain = parseInt(drain.substring(1, drain.length));\r\n        }\r\n\r\n        let range = ImportHelper.StringValue(jsonData, 'range');\r\n        if (range === 'T') {\r\n            data.data.range = 'touch';\r\n        } else if (range === 'LOS') {\r\n            data.data.range = 'los';\r\n        } else if (range === 'LOS (A)') {\r\n            data.data.range = 'los_a';\r\n        }\r\n\r\n        let type = ImportHelper.StringValue(jsonData, 'type');\r\n        if (type === 'P') {\r\n            data.data.type = 'physical';\r\n        } else if (type === 'M') {\r\n            data.data.type = 'mana';\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\nimport Cyberware = Shadowrun.Cyberware;\r\nimport Ware = Shadowrun.Ware;\r\n\r\nexport class CyberwareParser extends TechnologyItemParserBase<Ware> {\r\n    Parse(jsonData: object, data: Ware, jsonTranslation?: object): Ware {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        const essence = ImportHelper.StringValue(jsonData, 'ess', '0').match(/[0-9]\\.?[0-9]*/g);\r\n        if (essence !== null) {\r\n            data.data.essence = parseFloat(essence[0]);\r\n        }\r\n\r\n        const capacity = ImportHelper.StringValue(jsonData, 'capacity', '0').match(/[0-9]+/g);\r\n        if (capacity !== null) {\r\n            data.data.capacity = parseInt(capacity[0]);\r\n        }\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport ActorAttribute = Shadowrun.ActorAttribute;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport Weapon = Shadowrun.Weapon;\r\n\r\nexport class MeleeParser extends WeaponParserBase {\r\n    GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n        let damageCode: any = jsonDamage.match(/(STR)([+-]?)([1-9]*)\\)([PS])/g)?.[0];\r\n\r\n        if (damageCode == null) {\r\n            return {\r\n                type: {\r\n                    base: 'physical',\r\n                    value: 'physical',\r\n                },\r\n                element: {\r\n                    base: '',\r\n                    value: '',\r\n                },\r\n                base: 0,\r\n                value: 0,\r\n                ap: {\r\n                    base: 0,\r\n                    value: 0,\r\n                    mod: [],\r\n                },\r\n                attribute: '',\r\n                mod: [],\r\n            };\r\n        }\r\n\r\n        let damageBase = 0;\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        let splitDamageCode = damageCode.split(')');\r\n        let damageType = splitDamageCode[1].includes('P') ? 'physical' : 'stun';\r\n\r\n        let splitBaseCode = damageCode.includes('+') ? splitDamageCode[0].split('+') : splitDamageCode[0].split('-');\r\n        if (splitDamageCode[0].includes('+') || splitDamageCode[0].includes('-')) {\r\n            damageBase = parseInt(splitBaseCode[1], 0);\r\n        }\r\n        let damageAttribute = damageCode.includes('STR') ? 'strength' : '';\r\n\r\n        return {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            element: {\r\n                base: '',\r\n                value: '',\r\n            },\r\n            base: damageBase,\r\n            value: damageBase,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: [],\r\n            },\r\n            attribute: damageAttribute as ActorAttribute,\r\n            mod: [],\r\n        };\r\n    }\r\n\r\n    Parse(jsonData: object, data: Weapon, jsonTranslation?: object): Weapon {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        data.data.melee.reach = ImportHelper.IntValue(jsonData, 'reach');\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport { Constants } from '../../importer/Constants';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport Weapon = Shadowrun.Weapon;\r\n\r\nexport class RangedParser extends WeaponParserBase {\r\n    public GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n        let damageCode = jsonDamage.match(/[0-9]+[PS]/g)?.[0];\r\n\r\n        if (damageCode == null) {\r\n            return {\r\n                type: {\r\n                    base: 'physical',\r\n                    value: '',\r\n                },\r\n                element: {\r\n                    base: '',\r\n                    value: '',\r\n                },\r\n                base: 0,\r\n                value: 0,\r\n                ap: {\r\n                    base: 0,\r\n                    value: 0,\r\n                    mod: [],\r\n                },\r\n                attribute: '',\r\n                mod: [],\r\n            };\r\n        }\r\n\r\n        let damageType = damageCode.includes('P') ? 'physical' : 'stun';\r\n        let damageAmount = parseInt(damageCode.replace(damageType[0].toUpperCase(), ''));\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        return {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            element: {\r\n                base: '',\r\n                value: '',\r\n            },\r\n            value: damageAmount,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: [],\r\n            },\r\n            attribute: '',\r\n            mod: [],\r\n            base: damageAmount,\r\n        };\r\n    }\r\n\r\n    protected GetAmmo(weaponJson: object) {\r\n        let jsonAmmo = ImportHelper.StringValue(weaponJson, 'ammo');\r\n        let match = jsonAmmo.match(/([0-9]+)/g)?.[0];\r\n        return match !== undefined ? parseInt(match) : 0;\r\n    }\r\n\r\n    Parse(jsonData: object, data: Weapon, jsonTranslation?: object): Weapon {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        data.data.range.rc.base = ImportHelper.IntValue(jsonData, 'rc');\r\n        data.data.range.rc.value = ImportHelper.IntValue(jsonData, 'rc');\r\n\r\n        if (jsonData.hasOwnProperty('range')) {\r\n            data.data.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\r\n        } else {\r\n            data.data.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\r\n        }\r\n\r\n        data.data.ammo.current.value = this.GetAmmo(jsonData);\r\n        data.data.ammo.current.max = this.GetAmmo(jsonData);\r\n\r\n        data.data.range.modes.single_shot = ImportHelper.StringValue(jsonData, 'mode').includes('SS');\r\n        data.data.range.modes.semi_auto = ImportHelper.StringValue(jsonData, 'mode').includes('SA');\r\n        data.data.range.modes.burst_fire = ImportHelper.StringValue(jsonData, 'mode').includes('BF');\r\n        data.data.range.modes.full_auto = ImportHelper.StringValue(jsonData, 'mode').includes('FA');\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport { Constants } from '../../importer/Constants';\r\nimport BlastData = Shadowrun.BlastData;\r\nimport ActorAttribute = Shadowrun.ActorAttribute;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport Weapon = Shadowrun.Weapon;\r\n\r\nexport class ThrownParser extends WeaponParserBase {\r\n    public GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n\r\n        let damageAmount = 0;\r\n        let damageType = 'physical';\r\n        let damageAttribute = '';\r\n\r\n        //STR scaling weapons like the boomerang\r\n        if (jsonDamage.includes('STR')) {\r\n            damageAttribute = 'strength';\r\n\r\n            let damageMatch = jsonDamage.match(/((STR)([+-])[0-9]\\)[PS])/g)?.[0];\r\n            if (damageMatch !== undefined) {\r\n                let amountMatch = damageMatch.match(/-?[0-9]+/g)?.[0];\r\n                damageAmount = amountMatch !== undefined ? parseInt(amountMatch) : 0;\r\n            }\r\n        } else {\r\n            let damageMatch = jsonDamage.match(/([0-9]+[PS])/g)?.[0];\r\n\r\n            if (damageMatch !== undefined) {\r\n                let amountMatch = damageMatch.match(/[0-9]+/g)?.[0];\r\n                if (amountMatch !== undefined) {\r\n                    damageAmount = parseInt(amountMatch);\r\n                }\r\n            } else {\r\n                return {\r\n                    type: {\r\n                        base: 'physical',\r\n                        value: 'physical',\r\n                    },\r\n                    element: {\r\n                        base: '',\r\n                        value: '',\r\n                    },\r\n                    base: 0,\r\n                    value: 0,\r\n                    ap: {\r\n                        base: 0,\r\n                        value: 0,\r\n                        mod: [],\r\n                    },\r\n                    attribute: '',\r\n                    mod: [],\r\n                };\r\n            }\r\n        }\r\n        damageType = jsonDamage.includes('P') ? 'physical' : 'stun';\r\n\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        return {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            element: {\r\n                base: '',\r\n                value: '',\r\n            },\r\n            base: damageAmount,\r\n            value: damageAmount,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: [],\r\n            },\r\n            attribute: damageAttribute as ActorAttribute,\r\n            mod: [],\r\n        };\r\n    }\r\n\r\n    public GetBlast(jsonData: object, data: Weapon): BlastData {\r\n        let blastData: BlastData = {\r\n            radius: 0,\r\n            dropoff: 0,\r\n        };\r\n\r\n        let blastCode = ImportHelper.StringValue(jsonData, 'damage');\r\n\r\n        let radiusMatch = blastCode.match(/([0-9]+m)/)?.[0];\r\n        if (radiusMatch !== undefined) {\r\n            radiusMatch = radiusMatch.match(/[0-9]+/)?.[0];\r\n            if (radiusMatch !== undefined) {\r\n                blastData.radius = parseInt(radiusMatch);\r\n            }\r\n        }\r\n\r\n        let dropoffMatch = blastCode.match(/(-[0-9]+\\/m)/)?.[0];\r\n        if (dropoffMatch !== undefined) {\r\n            dropoffMatch = dropoffMatch.match(/-[0-9]+/)?.[0];\r\n            if (dropoffMatch !== undefined) {\r\n                blastData.dropoff = parseInt(dropoffMatch);\r\n            }\r\n        }\r\n\r\n        if (blastData.dropoff && !blastData.radius) {\r\n            blastData.radius = -(data.data.action.damage.base / blastData.dropoff);\r\n        }\r\n\r\n        return blastData;\r\n    }\r\n\r\n    Parse(jsonData: object, data: Weapon, jsonTranslation?: object): Weapon {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        if (jsonData.hasOwnProperty('range')) {\r\n            data.data.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\r\n        } else {\r\n            data.data.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\r\n        }\r\n\r\n        data.data.thrown.blast = this.GetBlast(jsonData, data);\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { Constants } from '../../importer/Constants';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport Weapon = Shadowrun.Weapon;\r\nimport WeaponCategory = Shadowrun.WeaponCategory;\r\nimport SkillName = Shadowrun.SkillName;\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\n\r\nexport abstract class WeaponParserBase extends TechnologyItemParserBase<Weapon> {\r\n    public abstract GetDamage(jsonData: object): DamageData;\r\n\r\n    protected GetSkill(weaponJson: object): SkillName {\r\n        if (weaponJson.hasOwnProperty('useskill')) {\r\n            let jsonSkill = ImportHelper.StringValue(weaponJson, 'useskill');\r\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(jsonSkill)) {\r\n                return Constants.MAP_CATEGORY_TO_SKILL[jsonSkill];\r\n            }\r\n            return jsonSkill.replace(/[\\s\\-]/g, '_').toLowerCase();\r\n        } else {\r\n            let category = ImportHelper.StringValue(weaponJson, 'category');\r\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(category)) {\r\n                return Constants.MAP_CATEGORY_TO_SKILL[category];\r\n            }\r\n\r\n            let type = ImportHelper.StringValue(weaponJson, 'type').toLowerCase();\r\n            return type === 'ranged' ? 'exotic_range' : 'exotic_melee';\r\n        }\r\n    }\r\n\r\n    public static GetWeaponType(weaponJson: object): WeaponCategory {\r\n        let type = ImportHelper.StringValue(weaponJson, 'type');\r\n        //melee is the least specific, all melee entries are accurate\r\n        if (type === 'Melee') {\r\n            return 'melee';\r\n        } else {\r\n            // skill takes priorities over category\r\n            if (weaponJson.hasOwnProperty('useskill')) {\r\n                let skill = ImportHelper.StringValue(weaponJson, 'useskill');\r\n                if (skill === 'Throwing Weapons') return 'thrown';\r\n            }\r\n\r\n            // category is the fallback\r\n            let category = ImportHelper.StringValue(weaponJson, 'category');\r\n            if (category === 'Throwing Weapons') return 'thrown';\r\n            // ranged is everything else\r\n            return 'range';\r\n        }\r\n    }\r\n\r\n    public Parse(jsonData: object, data: Weapon, jsonTranslation?: object): Weapon {\r\n        data = super.Parse(jsonData, data, jsonTranslation);\r\n\r\n        let category = ImportHelper.StringValue(jsonData, 'category');\r\n        // A single item does not meet normal rules, thanks Chummer!\r\n        // TODO: Check these rules after localization using a generic, non-english approach.\r\n        if (category === 'Hold-outs') {\r\n            category = 'Holdouts';\r\n        }\r\n\r\n        data.data.category = WeaponParserBase.GetWeaponType(jsonData);\r\n        data.data.subcategory = category.toLowerCase();\r\n\r\n        data.data.action.skill = this.GetSkill(jsonData);\r\n        data.data.action.damage = this.GetDamage(jsonData);\r\n\r\n        data.data.action.limit.value = ImportHelper.IntValue(jsonData, 'accuracy');\r\n        data.data.action.limit.base = ImportHelper.IntValue(jsonData, 'accuracy');\r\n\r\n        data.data.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal');\r\n\r\n        return data;\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport DeviceData = Shadowrun.DeviceData;\r\nimport { SR5Item } from './SR5Item';\r\nimport AmmoData = Shadowrun.AmmoData;\r\n\r\nexport const ChatData = {\r\n    action: (data, labels, props) => {\r\n        if (data.action) {\r\n            const labelStringList: string[] = [];\r\n            if (data.action.skill) {\r\n                labelStringList.push(Helpers.label(data.action.skill));\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            } else if (data.action.attribute2) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n                labelStringList.push(Helpers.label(data.action.attribute2));\r\n            } else if (data.action.attribute) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            }\r\n            if (data.action.mod) {\r\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${data.action.mod})`);\r\n                // TODO when all mods are modlists\r\n                // Object.entries(data.action.mod).forEach(([key, value]) =>\r\n                //     labelStringList.push(`${game.i18n.localize(key)} (${value})`)\r\n                // );\r\n            }\r\n            if (labelStringList.length) {\r\n                labels.roll = labelStringList.join(' + ');\r\n            }\r\n\r\n            if (data.action.opposed.type) {\r\n                const { opposed } = data.action;\r\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\r\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\r\n            }\r\n\r\n            // setup action props\r\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\r\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\r\n            if (data.action.type !== '' && data.action.type !== 'varies' && data.action.type !== 'none') {\r\n                props.push(`${Helpers.label(data.action.type)} Action`);\r\n            }\r\n            if (data.action.limit) {\r\n                const { limit } = data.action;\r\n                const attribute = limit.attribute ? `${game.i18n.localize(CONFIG.SR5.limits[limit.attribute])}` : '';\r\n                const limitVal = limit.value ? limit.value : '';\r\n                let limitStr = '';\r\n                if (attribute) {\r\n                    limitStr += attribute;\r\n                }\r\n                if (limitVal) {\r\n                    if (attribute) {\r\n                        limitStr += ' + ';\r\n                    }\r\n                    limitStr += limitVal;\r\n                }\r\n\r\n                if (limitStr) {\r\n                    props.push(`Limit ${limitStr}`);\r\n                }\r\n            }\r\n            if (data.action.damage.type.value) {\r\n                const { damage } = data.action;\r\n                let damageString = '';\r\n                let elementString = '';\r\n                const attribute = damage.attribute ? `${game.i18n.localize(CONFIG.SR5.attributes[damage.attribute])} + ` : '';\r\n                if (damage.value || attribute) {\r\n                    const type = damage.type.value ? damage.type.value.toUpperCase().charAt(0) : '';\r\n                    damageString = `DV ${attribute}${damage.value}${type}`;\r\n                }\r\n                if (damage.element.value) {\r\n                    // if we have a damage value and are electric, follow the convention of (e) after\r\n                    if (damage.value) {\r\n                        if (damage.element.value === 'electricity') {\r\n                            damageString += ' (e)';\r\n                        } else {\r\n                            elementString = Helpers.label(damage.element.value);\r\n                        }\r\n                    } else {\r\n                        elementString = Helpers.label(damage.element.value);\r\n                    }\r\n                }\r\n                if (damageString) props.push(damageString);\r\n                if (elementString) props.push(elementString);\r\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\r\n            }\r\n        }\r\n    },\r\n    sin: (data, labels, props) => {\r\n        props.push(`Rating ${data.technology.rating}`);\r\n        data.licenses.forEach((license) => {\r\n            props.push(`${license.name} R${license.rtg}`);\r\n        });\r\n    },\r\n\r\n    contact: (data, labels, props) => {\r\n        props.push(data.type);\r\n        props.push(`${game.i18n.localize('SR5.Connection')} ${data.connection}`);\r\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${data.loyalty}`);\r\n        if (data.blackmail) {\r\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\r\n        }\r\n        if (data.family) {\r\n            props.push(game.i18n.localize('SR5.Family'));\r\n        }\r\n    },\r\n\r\n    lifestyle: (data, labels, props) => {\r\n        props.push(Helpers.label(data.type));\r\n        if (data.cost) props.push(`¥${data.cost}`);\r\n        if (data.comforts) props.push(`Comforts ${data.comforts}`);\r\n        if (data.security) props.push(`Security ${data.security}`);\r\n        if (data.neighborhood) props.push(`Neighborhood ${data.neighborhood}`);\r\n        if (data.guests) props.push(`Guests ${data.guests}`);\r\n    },\r\n\r\n    adept_power: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(`PP ${data.pp}`);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    armor: (data, labels, props) => {\r\n        if (data.armor) {\r\n            if (data.armor.value) props.push(`Armor ${data.armor.mod ? '+' : ''}${data.armor.value}`);\r\n            if (data.armor.acid) props.push(`Acid ${data.armor.acid}`);\r\n            if (data.armor.cold) props.push(`Cold ${data.armor.cold}`);\r\n            if (data.armor.fire) props.push(`Fire ${data.armor.fire}`);\r\n            if (data.armor.electricity) props.push(`Electricity ${data.armor.electricity}`);\r\n            if (data.armor.radiation) props.push(`Radiation ${data.armor.radiation}`);\r\n        }\r\n    },\r\n\r\n    ammo: (data, labels, props) => {\r\n        if (data.damageType) props.push(`${game.i18n.localize(\"SR5.DamageType\")} ${data.damageType}`);\r\n        if (data.damage) props.push(`${game.i18n.localize(\"SR5.DamageValue\")} ${data.damage}`);\r\n        if (data.element) props.push(`${game.i18n.localize(\"SR5.Element\")} ${data.element}`);\r\n        if (data.ap) props.push(`${game.i18n.localize(\"SR5.AP\")} ${data.ap}`);\r\n        if (data.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${data.blast.radius}m`);\r\n        if (data.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${data.blast.dropoff}/m`);\r\n    },\r\n\r\n    program: (data, labels, props) => {\r\n        props.push(game.i18n.localize(CONFIG.SR5.programTypes[data.type]));\r\n    },\r\n\r\n    complex_form: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.target), Helpers.label(data.duration));\r\n        const { fade } = data;\r\n        if (fade > 0) props.push(`Fade L+${fade}`);\r\n        else if (fade < 0) props.push(`Fade L${fade}`);\r\n        else props.push('Fade L');\r\n    },\r\n\r\n    cyberware: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        ChatData.armor(data, labels, props);\r\n        if (data.essence) props.push(`Ess ${data.essence}`);\r\n    },\r\n\r\n    bioware: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        ChatData.armor(data, labels, props);\r\n        if (data.essence) props.push(`Ess ${data.essence}`);\r\n    },\r\n\r\n    device: (data: DeviceData, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n        if (data.category === 'cyberdeck') {\r\n            for (const attN of Object.values(data.atts)) {\r\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\r\n            }\r\n        }\r\n    },\r\n\r\n    equipment: (data, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n    },\r\n\r\n    quality: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    sprite_power: (data, labels, props) => {\r\n        // add action data\r\n        ChatData.action(data, labels, props);\r\n    },\r\n\r\n    critter_power: (data, labels, props) => {\r\n        // power type\r\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.types[data.powerType]));\r\n        // duration\r\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.durations[data.duration]));\r\n        // range\r\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.ranges[data.range]));\r\n\r\n        // add action data\r\n        ChatData.action(data, labels, props);\r\n    },\r\n\r\n    // add properties for spell data, follow order in book\r\n    spell: (data, labels, props) => {\r\n        // first category and type\r\n        props.push(Helpers.label(data.category), Helpers.label(data.type));\r\n\r\n        // add subtype tags\r\n        if (data.category === 'combat') {\r\n            props.push(Helpers.label(data.combat.type));\r\n        } else if (data.category === 'health') {\r\n        } else if (data.category === 'illusion') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.sense);\r\n        } else if (data.category === 'manipulation') {\r\n            if (data.manipulation.damaging) props.push('Damaging');\r\n            if (data.manipulation.mental) props.push('Mental');\r\n            if (data.manipulation.environmental) props.push('Environmental');\r\n            if (data.manipulation.physical) props.push('Physical');\r\n        } else if (data.category === 'detection') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.passive ? 'Passive' : 'Active');\r\n            if (data.illusion.extended) props.push('Extended');\r\n        }\r\n        // add range\r\n        props.push(Helpers.label(data.range));\r\n\r\n        // add action data\r\n        ChatData.action(data, labels, props);\r\n\r\n        // add duration data\r\n        props.push(Helpers.label(data.duration));\r\n\r\n        // add drain data\r\n        const { drain } = data;\r\n        if (drain > 0) props.push(`Drain F+${drain}`);\r\n        else if (drain < 0) props.push(`Drain F${drain}`);\r\n        else props.push('Drain F');\r\n\r\n        labels.roll = 'Cast';\r\n    },\r\n\r\n    weapon: (data, labels, props, item: SR5Item) => {\r\n        ChatData.action(data, labels, props);\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.includes('Limit')) {\r\n                props[i] = prop.replace('Limit', 'Accuracy');\r\n            }\r\n        }\r\n\r\n        const equippedAmmo = item.getEquippedAmmo();\r\n        if (equippedAmmo && data.ammo && data.ammo.current?.max) {\r\n            if (equippedAmmo) {\r\n                const ammoData = equippedAmmo.data.data as AmmoData;\r\n                const { current, spare_clips } = data.ammo;\r\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\r\n                if (ammoData.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${ammoData.blast.radius}m`);\r\n                if (ammoData.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} $ammoData.blast.dropoff}/m`);\r\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\r\n            }\r\n        }\r\n\r\n        if (data.technology?.conceal?.value) {\r\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${data.technology.conceal.value}`);\r\n        }\r\n\r\n        if (data.category === 'range') {\r\n            if (data.range.rc) {\r\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${data.range.rc.value}`;\r\n                if (item?.actor) {\r\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\r\n                }\r\n                props.push(rcString);\r\n            }\r\n            if (data.range.modes) {\r\n                const newModes: string[] = [];\r\n                const { modes } = data.range;\r\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\r\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\r\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\r\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\r\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\r\n            }\r\n            if (data.range.ranges) props.push(Array.from(Object.values(data.range.ranges)).join('/'));\r\n        } else if (data.category === 'melee') {\r\n            if (data.melee.reach) {\r\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${data.melee.reach}`;\r\n                // find accuracy in props and insert ourselves after it\r\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\r\n                if (accIndex > -1) {\r\n                    props.splice(accIndex + 1, 0, reachString);\r\n                } else {\r\n                    props.push(reachString);\r\n                }\r\n            }\r\n        } else if (data.category === 'thrown') {\r\n            const { blast } = data.thrown;\r\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\r\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\r\n\r\n            if (data.thrown.ranges) {\r\n                const mult = data.thrown.ranges.attribute && item?.actor ? item.actor.data.data.attributes[data.thrown.ranges.attribute].value : 1;\r\n                const ranges = [data.thrown.ranges.short, data.thrown.ranges.medium, data.thrown.ranges.long, data.thrown.ranges.extreme];\r\n                props.push(ranges.map((v) => v * mult).join('/'));\r\n            }\r\n        }\r\n\r\n        const equippedMods = item.getEquippedMods();\r\n        if (equippedMods) {\r\n            equippedMods.forEach((mod) => {\r\n                props.push(`${mod.name}`);\r\n            });\r\n        }\r\n    },\r\n};\r\n","import {Helpers} from '../helpers';\r\nimport {SR5Actor} from '../actor/SR5Actor';\r\nimport {ActionTestData, ShadowrunItemDialog} from '../apps/dialogs/ShadowrunItemDialog';\r\nimport {ChatData} from './ChatData';\r\nimport {AdvancedRollProps, ShadowrunRoll, ShadowrunRoller, Test} from '../rolls/ShadowrunRoller';\r\nimport {createItemChatMessage} from '../chat';\r\nimport {DEFAULT_ROLL_NAME, FLAGS, SYSTEM_NAME} from '../constants';\r\nimport {SR5ItemDataWrapper} from './SR5ItemDataWrapper';\r\nimport {PartsList} from '../parts/PartsList';\r\nimport ModList = Shadowrun.ModList;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport SpellForceData = Shadowrun.SpellForceData;\r\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\r\nimport FireRangeData = Shadowrun.FireRangeData;\r\nimport BlastData = Shadowrun.BlastData;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport TrackType = Shadowrun.TrackType;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport SpellDefenseOptions = Shadowrun.SpellDefenseOptions;\r\nimport SpellData = Shadowrun.SpellData;\r\nimport WeaponData = Shadowrun.WeaponData;\r\nimport AmmoData = Shadowrun.AmmoData;\r\nimport TechnologyPartData = Shadowrun.TechnologyPartData;\r\nimport Sin = Shadowrun.Sin;\r\nimport Weapon = Shadowrun.Weapon;\r\nimport Ammo = Shadowrun.Ammo;\r\nimport TechnologyData = Shadowrun.TechnologyData;\r\nimport RangeData = Shadowrun.RangeData;\r\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\r\nimport SpellRange = Shadowrun.SpellRange;\r\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\r\nimport AdeptPowerData = Shadowrun.AdeptPowerData;\r\nimport AdeptPower = Shadowrun.AdeptPower;\r\nimport Modification = Shadowrun.Modification;\r\nimport Action = Shadowrun.Action;\r\nimport Armor = Shadowrun.Armor;\r\nimport ComplexForm = Shadowrun.ComplexForm;\r\nimport Contact = Shadowrun.Contact;\r\nimport CritterPower = Shadowrun.CritterPower;\r\nimport Cyberware = Shadowrun.Cyberware;\r\nimport Device = Shadowrun.Device;\r\nimport Equipment = Shadowrun.Equipment;\r\nimport Lifestyle = Shadowrun.Lifestyle;\r\nimport Program = Shadowrun.Program;\r\nimport Quality = Shadowrun.Quality;\r\nimport Spell = Shadowrun.Spell;\r\nimport SpritePower = Shadowrun.SpritePower;\r\n\r\nexport class SR5Item extends Item {\r\n    labels: {} = {};\r\n    items: SR5Item[];\r\n    actor: SR5Actor;\r\n    data: SR5ItemType;\r\n\r\n    private get wrapper(): SR5ItemDataWrapper {\r\n        // we need to cast here to unknown first to make ts happy\r\n        return new SR5ItemDataWrapper((this.data as unknown) as SR5ItemType);\r\n    }\r\n\r\n    // Flag Functions\r\n    getLastFireMode(): FireModeData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireMode) || { value: 0 };\r\n    }\r\n    async setLastFireMode(fireMode: FireModeData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireMode, fireMode);\r\n    }\r\n    getLastSpellForce(): SpellForceData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastSpellForce) || { value: 0 };\r\n    }\r\n    async setLastSpellForce(force: SpellForceData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastSpellForce, force);\r\n    }\r\n    getLastComplexFormLevel(): ComplexFormLevelData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel) || { value: 0 };\r\n    }\r\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel, level);\r\n    }\r\n    getLastFireRangeMod(): FireRangeData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireRange) || { value: 0 };\r\n    }\r\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireRange, environmentalMod);\r\n    }\r\n\r\n    /**\r\n     * Return an Array of the Embedded Item Data\r\n     * TODO properly type this\r\n     */\r\n    getEmbeddedItems(): any[] {\r\n        let items = this.getFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\r\n\r\n        items = items ? items : [];\r\n\r\n        // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\r\n        if (items && !Array.isArray(items)) {\r\n            items = Helpers.convertIndexedObjectToArray(items);\r\n        }\r\n\r\n        // Manually map wrongly converted array fields...\r\n        items = items.map(item => {\r\n            if (item.effects && !Array.isArray(item.effects)) {\r\n                item.effects = Helpers.convertIndexedObjectToArray(item.effects);\r\n            }\r\n            return item;\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Set the embedded item data\r\n     * @param items\r\n     */\r\n    async setEmbeddedItems(items: any[]) {\r\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\r\n        // await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\r\n        await this.setFlag(SYSTEM_NAME, FLAGS.EmbeddedItems, items);\r\n    }\r\n\r\n    async clearEmbeddedItems() {\r\n        await this.unsetFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\r\n    }\r\n\r\n    // TODO: Remove.\r\n    // getLastAttack(): AttackData | undefined {\r\n    //     return this.getFlag(SYSTEM_NAME, FLAGS.Attack);\r\n    // }\r\n    // async setLastAttack(attack: AttackData) {\r\n    //     // unset the flag first to clear old data, data can get weird if not done\r\n    //     await this.unsetFlag(SYSTEM_NAME, FLAGS.Attack);\r\n    //     return this.setFlag(SYSTEM_NAME, FLAGS.Attack, attack);\r\n    // }\r\n\r\n    // TODO: Remove.\r\n    // async setLastAttackForRoll(roll: ShadowrunRoll|undefined, actionTestData?: ActionTestData) {\r\n    //     const hits = roll?.total ?? 0;\r\n    //     const attackData = this.getAttackData(hits, actionTestData);\r\n    //     if (attackData) {\r\n    //         await this.setLastAttack(attackData);\r\n    //     }\r\n    // }\r\n\r\n    /** Overwrite to allow for options param to be skipped.\r\n     */\r\n    async update(data, options?): Promise<this> {\r\n        return super.update(data, options);\r\n    }\r\n\r\n    get hasOpposedRoll(): boolean {\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return !!action.opposed.type;\r\n    }\r\n\r\n    get hasRoll(): boolean {\r\n        const action = this.getAction();\r\n        return !!(action && action.type !== '' && (action.skill || action.attribute || action.attribute2 || action.dice_pool_mod));\r\n    }\r\n    get hasTemplate(): boolean {\r\n        return this.isAreaOfEffect();\r\n    }\r\n\r\n    /**\r\n     * PREPARE DATA CANNOT PULL FROM this.actor at ALL\r\n     * - as of foundry v0.7.4, actor data isn't prepared by the time we prepare items\r\n     * - this caused issues with Actions that have a Limit or Damage attribute and so those were moved\r\n     */\r\n    prepareData() {\r\n        super.prepareData();\r\n\r\n        // Description labels might have changed since last data prep.\r\n        this.labels = {};\r\n\r\n        if (this.data.type === 'sin') {\r\n            if (typeof this.data.data.licenses === 'object') {\r\n                //@ts-ignore // taMiF: This seems to be a hacky solution to some internal or Foundry issue with reading\r\n                //                      a object/HashMap when an array/iterable was expected\r\n                this.data.data.licenses = Object.values(this.data.data.licenses);\r\n            }\r\n        }\r\n        const equippedMods = this.getEquippedMods();\r\n        const equippedAmmo = this.getEquippedAmmo();\r\n\r\n        const technology = this.getTechnology();\r\n        if (technology) {\r\n            // taMiF: This migration code could be needed for items imported from an older compendium?\r\n            if (technology.condition_monitor === undefined) {\r\n                technology.condition_monitor = { value: 0, max: 0, label: '' };\r\n            }\r\n            // Rating might be a string.\r\n            const rating = typeof technology.rating === 'string' ? 0 : technology.rating;\r\n            technology.condition_monitor.max = 8 + Math.ceil(rating / 2);\r\n\r\n            // Calculate conceal data.\r\n            if (!technology.conceal) technology.conceal = {base: 0, value: 0, mod: []};\r\n\r\n            const concealParts = new PartsList<number>();\r\n            equippedMods.forEach((mod) => {\r\n                const technology = mod.getTechnology();\r\n\r\n                if (technology && technology.conceal.value) {\r\n                    concealParts.addUniquePart(mod.name, technology.conceal.value);\r\n                }\r\n            });\r\n\r\n            technology.conceal.mod = concealParts.list;\r\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\r\n        }\r\n\r\n        const action = this.getAction();\r\n        if (action) {\r\n            action.alt_mod = 0;\r\n            action.limit.mod = [];\r\n            action.damage.mod = [];\r\n            action.damage.ap.mod = [];\r\n            action.dice_pool_mod = [];\r\n            // handle overrides from mods\r\n            const limitParts = new PartsList(action.limit.mod);\r\n            const dpParts = new PartsList(action.dice_pool_mod);\r\n            equippedMods.forEach((mod) => {\r\n                const modification = mod.asModificationData();\r\n                if (!modification) return;\r\n\r\n                if (modification.data.accuracy) {\r\n                    limitParts.addUniquePart(mod.name, modification.data.accuracy);\r\n                }\r\n                if (modification.data.dice_pool) {\r\n                    dpParts.addUniquePart(mod.name, modification.data.dice_pool);\r\n                }\r\n            });\r\n\r\n            if (equippedAmmo) {\r\n                const ammoData = equippedAmmo.data.data as AmmoData;\r\n                // add mods to damage from ammo\r\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name, ammoData.damage);\r\n                // add mods to ap from ammo\r\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name, ammoData.ap);\r\n\r\n                // override element\r\n                if (ammoData.element) {\r\n                    action.damage.element.value = ammoData.element;\r\n                } else {\r\n                    action.damage.element.value = action.damage.element.base;\r\n                }\r\n\r\n                // override damage type\r\n                if (ammoData.damageType) {\r\n                    action.damage.type.value = ammoData.damageType;\r\n                } else {\r\n                    action.damage.type.value = action.damage.type.base;\r\n                }\r\n            } else {\r\n                // set value if we don't have item overrides\r\n                action.damage.element.value = action.damage.element.base;\r\n                action.damage.type.value = action.damage.type.base;\r\n            }\r\n\r\n            // once all damage mods have been accounted for, sum base and mod to value\r\n            action.damage.value = Helpers.calcTotal(action.damage);\r\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\r\n\r\n            action.limit.value = Helpers.calcTotal(action.limit);\r\n        }\r\n\r\n        const range = this.getWeaponRange();\r\n        if (range) {\r\n            if (range.rc) {\r\n                const rangeParts = new PartsList();\r\n                equippedMods.forEach((mod) => {\r\n                    //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\r\n                    if (mod.data.data.rc) rangeParts.addUniquePart(mod.name, mod.data.data.rc);\r\n                    // handle overrides from ammo\r\n                });\r\n                //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\r\n                range.rc.mod = rangeParts.list;\r\n                //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\r\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\r\n            }\r\n        }\r\n\r\n        const adeptPower = this.asAdeptPowerData();\r\n        if (adeptPower) {\r\n            adeptPower.data.type = adeptPower.data.action.type ? 'active' : 'passive';\r\n        }\r\n    }\r\n\r\n    async postItemCard() {\r\n        const tests =  this.getActionTests();\r\n        const options = {\r\n            actor: this.actor,\r\n            description: this.getChatData(),\r\n            item: this,\r\n            previewTemplate: this.hasTemplate,\r\n            tests\r\n        };\r\n        return await createItemChatMessage(options);\r\n    }\r\n\r\n    async castAction(event?) {\r\n        if (!this.actor) return;\r\n\r\n        const dontRollTest = event?.shiftKey || !this.hasRoll;\r\n        if (dontRollTest) return await this.postItemCard();\r\n\r\n        const dialog = await ShadowrunItemDialog.create(this, event);\r\n        // Some items might not have an additional dialog.\r\n        if (!dialog) return await this.rollTest(event);\r\n\r\n        const actionTestData = await dialog.select();\r\n        if (dialog.canceled) return;\r\n\r\n        return await this.rollTest(event, actionTestData);\r\n}\r\n\r\n    getChatData(htmlOptions?) {\r\n        const data = duplicate(this.data.data);\r\n        const { labels } = this;\r\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\r\n        //              that's not actually defined in any SR5Item typing.\r\n        if (!data.description) data.description = {};\r\n        // TextEditor.enrichHTML will return null as a string, making later handling difficult.\r\n        if (!data.description.value) data.description.value = '';\r\n\r\n        data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\r\n\r\n        const props = [];\r\n        const func = ChatData[this.data.type];\r\n        if (func) func(duplicate(data), labels, props, this);\r\n\r\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\r\n        //              that's not actually defined in any SR5Item typing.\r\n        data.properties = props.filter((p) => !!p);\r\n\r\n        return data;\r\n    }\r\n\r\n    getActionTestName(): string {\r\n        const testName = this.getRollName();\r\n        return testName ? testName :  game.i18n.localize('SR5.Action');\r\n    }\r\n\r\n    getOpposedTestName(): string {\r\n        let name = '';\r\n        const action = this.getAction();\r\n        if (action && action.opposed.type) {\r\n            const { opposed } = action;\r\n            if (opposed.type !== 'custom') {\r\n                name = `${Helpers.label(opposed.type)}`;\r\n            } else if (opposed.skill) {\r\n                name = `${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n            } else if (opposed.attribute2) {\r\n                name = `${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n            } else if (opposed.attribute) {\r\n                name = `${Helpers.label(opposed.attribute)}`;\r\n            }\r\n        }\r\n\r\n        const mod = this.getOpposedTestModifier();\r\n        if (mod) name += ` ${mod}`;\r\n        return name;\r\n    }\r\n\r\n    getOpposedTestMod(): PartsList<number> {\r\n        const parts = new PartsList<number>();\r\n        if (this.hasDefenseTest()) {\r\n            if (this.isAreaOfEffect()) {\r\n                parts.addUniquePart('SR5.Aoe', -2);\r\n            }\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense !== 'SR5.DuckOrCover') {\r\n                        const fireMode = +fireModeData.defense;\r\n                        parts.addUniquePart('SR5.FireMode', fireMode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return parts;\r\n    }\r\n\r\n    getOpposedTestModifier(): string {\r\n        const testMod = this.getOpposedTestMod();\r\n        const total = testMod.total;\r\n        if (total) return `(${total})`;\r\n        else {\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense === 'SR5.DuckOrCover') {\r\n                        return game.i18n.localize('SR5.DuckOrCover');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n     getBlastData(actionTestData?: ActionTestData): BlastData | undefined {\r\n        if (this.isSpell() && this.isAreaOfEffect()) {\r\n            const data = this.data.data as SpellData;\r\n\r\n            // By default spell distance is equal to it's Force.\r\n            let distance = this.getLastSpellForce().value;\r\n\r\n            // Except for predefined user test selection.\r\n            if (actionTestData?.spell) {\r\n                distance = actionTestData.spell.force;\r\n            }\r\n\r\n            // Extended spells have a longer range.\r\n            // TODO: data.extended is not defined in typing. It only exists under data.detection or data.action\r\n            // @ts-ignore\r\n            if (data.extended) distance *= 10;\r\n            const dropoff = 0;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            }\r\n\r\n        } else if (this.isGrenade()) {\r\n            const data = this.data.data as WeaponData;\r\n\r\n            const distance = data.thrown.blast.radius;\r\n            const dropoff = data.thrown.blast.dropoff;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            }\r\n\r\n        } else if (this.hasExplosiveAmmo()) {\r\n            const data = this.data.data as WeaponData;\r\n\r\n            const ammo = this.getEquippedAmmo();\r\n            const ammoData = ammo.data as Ammo;\r\n            const distance = ammoData.data.blast.radius;\r\n            const dropoff = ammoData.data.blast.dropoff;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            };\r\n        }\r\n    }\r\n\r\n    getEquippedAmmo(): SR5Item {\r\n        const equippedAmmos = (this.items || []).filter((item) =>\r\n            item.isAmmo() &&\r\n            item.isEquipped());\r\n\r\n        // Cast Typing isn't a mistake, so long as isAmmo is filtered.\r\n        return equippedAmmos[0];\r\n    }\r\n\r\n    getEquippedMods(): SR5Item[] {\r\n        return (this.items || []).filter((item) =>\r\n            item.isWeaponModification() &&\r\n            item.isEquipped());\r\n    }\r\n\r\n    hasExplosiveAmmo(): boolean {\r\n        const ammo = this.getEquippedAmmo();\r\n        if (!ammo) return false;\r\n        const data = ammo.data.data as AmmoData;\r\n        return data.blast.radius > 0;\r\n    }\r\n\r\n    async equipWeaponMod(iid) {\r\n        const mod = this.getOwnedItem(iid);\r\n        if (mod) {\r\n            const dupData = duplicate(mod.data);\r\n            const data = dupData.data as TechnologyPartData;\r\n            data.technology.equipped = !this.isEquipped();\r\n            await this.updateOwnedItem(dupData);\r\n        }\r\n    }\r\n\r\n    hasAmmo(): boolean {\r\n        return this.wrapper.hasAmmo();\r\n    }\r\n\r\n    async useAmmo(fireMode) {\r\n        const weapon = duplicate(this.asWeaponData());\r\n        if (weapon) {\r\n            const { ammo } = weapon.data;\r\n            ammo.current.value = Math.max(0, ammo.current.value - fireMode);\r\n\r\n            return await this.update(weapon);\r\n        }\r\n    }\r\n\r\n    async reloadAmmo() {\r\n        const data = duplicate(this.asWeaponData());\r\n\r\n        if (!data) return;\r\n\r\n        const { ammo } = data.data;\r\n        const diff = ammo.current.max - ammo.current.value;\r\n        ammo.current.value = ammo.current.max;\r\n\r\n        if (ammo.spare_clips) {\r\n            ammo.spare_clips.value = Math.max(0, ammo.spare_clips.value - 1);\r\n        }\r\n\r\n        await this.update(data);\r\n\r\n        const newAmmunition = (this.items || [])\r\n            .filter((i) => i.data.type === 'ammo')\r\n            .reduce((acc: Entity.Data[], item) => {\r\n                const ammoData = item.asAmmoData();\r\n\r\n                if (ammoData && ammoData.data.technology.equipped) {\r\n                    const { technology } = ammoData.data;\r\n                    const qty = typeof technology.quantity === 'string' ? 0 : technology.quantity;\r\n                    technology.quantity = Math.max(0, qty - diff);\r\n                    acc.push(item.data);\r\n                }\r\n                return acc;\r\n            }, []);\r\n\r\n        if (newAmmunition && newAmmunition.length) {\r\n            await this.updateOwnedItem(newAmmunition);\r\n        }\r\n    }\r\n\r\n    async equipAmmo(iid) {\r\n        // only allow ammo that was just clicked to be equipped\r\n        const ammo = this.items\r\n            .filter((item) => item.type === 'ammo')\r\n            .map((item) => {\r\n                const ownedItem = this.getOwnedItem(item._id);\r\n                const ammoData = ownedItem?.asAmmoData();\r\n\r\n                if (ownedItem && ammoData) {\r\n                    ammoData.data.technology.equipped = iid === item._id;\r\n                    return ownedItem.data;\r\n                }\r\n            });\r\n        await this.updateOwnedItem(ammo);\r\n    }\r\n\r\n    async addNewLicense() {\r\n        const sin = duplicate(this.asSinData());\r\n        if (!sin) return;\r\n\r\n        // NOTE: This might be related to Foundry data serialization sometimes returning arrays as ordered HashMaps...\r\n        if (typeof sin.data.licenses === 'object') {\r\n            // @ts-ignore\r\n            sin.data.licenses = Object.values(sin.data.licenses);\r\n        }\r\n\r\n        sin.data.licenses.push({\r\n            name: '',\r\n            rtg: '',\r\n            description: '',\r\n        });\r\n\r\n        await this.update(sin);\r\n    }\r\n\r\n    getRollPartsList(): ModList<number> {\r\n        console.error('getRollPartsList');\r\n        // we only have a roll if we have an action or an actor\r\n        const action = this.getAction();\r\n        if (!action || !this.actor) return [];\r\n\r\n        const parts = new PartsList(duplicate(this.getModifierList()));\r\n\r\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\r\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\r\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\r\n\r\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\r\n\r\n        // if we have a valid skill, don't look for a second attribute\r\n        if (skill && skill.label) {\r\n            parts.addUniquePart(skill.label, skill.value);\r\n            if (skill.value === 0) {\r\n                parts.addUniquePart('SR5.Defaulting', -1);\r\n            }\r\n        }\r\n        else if (attribute2 && attribute2.label) {\r\n            parts.addPart(attribute2.label, attribute2.value);\r\n        }\r\n\r\n        const spec = this.getActionSpecialization();\r\n        if (spec) parts.addUniquePart(spec, 2);\r\n\r\n        //@ts-ignore parseInt does allow for number type parameter.\r\n        const mod = parseInt(this.data.data.action.mod || 0);\r\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\r\n\r\n        const atts: (AttributeField | SkillField)[] | boolean = [];\r\n        if (attribute !== undefined) atts.push(attribute);\r\n        if (attribute2 !== undefined) atts.push(attribute2);\r\n        if (skill !== undefined) atts.push(skill);\r\n        // add global parts from actor\r\n        this.actor._addGlobalParts(parts);\r\n        this.actor._addMatrixParts(parts, atts);\r\n        this._addWeaponParts(parts);\r\n\r\n        return parts.list;\r\n    }\r\n\r\n    calculateRecoil() {\r\n        const lastFireMode = this.getLastFireMode();\r\n        if (!lastFireMode) return 0;\r\n        if (lastFireMode.value === 20) return 0;\r\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\r\n    }\r\n\r\n    _addWeaponParts(parts: PartsList<number>) {\r\n        if (this.isRangedWeapon()) {\r\n            const recoil = this.calculateRecoil();\r\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\r\n        }\r\n    }\r\n\r\n    isSin(): boolean {\r\n        return this.wrapper.isSin();\r\n    }\r\n\r\n    asSinData(): Sin | undefined {\r\n        if (this.isSin()) {\r\n            return this.data as Sin;\r\n        }\r\n    }\r\n\r\n    isLifestyle(): boolean {\r\n        return this.wrapper.isLifestyle();\r\n    }\r\n\r\n    asLifestyleData(): Lifestyle | undefined {\r\n        if (this.isLifestyle()) {\r\n            return this.data as Lifestyle;\r\n        }\r\n    }\r\n\r\n    isAmmo(): boolean {\r\n        return this.wrapper.isAmmo();\r\n    }\r\n\r\n    asAmmoData(): Ammo | undefined {\r\n        if (this.isAmmo()) {\r\n            return this.data as Ammo;\r\n        }\r\n    }\r\n\r\n    isModification(): boolean {\r\n        return this.wrapper.isModification();\r\n    }\r\n\r\n    asModificationData(): Modification | undefined {\r\n        if (this.isModification()) {\r\n            return this.data as Modification;\r\n        }\r\n    }\r\n\r\n    isWeaponModification(): boolean {\r\n        return this.wrapper.isWeaponModification();\r\n    }\r\n\r\n    isArmorModification(): boolean {\r\n        return this.wrapper.isArmorModification();\r\n    }\r\n\r\n    isProgram(): boolean {\r\n        return this.wrapper.isProgram();\r\n    }\r\n\r\n    asProgramData(): Program | undefined {\r\n        if (this.isProgram()) {\r\n            return this.data as Program;\r\n        }\r\n    }\r\n\r\n    isQuality(): boolean {\r\n        return this.wrapper.isQuality();\r\n    }\r\n\r\n    asQualityData(): Quality | undefined {\r\n        if (this.isQuality()) {\r\n            return this.data as Quality;\r\n        }\r\n    }\r\n\r\n    isAdeptPower(): boolean {\r\n        return this.data.type === 'adept_power';\r\n    }\r\n\r\n    asAdeptPowerData(): AdeptPower|undefined {\r\n        if (this.isAdeptPower())\r\n            return this.data as AdeptPower;\r\n    }\r\n\r\n    async removeLicense(index) {\r\n        const data = duplicate(this.asSinData());\r\n        if (data) {\r\n            data.data.licenses.splice(index, 1);\r\n            await this.update(data);\r\n        }\r\n    }\r\n\r\n    isAction(): boolean {\r\n        return this.wrapper.isAction();\r\n    }\r\n\r\n    asActionData(): Action | undefined {\r\n        if (this.isAction()) {\r\n            return this.data as Action;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async rollOpposedTest(target: SR5Actor, attack: AttackData, event):  Promise<ShadowrunRoll | undefined> {\r\n        const options = {\r\n            event,\r\n            fireModeDefense: 0,\r\n            cover: false,\r\n            attack\r\n        };\r\n\r\n        const parts = this.getOpposedTestMod();\r\n        const action = this.getAction();\r\n        if (!action) return;\r\n\r\n        const { opposed } = action;\r\n\r\n        if (opposed.type === 'defense') {\r\n            return await this.rollDefense(target, options);\r\n\r\n        } else if (opposed.type === 'soak') {\r\n            options['damage'] = attack?.damage;\r\n            options['attackerHits'] = attack?.hits;\r\n            return await target.rollSoak(options, parts.list);\r\n\r\n        } else if (opposed.type === 'armor') {\r\n            return target.rollArmor(options);\r\n\r\n        } else if (opposed.skill && opposed.attribute) {\r\n            const skill = target.getSkill(opposed.skill);\r\n\r\n            if (!skill) {\r\n                ui.notifications.error(game.i18n.localize(\"SR5.Errors.MissingSkill\"));\r\n                return;\r\n            }\r\n\r\n            return target.rollSkill(skill, {\r\n                ...options,\r\n                attribute: opposed.attribute,\r\n            });\r\n\r\n        } else if (opposed.attribute && opposed.attribute2) {\r\n            return target.rollTwoAttributes([opposed.attribute, opposed.attribute2], options);\r\n\r\n        } else if (opposed.attribute) {\r\n            return target.rollSingleAttribute(opposed.attribute, options);\r\n\r\n        }\r\n    }\r\n\r\n    async rollTestType(type: string, attack: AttackData, event, target: SR5Actor) {\r\n        if (type === 'opposed') {\r\n            await this.rollOpposedTest(target, attack, event);\r\n        }\r\n        if (type === 'action') {\r\n            await this.castAction(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rolls a test using the latest stored data on the item (force, fireMode, level)\r\n     * @param event - mouse event\r\n     * @param actionTestData\r\n     * @param options - any additional roll options to pass along - note that currently the Item will overwrite -- WIP\r\n     */\r\n    async rollTest(event, actionTestData?: ActionTestData): Promise<ShadowrunRoll | undefined> {\r\n\r\n        const roll = await ShadowrunRoller.itemRoll(event, this, actionTestData);\r\n        if (!roll) return;\r\n\r\n        await ShadowrunRoller.resultingItemRolls(event, this, actionTestData);\r\n\r\n        return roll;\r\n    }\r\n\r\n    static getItemFromMessage(html): SR5Item | undefined {\r\n        const card = html.find('.chat-card');\r\n        let actor;\r\n        const tokenKey = card.data('tokenId');\r\n        if (tokenKey) {\r\n            const [sceneId, tokenId] = tokenKey.split('.');\r\n            let token;\r\n            if (sceneId === canvas?.scene._id) token = canvas.tokens.get(tokenId);\r\n            else {\r\n                const scene: Scene = game.scenes.get(sceneId);\r\n                if (!scene) return;\r\n                // @ts-ignore\r\n                const tokenData = scene.data.tokens.find((t) => t.id === Number(tokenId));\r\n                if (tokenData) token = new Token(tokenData);\r\n            }\r\n            if (!token) return;\r\n            actor = Actor.fromToken(token);\r\n        } else actor = game.actors.get(card.data('actorId'));\r\n\r\n        if (!actor) return;\r\n        const itemId = card.data('itemId');\r\n        return actor.getOwnedItem(itemId);\r\n    }\r\n\r\n    static getTargets() {\r\n        const { character } = game.user;\r\n        const { controlled } = canvas.tokens;\r\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\r\n        if (character && controlled.length === 0) targets.push(character);\r\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\r\n        return targets;\r\n    }\r\n\r\n    getActionTests(): Test[] {\r\n        if (!this.hasRoll) return []\r\n\r\n        return [{\r\n            label: this.getActionTestName(),\r\n            type: 'action',\r\n        }];\r\n    }\r\n\r\n    getOpposedTests(): Test[] {\r\n        if (!this.hasOpposedRoll) {\r\n            return [];\r\n        }\r\n        return [{\r\n            label: this.getOpposedTestName(),\r\n            type: 'opposed',\r\n        }];\r\n    }\r\n\r\n    /**\r\n     * Create an item in this item\r\n     * @param itemData\r\n     * @param options\r\n     */\r\n    async createOwnedItem(itemData, options = {}) {\r\n        if (!Array.isArray(itemData)) itemData = [itemData];\r\n        // weapons accept items\r\n        if (this.type === 'weapon') {\r\n            const currentItems = duplicate(this.getEmbeddedItems());\r\n\r\n            itemData.forEach((ogItem) => {\r\n                const item = duplicate(ogItem);\r\n                item._id = randomID(16);\r\n                if (item.type === 'ammo' || item.type === 'modification') {\r\n                    if (item?.data?.technology?.equipped) {\r\n                        item.data.technology.equipped = false;\r\n                    }\r\n                    currentItems.push(item);\r\n                }\r\n            });\r\n\r\n            await this.setEmbeddedItems(currentItems);\r\n        }\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare embeddedItems\r\n     */\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n        let items = this.getEmbeddedItems();\r\n\r\n        // Templates and further logic need a items HashMap, yet the flag provides an array.\r\n        if (items) {\r\n\r\n            const existing = (this.items || []).reduce((object, i) => {\r\n                object[i.id] = i;\r\n                return object;\r\n            }, {});\r\n\r\n            // Merge possible changes / new items from the flag into the current item instance.\r\n            this.items = items.map((item) => {\r\n                if (item._id in existing) {\r\n                    const currentItem = existing[item._id];\r\n\r\n                    // Patch .data isn't really anymore but do it for consistency.\r\n                    // Patch ._data is needed for Item.prepareData to work, as it's simply duplicating _data over data.\r\n                    // Otherwise old item data will be used for value preparation.\r\n                    currentItem.data = item;\r\n                    currentItem._data = item;\r\n                    currentItem.prepareData();\r\n                    return currentItem;\r\n\r\n                } else {\r\n                    // dirty things done here\r\n                    // @ts-ignore\r\n                    return Item.createOwned(item, this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getOwnedItem(itemId): SR5Item | undefined {\r\n        const items = this.items;\r\n        if (!items) return;\r\n        return items.find((i) => i._id === itemId);\r\n    }\r\n\r\n    async updateOwnedItem(changes) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n        changes = Array.isArray(changes) ? changes : [changes];\r\n        if (!changes || changes.length === 0) return;\r\n        changes.forEach((itemChanges) => {\r\n            const index = items.findIndex((i) => i._id === itemChanges._id);\r\n            if (index === -1) return;\r\n            const item = items[index];\r\n            if (item) {\r\n                itemChanges = expandObject(itemChanges);\r\n                mergeObject(item, itemChanges);\r\n                items[index] = item;\r\n                // this.items[index].data = items[index];\r\n            }\r\n        });\r\n\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async updateEmbeddedEntity(embeddedName: string, updateData: object | object[], options?: object) {\r\n        await this.updateOwnedItem(updateData);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an owned item\r\n     * @param deleted\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async deleteOwnedItem(deleted) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n\r\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\r\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\r\n        items.splice(idx, 1);\r\n        // we need to clear the items when one is deleted or it won't actually be deleted\r\n        await this.clearEmbeddedItems();\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async openPdfSource() {\r\n        // Check for PDFoundry module hook: https://github.com/Djphoenix719/PDFoundry\r\n        if (!ui['PDFoundry']) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.DIALOG.MissingModuleContent'));\r\n            return;\r\n        }\r\n\r\n        const source = this.getBookSource();\r\n        if (source === '') {\r\n            // @ts-ignore\r\n            ui.notifications.error(game.i18n.localize('SR5.SourceFieldEmptyError'));\r\n        }\r\n        // TODO open PDF to correct location\r\n        // parse however you need, all \"buttons\" will lead to this function\r\n        const [code, page] = source.split(' ');\r\n\r\n        //@ts-ignore\r\n        ui.PDFoundry.openPDFByCode(code, { page: parseInt(page) });\r\n    }\r\n\r\n    _canDealDamage(): boolean {\r\n        // NOTE: Double negation to force boolean comparison casting.\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return !!action.damage.type.base;\r\n    }\r\n\r\n    getAction(): ActionRollData|undefined {\r\n        return this.wrapper.getAction();\r\n    }\r\n\r\n    getExtended(): boolean {\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return action.extended;\r\n    }\r\n\r\n    getTechnology(): TechnologyData|undefined {\r\n        return this.wrapper.getTechnology();\r\n    }\r\n\r\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\r\n        return this.wrapper.getRange();\r\n    }\r\n\r\n    getWeaponRange(): RangeWeaponData|undefined {\r\n        if (this.isRangedWeapon())\r\n            return this.getRange() as RangeWeaponData;\r\n    }\r\n\r\n    getAttackData(hits: number, actionTestData?: ActionTestData): AttackData | undefined {\r\n        if (!this._canDealDamage()) {\r\n            return;\r\n        }\r\n\r\n        const action = this.getAction();\r\n        if (!action) return;\r\n\r\n        const {damage} = action;\r\n\r\n        // Add custom action damage value based on Attribute.\r\n        if (damage.attribute) {\r\n            const { attribute } = damage;\r\n            const att = this.actor.findAttribute(attribute);\r\n            if (att) {\r\n                damage.mod = PartsList.AddUniquePart(damage.mod, att.label, att.value);\r\n                damage.value = Helpers.calcTotal(damage);\r\n            }\r\n        }\r\n\r\n        const data: AttackData = {\r\n            hits,\r\n            damage,\r\n        };\r\n\r\n        // Modify action damage by spell damage.\r\n        if (this.isCombatSpell() && actionTestData?.spell) {\r\n            const force = actionTestData.spell.force;\r\n            const damageParts = new PartsList(data.damage.mod);\r\n            const spellDamage = this.getSpellDamage(force, hits);\r\n\r\n            if (spellDamage) {\r\n                data.force = force;\r\n                data.damage.base = spellDamage.base;\r\n                data.damage.value = spellDamage.base + damageParts.total;\r\n                data.damage.ap.value = -spellDamage.ap.value + damageParts.total;\r\n                data.damage.ap.base = -spellDamage.ap.value;\r\n            }\r\n        }\r\n\r\n        if (this.isComplexForm() && actionTestData?.complexForm) {\r\n            data.level = actionTestData.complexForm.level;\r\n        }\r\n\r\n        if (this.isMeleeWeapon()) {\r\n            data.reach = this.getReach();\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        if (this.isRangedWeapon()) {\r\n            data.fireMode = actionTestData?.rangedWeapon?.fireMode;\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        const blastData = this.getBlastData(actionTestData);\r\n        if (blastData) data.blast = blastData;\r\n\r\n        return data;\r\n    }\r\n\r\n    getRollName(): string {\r\n        if (this.isRangedWeapon()) {\r\n            return game.i18n.localize('SR5.RangeWeaponAttack');\r\n        }\r\n        if (this.isMeleeWeapon()) {\r\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\r\n        }\r\n        if (this.isCombatSpell()) {\r\n            return game.i18n.localize('SR5.SpellAttack');\r\n        }\r\n        if (this.isSpell()) {\r\n            return game.i18n.localize('SR5.SpellCast');\r\n        }\r\n        if (this.hasRoll) {\r\n            return this.name\r\n        }\r\n\r\n        return DEFAULT_ROLL_NAME;\r\n    }\r\n\r\n    getLimit(): LimitField | undefined {\r\n        // @ts-ignore // TODO: This should use this.getAction(). However action.limit doesn't contain label field.\r\n        const limit = duplicate(this.data.data.action?.limit);\r\n        if (!limit) return undefined;\r\n        // go through and set the label correctly\r\n        if (this.data.type === 'weapon') {\r\n            limit.label = 'SR5.Accuracy';\r\n        } else if (limit?.attribute) {\r\n            limit.label = CONFIG.SR5.limits[limit.attribute];\r\n        } else if (this.isSpell()) {\r\n            limit.value = this.getLastSpellForce().value;\r\n            limit.label = 'SR5.Force';\r\n        } else if (this.isComplexForm()) {\r\n            limit.value = this.getLastComplexFormLevel().value;\r\n            limit.label = 'SR5.Level';\r\n        } else {\r\n            limit.label = 'SR5.Limit';\r\n        }\r\n\r\n        // adjust limit value for actor data\r\n        if (limit.attribute) {\r\n            const att = this.actor.findLimit(limit.attribute);\r\n            if (att) {\r\n                limit.mod = PartsList.AddUniquePart(limit.mod, att.label, att.value);\r\n                Helpers.calcTotal(limit);\r\n            }\r\n        }\r\n\r\n        return limit;\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<Entity> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n\r\n    /**\r\n     * Passthrough functions\r\n     */\r\n    isAreaOfEffect(): boolean {\r\n        return this.wrapper.isAreaOfEffect();\r\n    }\r\n\r\n    isArmor(): boolean {\r\n        return this.wrapper.isArmor();\r\n    }\r\n\r\n    asArmorData(): Armor | undefined {\r\n        if (this.isArmor()) {\r\n            return this.data as Armor;\r\n        }\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.wrapper.hasArmorBase();\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.wrapper.hasArmorAccessory();\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.wrapper.hasArmor();\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.wrapper.isGrenade();\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.wrapper.isWeapon();\r\n    }\r\n\r\n    asWeaponData(): Weapon | undefined {\r\n        if (this.wrapper.isWeapon()) {\r\n            return this.data as Weapon;\r\n        }\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.wrapper.isCyberware();\r\n    }\r\n\r\n    asCyberwareData(): Cyberware | undefined {\r\n        if (this.isCyberware()) {\r\n            return this.data as Cyberware;\r\n        }\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.wrapper.isCombatSpell();\r\n    }\r\n\r\n    isDirectCombatSpell(): boolean {\r\n        return this.wrapper.isDirectCombatSpell();\r\n    }\r\n\r\n    isIndirectCombatSpell(): boolean {\r\n        return this.wrapper.isIndirectCombatSpell();\r\n    }\r\n\r\n    isManaSpell(): boolean {\r\n        return this.wrapper.isManaSpell();\r\n    }\r\n\r\n    isPhysicalSpell(): boolean {\r\n        return this.wrapper.isPhysicalSpell();\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.wrapper.isRangedWeapon();\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.wrapper.isSpell();\r\n    }\r\n\r\n    asSpellData(): Spell | undefined {\r\n        if (this.isSpell()) {\r\n            return this.data as Spell;\r\n        }\r\n    }\r\n\r\n    isSpritePower(): boolean {\r\n        return this.wrapper.isSpritePower();\r\n    }\r\n\r\n    asSpritePowerData(): SpritePower | undefined {\r\n        if (this.isSpritePower()) {\r\n            return this.data as SpritePower;\r\n        }\r\n    }\r\n\r\n    isBioware(): boolean {\r\n        return this.wrapper.isBioware();\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.wrapper.isComplexForm();\r\n    }\r\n\r\n    asComplexFormData(): ComplexForm | undefined {\r\n        if (this.isComplexForm()) {\r\n            return this.data as ComplexForm;\r\n        }\r\n    }\r\n\r\n    isContact(): boolean {\r\n        return this.wrapper.isContact();\r\n    }\r\n\r\n    asContactData(): Contact | undefined {\r\n        if (this.isContact()) {\r\n            return this.data as Contact;\r\n        }\r\n    }\r\n\r\n    isCritterPower(): boolean {\r\n        return this.wrapper.isCritterPower();\r\n    }\r\n\r\n    asCritterPowerData(): CritterPower | undefined {\r\n        if (this.isCritterPower()) {\r\n            return this.data as CritterPower;\r\n        }\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.wrapper.isMeleeWeapon();\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.wrapper.isDevice();\r\n    }\r\n\r\n    asDeviceData(): Device | undefined {\r\n        if (this.isDevice()) {\r\n            return this.data as Device;\r\n        }\r\n    }\r\n\r\n    isEquipment(): boolean {\r\n        return this.wrapper.isEquipment();\r\n    }\r\n\r\n    asEquipmentData(): Equipment | undefined {\r\n        if (this.isEquipment()) {\r\n            return this.data as Equipment;\r\n        }\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.wrapper.isEquipped();\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.wrapper.isCyberdeck();\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.wrapper.getBookSource();\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.wrapper.getConditionMonitor();\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.wrapper.getRating();\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.wrapper.getArmorValue();\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        return this.wrapper.getArmorElements();\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.wrapper.getEssenceLoss();\r\n    }\r\n\r\n    getASDF() {\r\n        return this.wrapper.getASDF();\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.wrapper.getActionSkill();\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.wrapper.getActionAttribute();\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.wrapper.getActionAttribute2();\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        let limit = this.wrapper.getActionLimit();\r\n        // get the limit modifiers from the actor if we have them\r\n        const action = this.wrapper.getAction();\r\n        if (action?.limit.attribute && limit && this.actor) {\r\n            const { attribute } = action.limit;\r\n            const att = this.actor.findAttribute(attribute);\r\n            if (att) {\r\n                limit += att.value;\r\n            }\r\n        }\r\n        return limit;\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.wrapper.getModifierList();\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        return this.wrapper.getActionSpecialization();\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.wrapper.getDrain();\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.wrapper.getFade();\r\n    }\r\n\r\n    getRecoilCompensation(includeActor: boolean = true): number {\r\n        let rc = this.wrapper.getRecoilCompensation();\r\n        if (includeActor && this.actor) {\r\n            rc += this.actor.getRecoilCompensation();\r\n        }\r\n        return rc;\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            const data = this.data.data as WeaponData;\r\n            return data.melee.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getCondition(): ConditionData|undefined {\r\n        const technology = this.getTechnology();\r\n        if (technology && \"condition_monitor\" in technology)\r\n            return technology.condition_monitor;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        if (!this.hasOpposedRoll) return false;\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return action.opposed.type === 'defense';\r\n    }\r\n\r\n    /** Use this method to get the base damage of spell, before any opposing action\r\n     *\r\n     * NOTE: This will NOT give you modified damage for direct combat spells\r\n     */\r\n    getSpellDamage(force: number, hits: number): DamageData|undefined {\r\n        if (!this.isCombatSpell()) return;\r\n\r\n        const action = this.getAction();\r\n        if (!action) return;\r\n\r\n        if (this.isDirectCombatSpell()) {\r\n            const damage = hits;\r\n\r\n            return Helpers.createDamageData(damage, action.damage.type.value);\r\n        } else if (this.isIndirectCombatSpell()) {\r\n            const damage = force;\r\n            const ap = -force;\r\n\r\n            return Helpers.createDamageData(damage, action.damage.type.value, -ap)\r\n        }\r\n    }\r\n\r\n    // TODO: Move into a rule section.\r\n    async rollDefense(target: SR5Actor, options: DefenseRollOptions): Promise<ShadowrunRoll | undefined> {\r\n        // TODO: Maybe move into defense methods and give the actor access to the item.\r\n        const opposedParts = this.getOpposedTestMod();\r\n\r\n        if (this.isWeapon()) {\r\n            options.cover = true;\r\n            if (options.attack?.fireMode?.defense) {\r\n                options.fireModeDefense = +options.attack.fireMode.defense;\r\n            }\r\n\r\n            return await target.rollRangedDefense(options, opposedParts.list);\r\n        }\r\n\r\n        if (this.isDirectCombatSpell()) {\r\n            return await target.rollDirectSpellDefense(this, options as SpellDefenseOptions);\r\n        }\r\n\r\n        if (this.isIndirectCombatSpell()) {\r\n            return await target.rollIndirectSpellDefense(this, options as SpellDefenseOptions);\r\n        }\r\n    }\r\n}\r\n","import { DataWrapper } from '../dataWrappers/DataWrapper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport ModList = Shadowrun.ModList;\r\nimport SR5ItemDataPartial = Shadowrun.SR5ItemDataPartial;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport SpellData = Shadowrun.SpellData;\r\nimport SinData = Shadowrun.SinData;\r\nimport Sin = Shadowrun.Sin;\r\nimport SR5ItemData = Shadowrun.SR5ItemData;\r\nimport ActionPartData = Shadowrun.ActionPartData;\r\nimport Weapon = Shadowrun.Weapon;\r\nimport Modification = Shadowrun.Modification;\r\nimport TechnologyData = Shadowrun.TechnologyData;\r\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\r\nimport SpellRange = Shadowrun.SpellRange;\r\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\r\n\r\nexport class SR5ItemDataWrapper extends DataWrapper<SR5ItemType> {\r\n    getType() {\r\n        return this.data.type;\r\n    }\r\n    getData(): SR5ItemDataPartial {\r\n        return (this.data.data as unknown) as SR5ItemDataPartial;\r\n    }\r\n\r\n    isAreaOfEffect(): boolean {\r\n        // TODO figure out how to detect explosive ammo\r\n        return this.isGrenade() || (this.isSpell() && this.getData().range === 'los_a'); //|| this.hasExplosiveAmmo();\r\n    }\r\n\r\n    /** Should only be used to check for actual armor item type.\r\n     * NOTE: Should you only care about a possible armor value use couldHaveArmor instead.\r\n     */\r\n    isArmor(): boolean {\r\n        return this.data.type === 'armor';\r\n    }\r\n\r\n    /** Will give an indicator if an item provides an armor value, without locking into only the Armor item type.\r\n     * NOTE: Should you only care about the armor item type use isArmor instead.\r\n     */\r\n    couldHaveArmor(): boolean {\r\n        const armor = this.getData().armor;\r\n        return this.isArmor() || armor !== undefined;\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.hasArmor() && !this.getData().armor?.mod;\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.hasArmor() && (this.getData().armor?.mod ?? false);\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.getArmorValue() > 0;\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.isThrownWeapon() && (this.getData().thrown?.blast.radius ?? 0) > 0;\r\n    }\r\n\r\n    isThrownWeapon(): boolean {\r\n        return this.isWeapon() && this.getData().category === 'thrown';\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.data.type === 'weapon';\r\n    }\r\n\r\n    isModification(): boolean {\r\n        return this.data.type === 'modification';\r\n    }\r\n\r\n    isWeaponModification(): boolean {\r\n        if (!this.isModification()) return false;\r\n        const modification = this.data as Modification;\r\n        return modification.data.type === 'weapon';\r\n    }\r\n\r\n    isArmorModification(): boolean {\r\n        if (!this.isModification()) return false;\r\n        const modification = this.data as Modification;\r\n        return modification.data.type === 'armor';\r\n    }\r\n\r\n    isProgram(): boolean {\r\n        return this.data.type === 'program';\r\n    }\r\n\r\n    isQuality(): boolean {\r\n        return this.data.type === 'quality';\r\n    }\r\n\r\n    isAmmo(): boolean {\r\n        return this.data.type === 'ammo';\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.data.type === 'cyberware';\r\n    }\r\n\r\n    isBioware(): boolean {\r\n        return this.data.type === 'bioware';\r\n    }\r\n\r\n    isBodyware(): boolean {\r\n        return this.isCyberware() || this.isBioware();\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.isSpell() && this.getData().category === 'combat';\r\n    }\r\n\r\n    isDirectCombatSpell(): boolean {\r\n        if (!this.isCombatSpell()) return false;\r\n        return this.getData()?.combat?.type === 'direct';\r\n    }\r\n\r\n    isIndirectCombatSpell(): boolean {\r\n        if (!this.isCombatSpell()) return false;\r\n        return this.getData()?.combat?.type === 'indirect';\r\n    }\r\n\r\n    isManaSpell(): boolean {\r\n        if (!this.isSpell()) return false;\r\n        // Cast as partial spelldata due to conflicting .type between differing item types.\r\n        const spellData = this.getData() as Partial<SpellData>;\r\n        return spellData.type === 'mana';\r\n    }\r\n\r\n    isPhysicalSpell(): boolean {\r\n        if (!this.isSpell()) return false;\r\n        // Cast as partial spelldata due to conflicting .type between differing item types.\r\n        const spellData = this.getData() as Partial<SpellData>;\r\n        return spellData.type === 'physical';\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.isWeapon() && this.getData().category === 'range';\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.data.type === 'spell';\r\n    }\r\n\r\n    isSpritePower(): boolean {\r\n        return this.data.type === 'sprite_power';\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.data.type === 'complex_form';\r\n    }\r\n\r\n    isContact(): boolean {\r\n        return this.data.type === 'contact';\r\n    }\r\n\r\n    isCritterPower(): boolean {\r\n        return this.data.type === 'critter_power';\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.data.type === 'weapon' && this.getData().category === 'melee';\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.data.type === 'device';\r\n    }\r\n\r\n    isEquipment(): boolean {\r\n        return this.data.type === 'equipment';\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.getData().technology?.equipped || false;\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.isDevice() && this.getData().category === 'cyberdeck';\r\n    }\r\n\r\n    isSin(): boolean {\r\n        return this.data.type === 'sin';\r\n    }\r\n\r\n    isLifestyle(): boolean {\r\n        return this.data.type === 'lifestyle';\r\n    }\r\n\r\n    getId(): string {\r\n        return this.data._id;\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.getData().description?.source ?? '';\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.getData().technology?.condition_monitor ?? { value: 0, max: 0, label: '' };\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.getData().technology?.rating || 0;\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.getData()?.armor?.value ?? 0;\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        // TODO clean this up\r\n        const { fire, electricity, cold, acid } = this.getData().armor || {};\r\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\r\n    }\r\n\r\n    getName(): string {\r\n        return this.data.name;\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.getData()?.essence ?? 0;\r\n    }\r\n\r\n    getAmmo() {\r\n        return this.getData().ammo;\r\n    }\r\n\r\n    getASDF() {\r\n        if (!this.isDevice()) return undefined;\r\n\r\n        // matrix attributes are set up as an object\r\n        const matrix = {\r\n            attack: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            sleaze: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            data_processing: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n            firewall: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n        };\r\n\r\n        if (this.isCyberdeck()) {\r\n            /**\r\n             * {\r\n             *     attN: {\r\n             *         value: number,\r\n             *         att: string (the ASDF attribute)\r\n             *     }\r\n             * }\r\n             */\r\n            const atts: { [key: string]: { value: number; att: string } } | undefined = this.getData().atts;\r\n            if (atts) {\r\n                for (let [key, att] of Object.entries(atts)) {\r\n                    matrix[att.att].value = att.value;\r\n                    matrix[att.att].device_att = key;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    getQuantity(): number | undefined {\r\n        return this.getData()?.technology?.quantity || 1;\r\n    }\r\n\r\n    isAction(): boolean {\r\n        return this.data.type === 'action';\r\n    }\r\n\r\n    getAction(): ActionRollData|undefined {\r\n        return this.getData().action;\r\n    }\r\n\r\n    getActionDicePoolMod(): number | undefined {\r\n        return this.getData().action?.mod;\r\n    }\r\n\r\n    getLimitAttribute(): string | undefined {\r\n        return this.getData().action?.limit?.attribute;\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.getData().action?.skill;\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.getData().action?.attribute;\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.getData().action?.attribute2;\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.getData().action?.limit?.value;\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.getData().action?.dice_pool_mod || [];\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        if (this.getData().action?.spec) return 'SR5.Specialization';\r\n        return undefined;\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.getData().drain || 0;\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.getData().fade || 0;\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        if (!this.isRangedWeapon()) return 0;\r\n        const base = this.getData()?.range?.rc.value ?? '0';\r\n        return Number(base);\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.getData().melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getTechnology(): TechnologyData|undefined {\r\n        if (\"technology\" in this.data.data)\r\n            return this.data.data.technology;\r\n    }\r\n\r\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\r\n        if (!(\"range\" in this.data.data)) return;\r\n\r\n        if (this.data.type === 'critter_power')\r\n            return this.data.data.range as CritterPowerRange;\r\n\r\n        if (this.data.type === 'spell')\r\n            return this.data.data.range as SpellRange;\r\n\r\n        if (this.data.type === 'weapon')\r\n            return this.data.data.range as RangeWeaponData;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.getData().action?.opposed?.type === 'defense';\r\n    }\r\n\r\n    hasAmmo(): boolean {\r\n        const ammo = this.getAmmo();\r\n        return !!ammo\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { SR5Item } from './SR5Item';\r\n\r\n/**\r\n * Extend the basic ItemSheet with some very simple modifications\r\n */\r\nexport class SR5ItemSheet extends ItemSheet {\r\n    item: SR5Item;\r\n    private _shownDesc: any[];\r\n    private _scroll: string;\r\n    constructor(...args) {\r\n        super(...args);\r\n        this._shownDesc = [];\r\n    }\r\n\r\n    getEmbeddedItems() {\r\n        return this.item.items || [];\r\n    }\r\n\r\n    /**\r\n     * Extend and override the default options used by the Simple Item Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'item'],\r\n            width: 650,\r\n            height: 450,\r\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates/item/';\r\n        return `${path}${this.item.data.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Item sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data = super.getData();\r\n        const itemData = data.data;\r\n\r\n        if (itemData.action) {\r\n            try {\r\n                const { action } = itemData;\r\n                if (action.mod === 0) delete action.mod;\r\n                if (action.limit === 0) delete action.limit;\r\n                if (action.damage) {\r\n                    if (action.damage.mod === 0) delete action.damage.mod;\r\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\r\n                }\r\n                if (action.limit) {\r\n                    if (action.limit.mod === 0) delete action.limit.mod;\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n\r\n        if (itemData.technology) {\r\n            try {\r\n                const tech = itemData.technology;\r\n                if (tech.rating === 0) delete tech.rating;\r\n                if (tech.quantity === 0) delete tech.quantity;\r\n                if (tech.cost === 0) delete tech.cost;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        data['config'] = CONFIG.SR5;\r\n        const items = this.getEmbeddedItems();\r\n        const [ammunition, weaponMods, armorMods] = items.reduce(\r\n            (parts: [Item.Data[], Item.Data[], Item.Data[]], item: SR5Item) => {\r\n                if (item.type === 'ammo') parts[0].push(item.data);\r\n                if (item.type === 'modification' && \"type\" in item.data.data && item.data.data.type === 'weapon') parts[1].push(item.data);\r\n                if (item.type === 'modification' && \"type\" in item.data.data && item.data.data.type === 'armor') parts[2].push(item.data);\r\n                return parts;\r\n            },\r\n            [[], [], []],\r\n        );\r\n        data['ammunition'] = ammunition;\r\n        data['weaponMods'] = weaponMods;\r\n        data['armorMods'] = armorMods;\r\n        // TODO set to the proper boolean for if the source PDF can be accessed\r\n        // I'm thinking maybe check for the mod being installed?\r\n        data['hasSourcePdfAvailable'] = true;\r\n\r\n        return data;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html -  The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        if (this.item.type === 'weapon') {\r\n            //@ts-ignore // TODO: Somehow Jquery doesn't have drag/drop in typing\r\n            this.form.ondragover = (event) => this._onDragOver(event);\r\n            //@ts-ignore // TODO: Somehow Jquery doesn't have drag/drop in typing\r\n            this.form.ondrop = (event) => this._onDrop(event);\r\n        }\r\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\r\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\r\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\r\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\r\n\r\n        html.find('.edit-item').click(this._onEditItem.bind(this));\r\n\r\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\r\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\r\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\r\n\r\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\r\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\r\n\r\n        html.find('.open-source-pdf').on('click', this._onOpenSourcePdf.bind(this));\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.list-item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('.hidden').hide();\r\n    }\r\n\r\n    _onDragOver(event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    async _onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        let data;\r\n        try {\r\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n            if (data.type !== 'Item') {\r\n                console.log('Shadowrun5e | Can only drop Items');\r\n            }\r\n        } catch (err) {\r\n            console.log('Shadowrun5e | drop error');\r\n        }\r\n        let item;\r\n        // Case 1 - Data explicitly provided\r\n        if (data.data) {\r\n            // TODO test\r\n            if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\r\n                console.log('Shadowrun5e | Cant drop item on itself');\r\n                // @ts-ignore\r\n                ui.notifications.error('Are you trying to break the game??');\r\n            }\r\n            item = data;\r\n        } else if (data.pack) {\r\n            console.log(data);\r\n            // Case 2 - From a Compendium Pack\r\n            // TODO test\r\n            item = await this._getItemFromCollection(data.pack, data.id);\r\n        } else {\r\n            // Case 3 - From a World Entity\r\n            item = game.items.get(data.id);\r\n        }\r\n\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    _getItemFromCollection(collection, itemId) {\r\n        const pack = game.packs.find((p) => p.collection === collection);\r\n        return pack.getEntity(itemId);\r\n    }\r\n\r\n    _eventId(event) {\r\n        event.preventDefault();\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    async _onOpenSourcePdf(event) {\r\n        event.preventDefault();\r\n        await this.item.openPdfSource();\r\n    }\r\n\r\n    async _onEditItem(event) {\r\n        const item = this.item.getOwnedItem(this._eventId(event));\r\n        if (item) {\r\n            item.sheet.render(true);\r\n        }\r\n    }\r\n\r\n    async _onAddLicense(event) {\r\n        event.preventDefault();\r\n        await this.item.addNewLicense();\r\n    }\r\n\r\n    async _onRemoveLicense(event) {\r\n        event.preventDefault();\r\n        const index = event.currentTarget.dataset.index;\r\n        if (index >= 0) await this.item.removeLicense(index);\r\n    }\r\n\r\n    async _onWeaponModRemove(event) {\r\n        await this._onOwnedItemRemove(event);\r\n    }\r\n\r\n    async _onWeaponModEquip(event) {\r\n        await this.item.equipWeaponMod(this._eventId(event));\r\n    }\r\n\r\n    async _onAddWeaponMod(event) {\r\n        event.preventDefault();\r\n        const type = 'modification';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.modification),\r\n        };\r\n        itemData.data.type = 'weapon';\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        await this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    async _onAmmoReload(event) {\r\n        event.preventDefault();\r\n        await this.item.reloadAmmo();\r\n    }\r\n\r\n    async _onAmmoRemove(event) {\r\n        await this._onOwnedItemRemove(event);\r\n    }\r\n\r\n    async _onAmmoEquip(event) {\r\n        await this.item.equipAmmo(this._eventId(event));\r\n    }\r\n\r\n    async _onAddNewAmmo(event) {\r\n        event.preventDefault();\r\n        const type = 'ammo';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.ammo),\r\n        };\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        await this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    async _onOwnedItemRemove(event) {\r\n         event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /** This is needed to circumvent Application.close setting closed state early, due to it's async animation\r\n     * - The length of the closing animation can't be longer then any await time in the closing cycle\r\n     * - FormApplication._onSubmit will otherwise set ._state to RENDERED even if the Application window has closed already\r\n     * - Subsequent render calls then will show the window again, due to it's state\r\n     *\r\n     * @private\r\n     */\r\n    private fixStaleRenderedState() {\r\n        if (this._state === Application.RENDER_STATES.RENDERED && ui.windows[this.appId] === undefined) {\r\n            console.warn(`SR5ItemSheet app for ${this.entity.name} is set as RENDERED but has no window registered. Fixing app internal render state. This is a known bug.`);\r\n            // Hotfixing instead of this.close() since FormApplication.close() expects form elements, which don't exist anymore.\r\n            this._state = Application.RENDER_STATES.CLOSED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(force = false, options = {}) {\r\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\r\n        this.fixStaleRenderedState();\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(force, options);\r\n        this._restoreScrollPositions();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {Object} item     The item data\r\n * @param {number} slot     The hotbar slot to use\r\n * @returns {Promise}\r\n */\r\nexport async function createItemMacro(item, slot) {\r\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\r\n    let macro = game.macros.entities.find((m) => m.name === item.name);\r\n    if (!macro) {\r\n        macro = (await Macro.create(\r\n            {\r\n                name: item.name,\r\n                type: 'script',\r\n                img: item.img,\r\n                command: command,\r\n                flags: { 'shadowrun5e.itemMacro': true },\r\n            },\r\n            { displaySheet: false },\r\n        )) as Macro;\r\n    }\r\n    if (macro) game.user.assignHotbarMacro(macro, slot);\r\n}\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {string} itemName\r\n * @return {Promise}\r\n */\r\nexport function rollItemMacro(itemName) {\r\n    const speaker = ChatMessage.getSpeaker();\r\n    let actor;\r\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\r\n    if (!actor) actor = game.actors.get(speaker.actor);\r\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\r\n    if (!item) {\r\n        // @ts-ignore\r\n        return ui.notifications.warn(`Your controlled Actor does not have an item named ${itemName}`);\r\n    }\r\n\r\n    return item.castAction();\r\n}","import { HandlebarManager } from './handlebars/HandlebarManager';\r\nimport {HooksManager} from \"./hooks\";\r\n\r\n/* -------------------------------------------- */\r\n/*  Foundry VTT Initialization                  */\r\n/* -------------------------------------------- */\r\n\r\n\r\nHooksManager.registerHooks();\r\nHandlebarManager.registerHelpers();","import { VersionMigration } from './VersionMigration';\r\nimport { LegacyMigration } from './versions/LegacyMigration';\r\nimport { Version0_6_5 } from './versions/Version0_6_5';\r\nimport { Version0_6_10 } from './versions/Version0_6_10';\r\nimport {Version0_7_2} from \"./versions/Version0_7_2\";\r\n\r\ntype VersionDefinition = {\r\n    versionNumber: string;\r\n    migration: VersionMigration;\r\n};\r\nexport class Migrator {\r\n    // Map of all version migrations to their target version numbers.\r\n    private static readonly s_Versions: VersionDefinition[] = [\r\n        { versionNumber: LegacyMigration.TargetVersion, migration: new LegacyMigration() },\r\n        { versionNumber: Version0_6_5.TargetVersion, migration: new Version0_6_5() },\r\n        { versionNumber: Version0_6_10.TargetVersion, migration: new Version0_6_10() },\r\n        { versionNumber: Version0_7_2.TargetVersion, migration: new Version0_7_2() },\r\n    ];\r\n\r\n    //TODO: Call on Init()\r\n    public static async BeginMigration() {\r\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION);\r\n        if (currentVersion === undefined || currentVersion === null) {\r\n            currentVersion = VersionMigration.NO_VERSION;\r\n        }\r\n\r\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\r\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\r\n            return this.compareVersion(versionNumber, currentVersion) === 1;\r\n        });\r\n\r\n        // No migrations are required, exit.\r\n        if (migrations.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\r\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\r\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\r\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\r\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\r\n\r\n        const d = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\r\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\r\n                `<p>${localizedWarningDescription}</p>` +\r\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\r\n            buttons: {\r\n                ok: {\r\n                    label: localizedWarningBegin,\r\n                    callback: () => this.migrate(migrations),\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        d.render(true);\r\n    }\r\n\r\n    private static async migrate(migrations: VersionDefinition[]) {\r\n        // we want to apply migrations in ascending order until we're up to the latest\r\n        migrations.sort((a, b) => {\r\n            return this.compareVersion(a.versionNumber, b.versionNumber);\r\n        });\r\n\r\n        await this.migrateWorld(game, migrations);\r\n        await this.migrateCompendium(game, migrations);\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\r\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\r\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\r\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\r\n        const packsDialog = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\r\n                `<p>${localizedSuccessDescription}</p>` +\r\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: localizedSuccessConfirm,\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        packsDialog.render(true);\r\n    }\r\n\r\n    /**\r\n     * Migrate all world objects\r\n     * @param game\r\n     * @param migrations\r\n     */\r\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\r\n        // Run the migrations in order\r\n        for (const { migration } of migrations) {\r\n            await migration.Migrate(game);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over all world compendium packs\r\n     * @param game Game that will be migrated\r\n     * @param migrations Instances of the version migration\r\n     */\r\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\r\n        // Migrate World Compendium Packs\r\n        const packs = game.packs.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.entity));\r\n\r\n        // Run the migrations in order on each pack.\r\n        for (const pack of packs) {\r\n            for (const { migration } of migrations) {\r\n                await migration.MigrateCompendiumPack(pack);\r\n            }\r\n        }\r\n    }\r\n\r\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\r\n    // updated for typescript\r\n    /**\r\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    public static compareVersion(v1: string, v2: string) {\r\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\r\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\r\n        const k = Math.min(v1.length, v2.length);\r\n        for (let i = 0; i < k; ++i) {\r\n            if (s1[i] > s2[i]) return 1;\r\n            if (s1[i] < s2[i]) return -1;\r\n        }\r\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\r\n    }\r\n}\r\n","import { SR5Actor } from '../actor/SR5Actor';\r\n\r\n/**\r\n * Converts a game's data model from source version to a target version.\r\n * Extending classes are only required to handle items, actors, and scenes,\r\n *  other methods are implementable purely for convenience and atomicity.\r\n */\r\nexport abstract class VersionMigration {\r\n    static readonly MODULE_NAME = 'shadowrun5e';\r\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\r\n    static readonly NO_VERSION = '0';\r\n\r\n    private m_Abort: boolean = false;\r\n    private m_AbortReason: string;\r\n\r\n    /**\r\n     * The allowed version this migrator should be able to operate on.\r\n     */\r\n    public abstract get SourceVersion(): string;\r\n    /**\r\n     * The resulting version this migrator will produce.\r\n     */\r\n    public abstract get TargetVersion(): string;\r\n\r\n    public get SourceVersionFriendlyName(): string {\r\n        return `v${this.SourceVersion}`;\r\n    }\r\n    public get TargetVersionFriendlyName(): string {\r\n        return `v${this.TargetVersion}`;\r\n    }\r\n\r\n    /**\r\n     * Flag the migration to be aborted.\r\n     * @param reason The reason that the migration must be aborted, to be displayed\r\n     *  to the user and returned from the migration call.\r\n     */\r\n    protected abort(reason: string): void {\r\n        this.m_Abort = true;\r\n        this.m_AbortReason = reason;\r\n        // @ts-ignore\r\n        ui.notifications.error(`Data migration has been aborted: ${reason}`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Begin migration for the specified game.\r\n     * @param game The world that should be migrated.\r\n     */\r\n    public async Migrate(game: Game) {\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`${game.i18n.localize('SR5.MIGRATION.BeginNotification')} ${this.SourceVersionFriendlyName} -> ${this.TargetVersionFriendlyName}.`);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.warn(game.i18n.localize('SR5.MIGRATION.DoNotCloseNotification'), {\r\n            permanent: true,\r\n        });\r\n\r\n        // Map of entities to update, store until later to reduce chance of partial updates\r\n        // which may result in impossible game states.\r\n        const entityUpdates: Map<Entity, EntityUpdate> = new Map<Entity, EntityUpdate>();\r\n\r\n        // Migrate World Items\r\n        await this.PreMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateItems(game, entityUpdates);\r\n        await this.PostMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate World Actors\r\n        await this.PreMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateActors(game, entityUpdates);\r\n        await this.PostMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate Actor Tokens\r\n        await this.PreMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateScenes(game, entityUpdates);\r\n        await this.PostMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Apply the updates, this should *always* work, now that parsing is complete.\r\n        await this.Apply(entityUpdates);\r\n\r\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`${game.i18n.localize('SR5.MIGRATION.SuccessNotification')} ${this.TargetVersion}.`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Applies the specified mapping of entities, iteratively updating each.\r\n     * @param entityUpdates A mapping of entity updateData pairs.\r\n     */\r\n    protected async Apply(entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const [entity, { updateData, embeddedItems }] of entityUpdates) {\r\n            if (embeddedItems !== null) {\r\n                const actor = entity as SR5Actor;\r\n                await actor.updateOwnedItem(embeddedItems);\r\n            }\r\n            await entity.update(updateData, { enforceTypes: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through all scenes and migrate each if needed.\r\n     * @param game\r\n     * @param entityUpdates\r\n     */\r\n    protected async IterateScenes(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        //@ts-ignore  // TypeScript expects entries (Collection.entries) to be a call, yet it's a get property.\r\n        for (const scene of game.scenes.entries) {\r\n            try {\r\n                if (!(await this.ShouldMigrateSceneData(scene))) {\r\n                    continue;\r\n                }\r\n\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                console.log(`Migrating Scene entity ${scene.name}`);\r\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\r\n\r\n                let hasTokenUpdates = false;\r\n                updateData.tokens = await Promise.all(\r\n                    // @ts-ignore\r\n                    scene.data.tokens.map(async (token) => {\r\n                        if (isObjectEmpty(token.actorData)) {\r\n                            return token;\r\n                        }\r\n\r\n                        let tokenDataUpdate = await this.MigrateActorData(token.actorData);\r\n                        if (!isObjectEmpty(tokenDataUpdate)) {\r\n                            hasTokenUpdates = true;\r\n                            tokenDataUpdate['_id'] = token._id;\r\n\r\n                            const newToken = duplicate(token);\r\n                            newToken.actorData = await mergeObject(token.actorData, tokenDataUpdate, {\r\n                                enforceTypes: false,\r\n                                inplace: false,\r\n                            });\r\n                            console.log(newToken);\r\n                            return newToken;\r\n                        } else {\r\n                            return token;\r\n                        }\r\n                    }),\r\n                );\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(scene, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all items and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateItems(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const item of game.items.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateItemData(item.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Item: ${item.name}`);\r\n                const updateData = await this.MigrateItemData(item.data);\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(item, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all actors and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateActors(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const actor of game.actors.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Actor ${actor.name}`);\r\n                console.log(actor);\r\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\r\n                console.log(updateData);\r\n                let items = [];\r\n                if (updateData.items) {\r\n                    items = updateData.items;\r\n                    delete updateData.items;\r\n                }\r\n\r\n                expandObject(updateData);\r\n\r\n                entityUpdates.set(actor, {\r\n                    updateData,\r\n                    embeddedItems: items,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over an actor's items, updating those that need updating.\r\n     * @param actorData The actor to iterate over\r\n     * @param updateData The existing update data to merge into\r\n     */\r\n    protected async IterateActorItems(actorData: Actor.Data, updateData) {\r\n        let hasItemUpdates = false;\r\n        // @ts-ignore\r\n        if (actorData.items !== undefined) {\r\n            const items = await Promise.all(\r\n                // @ts-ignore\r\n                actorData.items.map(async (item) => {\r\n                    let itemUpdate = await this.MigrateItemData(item);\r\n\r\n                    if (!isObjectEmpty(itemUpdate)) {\r\n                        hasItemUpdates = true;\r\n                        itemUpdate['_id'] = item._id;\r\n                        return await mergeObject(item, itemUpdate, {\r\n                            enforceTypes: false,\r\n                            inplace: false,\r\n                        });\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n            );\r\n            if (hasItemUpdates) {\r\n                updateData.items = items;\r\n            }\r\n        }\r\n\r\n        return updateData;\r\n    }\r\n\r\n    /**\r\n     * Check if a scene requires updates.\r\n     * @param scene The scene to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified scene's data.\r\n     * @param scene The scene to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an item requires updates.\r\n     * @param item The item to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateItemData(item: Entity.Data): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified item's data.\r\n     * @param item The item to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateItemData(item: Entity.Data): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an actor requires updates.\r\n     * @param actor The actor to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateActorData(actor: Actor.Data): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified actor's data.\r\n     * @param actor The actor to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateActorData(actor: Actor.Data): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right after actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Migrate a compendium pack\r\n     * @param pack\r\n     */\r\n    public async MigrateCompendiumPack(pack: Compendium) {\r\n        const entity = pack.metadata.entity;\r\n        if (!['Actor', 'Item', 'Scene'].includes(entity)) return;\r\n\r\n        // Begin by requesting server-side data model migration and get the migrated content\r\n        await pack.migrate({});\r\n        const content = await pack.getContent();\r\n\r\n        // Iterate over compendium entries - applying fine-tuned migration functions\r\n        for (let ent of content) {\r\n            try {\r\n                let updateData: any = null;\r\n                if (entity === 'Item') {\r\n                    updateData = await this.MigrateItemData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                    // TODO: Uncomment when foundry allows embeddeds to be updated in packs\r\n                    // } else if (entity === 'Actor') {\r\n                    //     updateData = await this.MigrateActorData(ent.data);\r\n                    //\r\n                    //     if (isObjectEmpty(updateData)) {\r\n                    //         continue;\r\n                    //     }\r\n                    //\r\n                    //     updateData['_id'] = ent._id;\r\n                    //     await pack.updateEntity(updateData);\r\n                } else if (entity === 'Scene') {\r\n                    updateData = await this.MigrateSceneData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\r\n    }\r\n}\r\n\r\ntype EntityUpdate = {\r\n    updateData: any;\r\n    embeddedItems: null | any[];\r\n};\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Migrates the data model for Legacy migrations prior to 0.6.4\r\n */\r\nexport class LegacyMigration extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0';\r\n    }\r\n    get TargetVersion(): string {\r\n        return LegacyMigration.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: Actor.Data): Promise<any> {\r\n        let updateData: any = {};\r\n        LegacyMigration.migrateActorOverflow(actorData, updateData);\r\n        LegacyMigration.migrateActorSkills(actorData, updateData);\r\n\r\n        updateData = await this.IterateActorItems(actorData, updateData);\r\n\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateItemData(item: Entity.Data): Promise<any> {\r\n        const updateData = {};\r\n        LegacyMigration.migrateDamageTypeAndElement(item, updateData);\r\n        LegacyMigration.migrateItemsAddActions(item, updateData);\r\n        LegacyMigration.migrateActorOverflow(item, updateData);\r\n        LegacyMigration.migrateItemsAddCapacity(item, updateData);\r\n        LegacyMigration.migrateItemsAmmo(item, updateData);\r\n        LegacyMigration.migrateItemsConceal(item, updateData);\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: Actor.Data): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateItemData(item: Entity.Data): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Migrate actor overflow from an integer to an object\r\n     * - it wasn't even displayed before so we know it is 0\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorOverflow(actorData, updateData) {\r\n        if (getProperty(actorData.data, 'track.physical.overflow') === 0) {\r\n            updateData['data.track.physical.overflow.value'] = 0;\r\n            updateData['data.track.physical.overflow.max'] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate actor skills specializations to be a list instead of string\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorSkills(actorData, updateData) {\r\n        if (!actorData.data?.skills?.active) return;\r\n        const splitRegex = /[,\\/|.]+/;\r\n\r\n        const reducer = (running, [key, val]) => {\r\n            if (!Array.isArray(val.specs) && val.specs) {\r\n                running[key] = {\r\n                    specs: val.specs.split(splitRegex).filter((s) => s !== ''),\r\n                };\r\n            }\r\n            return running;\r\n        };\r\n\r\n        if (actorData.data.skills) {\r\n            updateData['data.skills.active'] = Object.entries(actorData.data.skills.active).reduce(reducer, {});\r\n            if (actorData.data.skills.knowledge) {\r\n                updateData['data.skills.knowledge.street.value'] = Object.entries(actorData.data.skills?.knowledge?.street?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.professional.value'] = Object.entries(actorData.data.skills?.knowledge?.professional?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.academic.value'] = Object.entries(actorData.data.skills?.knowledge?.academic?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.interests.value'] = Object.entries(actorData.data.skills?.knowledge?.interests?.value).reduce(reducer, {});\r\n            }\r\n            if (actorData.data.skills.language) {\r\n                updateData['data.skills.language.value'] = Object.entries(actorData.data.skills?.language?.value).reduce(reducer, {});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateDamageTypeAndElement(item, updateData) {\r\n        // console.log('Migrating Damage and Elements');\r\n        if (item.data.action) {\r\n            const action = item.data.action;\r\n            if (typeof action.damage.type === 'string') {\r\n                updateData['data.action.damage.type.base'] = item.data.action.damage.type;\r\n            }\r\n            if (typeof action.damage.element === 'string') {\r\n                updateData['data.action.damage.element.base'] = item.data.action.damage.element;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate ammo from ranged weapons only to all weapons\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAmmo(item, updateData) {\r\n        // console.log('Migrating Ammo');\r\n        if (item.type === 'weapon' && item.data.ammo === undefined) {\r\n            let currentAmmo = { value: 0, max: 0 };\r\n            if (item.data.category === 'range' && item.data.range && item.data.range.ammo) {\r\n                // copy over ammo count\r\n                const oldAmmo = item.data.range.ammo;\r\n                currentAmmo.value = oldAmmo.value;\r\n                currentAmmo.max = oldAmmo.max;\r\n            }\r\n            updateData['data.ammo'] = {\r\n                spare_clips: {\r\n                    value: 0,\r\n                    max: 0,\r\n                },\r\n                current: {\r\n                    value: currentAmmo.value,\r\n                    max: currentAmmo.max,\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate conceal name\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsConceal(item, updateData) {\r\n        if (item.data.technology?.concealability !== undefined) {\r\n            updateData['data.technology.conceal'] = {\r\n                base: item.data.technology.concealability,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add capacity to items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddCapacity(item, updateData) {\r\n        if (['cyberware'].includes(item.type)) {\r\n            if (item.data.capacity === undefined) {\r\n                updateData.data.capacity = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add actions to needed items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddActions(item, updateData) {\r\n        if (['quality', 'cyberware'].includes(item.type)) {\r\n            if (item.data.action === undefined) {\r\n                const action = {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                    },\r\n                    extended: false,\r\n                    damage: {\r\n                        type: '',\r\n                        element: '',\r\n                        value: 0,\r\n                        ap: {\r\n                            value: 0,\r\n                        },\r\n                        attribute: '',\r\n                    },\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                };\r\n                if (!updateData.data) updateData.data = {};\r\n                updateData.data.action = action;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\nimport SR5ActorType = Shadowrun.SR5ActorType;\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_10 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.9';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_10.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.10';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: SR5ActorType): Promise<any> {\r\n        if (actorData.data?.attributes?.edge === undefined) return {};\r\n        return {\r\n            data: {\r\n                attributes: {\r\n                    edge: {\r\n                        base: actorData.data.attributes.edge.max,\r\n                        value: actorData.data.attributes.edge.max,\r\n                        uses: actorData.data.attributes.edge.value,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: SR5ActorType): Promise<boolean> {\r\n        return actorData.data.attributes.edge?.uses === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_5 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_5.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.5';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: Actor.Data): Promise<any> {\r\n        let updateData: any = {};\r\n        if (updateData.data === undefined) updateData.data = {};\r\n        updateData.data.full_defense_attribute = 'willpower';\r\n        return updateData;\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: any): Promise<boolean> {\r\n        return actorData.data.full_defense_attribute === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","// TODO: How to trigger test migration.\r\n// TODO: How to test migration results?\r\n\r\n\r\nimport {VersionMigration} from \"../VersionMigration\";\r\nimport {SR5} from \"../../config\";\r\nimport SR5ActorBase = Shadowrun.SR5ActorBase;\r\n\r\n/** NPC / Grunt feature set\r\n * - Add npc character data.\r\n * - Add track disabled feature\r\n */\r\nexport class Version0_7_2 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.7.1';\r\n    }\r\n\r\n    get TargetVersion(): string {\r\n        return Version0_7_2.TargetVersion;\r\n    }\r\n\r\n    static get TargetVersion(): string {\r\n        return '0.7.2';\r\n    }\r\n\r\n    static NoNPCDataForCharacter(actorData: SR5ActorBase): boolean {\r\n        // Use in operator since TypeScript can handle that for union types instead of property usage.\r\n        return actorData.type === 'character' && (\r\n            !(\"is_npc\" in actorData?.data) ||\r\n            !(\"npc\" in actorData?.data)\r\n        );\r\n    }\r\n\r\n    static UnsupportedMetatype(actorData: SR5ActorBase): boolean {\r\n        // TODO: Check on CharacterActorData.metatype typing (see ts-ignore)\r\n        //@ts-ignore // in-operator doesn't work here, as the underlying typing for metatype will result in string | number | undefined\r\n        const type = actorData.data.metatype?.toLowerCase() ?? '';\r\n        return actorData.type === 'character' &&\r\n            SR5.character.types.hasOwnProperty(type);\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: SR5ActorBase): Promise<any> {\r\n        const updateData: {\r\n            data?: object,\r\n            attributes?: object\r\n        } = {};\r\n\r\n        if (Version0_7_2.UnsupportedMetatype(actorData)) {\r\n            // TODO: Check on CharacterActorData.metatype typing (see ts-ignore)\r\n            //@ts-ignore // in-operator doesn't work here, as the underlying typing for metatype will result in string | number | undefined\r\n            const type = actorData.data.metatype?.toLowerCase() ?? '';\r\n            // TODO: What to do with custom metatypes?\r\n            const metatypeData = {metatype: SR5.character.types.hasOwnProperty(type) ? type : 'human'};\r\n            updateData.data = {...updateData.data, ...metatypeData};\r\n        }\r\n\r\n        if (Version0_7_2.NoNPCDataForCharacter(actorData)) {\r\n            updateData.data = updateData.data ? updateData.data : {};\r\n            const npcData = {\r\n                is_npc: false,\r\n                npc: {\r\n                    is_grunt: false,\r\n                    professional_rating: 0\r\n                }\r\n            }\r\n            updateData.data = {...updateData.data, ...npcData};\r\n        }\r\n\r\n        return updateData;\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: SR5ActorBase): Promise<boolean> {\r\n        return Version0_7_2.UnsupportedMetatype(actorData) || Version0_7_2.NoNPCDataForCharacter(actorData);\r\n    }\r\n}","import ModList = Shadowrun.ModList;\r\nimport ModListEntry = Shadowrun.ModListEntry;\r\n\r\nexport class PartsList<TType> {\r\n    get list(): ModList<TType> {\r\n        return this._list.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this._list.length;\r\n    }\r\n\r\n    get total(): number {\r\n        let total = 0;\r\n        for (const part of this._list) {\r\n            if (typeof part.value === 'number') {\r\n                total += part.value;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    get isEmpty(): boolean {\r\n        return this.length === 0;\r\n    }\r\n\r\n    getPartValue(name: string): TType | undefined {\r\n        return this._list.find((part) => part.name === name)?.value;\r\n    }\r\n\r\n    clear(): void {\r\n        this._list.length = 0;\r\n    }\r\n\r\n    private _list: ModList<TType>;\r\n\r\n    constructor(parts?: ModList<TType>) {\r\n        let actualParts = [] as ModList<TType>;\r\n        if (parts) {\r\n            if (Array.isArray(parts)) {\r\n                actualParts = parts;\r\n            } else if (typeof parts === 'object') {\r\n                for (const [name, value] of Object.entries(parts)) {\r\n                    if (value !== null && value !== undefined) {\r\n                        // if it's a number, we are dealing with an array as an object\r\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\r\n                            actualParts.push({\r\n                                name: (value as ModListEntry<TType>).name,\r\n                                value: (value as ModListEntry<TType>).value,\r\n                            });\r\n                        } else {\r\n                            actualParts.push({\r\n                                name,\r\n                                value,\r\n                            } as ModListEntry<TType>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._list = actualParts;\r\n    }\r\n\r\n    addPart(name: string, value: TType): void {\r\n        this._list.push({\r\n            name,\r\n            value,\r\n        });\r\n    }\r\n\r\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            // if we exist and should've overwrite, return\r\n            if (!overwrite) return;\r\n\r\n            this._list.splice(index, 1);\r\n            // if we are passed undefined, remove the value\r\n            if (value === undefined || value === null) return;\r\n            // recursively go through until we no longer have a part of this name\r\n            this.addUniquePart(name, value);\r\n        } else if (value) {\r\n            this.addPart(name, value);\r\n        }\r\n    }\r\n\r\n    removePart(name: string): boolean {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            this._list.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMessageOutput() {\r\n        return this.list;\r\n    }\r\n\r\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\r\n        const parts = new PartsList(list);\r\n        parts.addUniquePart(name, value, overwrite);\r\n        return parts._list;\r\n    }\r\n\r\n    static Total(list: ModList<number>) {\r\n        const parts = new PartsList(list);\r\n        return parts.total;\r\n    }\r\n}\r\n","import ModList = Shadowrun.ModList;\r\nimport RollEvent = Shadowrun.RollEvent;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport {\r\n    createRollChatMessage, createTargetChatMessage, RollTargetChatMessage,\r\n    TargetChatMessageOptions\r\n} from '../chat';\r\nimport {CORE_FLAGS, CORE_NAME, DEFAULT_ROLL_NAME, FLAGS, SR, SYSTEM_NAME} from '../constants';\r\nimport { PartsList } from '../parts/PartsList';\r\nimport {ActionTestData} from \"../apps/dialogs/ShadowrunItemDialog\";\r\nimport BlastData = Shadowrun.BlastData;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport DrainData = Shadowrun.DrainData;\r\nimport {ShadowrunTestDialog} from \"../apps/dialogs/ShadowrunTestDialog\";\r\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport CombatData = Shadowrun.CombatData;\r\n\r\n// item, actor, dicePool, attack, defense, spell, form\r\nexport type Test =  {\r\n    label: string;\r\n    type: string;\r\n}\r\n\r\nexport interface TestDialogData {\r\n    parts: PartsList<number>\r\n    limit: number\r\n    wounds: boolean\r\n    extended: boolean\r\n    rollMode: keyof typeof CONFIG.Dice.rollModes;\r\n}\r\n\r\ninterface RollProps {\r\n    parts?: ModList<number>,\r\n    limit?: any,\r\n    explodeSixes?: boolean\r\n}\r\n\r\n// TODO: Separate into 'roll data' and 'template data', which only passes through but isn't used.\r\nexport interface BasicRollProps {\r\n    parts?: ModList<number>;\r\n    limit?: LimitField;\r\n    explodeSixes?: boolean;\r\n    title?: string;\r\n    actor?: SR5Actor;\r\n    target?: Token;\r\n    item?: SR5Item;\r\n    // Personal attack\r\n    attack?: AttackData\r\n    // Incoming attack for a defense test\r\n    incomingAttack?: AttackData;\r\n    damage?: ModifiedDamageData;\r\n    tests?: Test[];\r\n    description?: object;\r\n    previewTemplate?: boolean;\r\n    hideRollMessage?: boolean;\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\r\n    combat?: CombatData\r\n}\r\n\r\n/** Provide a clear interface of which value are guaranteed to be defined.\r\n     */\r\nexport interface BasicRollPropsDefaulted extends BasicRollProps {\r\n    title: string\r\n    parts: ModList<number>\r\n    explodeSixes: boolean\r\n    hideRollMessage: boolean\r\n    previewTemplate: boolean\r\n    rollMode: keyof typeof CONFIG.Dice.rollModes\r\n}\r\n\r\nexport interface RollDialogOptions {\r\n    environmental?: number\r\n    pool?: boolean\r\n    extended?: boolean\r\n    limit?: boolean\r\n    wounds?: boolean\r\n}\r\n\r\nexport interface AdvancedRollProps extends BasicRollProps {\r\n    event?: RollEvent;\r\n    extended?: boolean;\r\n    wounds?: boolean;\r\n    after?: (roll: Roll | undefined) => void;\r\n    attack?: AttackData;\r\n    fireMode?: FireModeData\r\n    combat?: CombatData\r\n}\r\n\r\n/** Provide a clear interface of which value are guaranteed to be defined.\r\n     */\r\nexport interface AdvancedRollPropsDefaulted extends AdvancedRollProps {\r\n    parts: ModList<number>\r\n    wounds: boolean\r\n}\r\n\r\ntype ShadowrunRollData = {\r\n    limit: number\r\n    threshold: number\r\n    parts: ModList<number>\r\n    explodeSixes: boolean\r\n}\r\nexport class ShadowrunRoll extends Roll {\r\n    data: ShadowrunRollData\r\n    // add class Roll to the json so dice-so-nice works\r\n    toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.class = 'Roll';\r\n        return data;\r\n    }\r\n\r\n    get sides(): number[] {\r\n        //@ts-ignore\r\n        // 0.7.x foundryVTT\r\n        if (this.terms) {\r\n            //@ts-ignore\r\n            return this.terms[0].results.map(result => result.result);\r\n        }\r\n\r\n        //@ts-ignore\r\n        // 0.6.x foundryVTT\r\n        return this.parts[0].rolls.map(roll => roll.roll);\r\n    }\r\n\r\n    get limit(): number {\r\n        return this.data.limit;\r\n    }\r\n\r\n    get threshold(): number {\r\n        return this.data.threshold;\r\n    }\r\n\r\n    get parts(): ModList<number> {\r\n        return this.data.parts;\r\n    }\r\n\r\n    get explodeSixes(): boolean {\r\n        return this.data.explodeSixes;\r\n    }\r\n\r\n    count(side: number): number {\r\n        const results = this.sides;\r\n        return results.reduce((counted, result) => result === side ? counted + 1 : counted, 0);\r\n    }\r\n\r\n    get hits(): number {\r\n        return this.total;\r\n    }\r\n\r\n    get pool(): number {\r\n        //@ts-ignore\r\n        // 0.7.x foundryVTT\r\n        if (this.terms) {\r\n            //@ts-ignore\r\n            return this.dice[0].number;\r\n        }\r\n\r\n        //@ts-ignore\r\n        // 0.6.x foundryVTT\r\n        return this.parts[0].rolls.length;\r\n    }\r\n\r\n    get glitched(): boolean {\r\n        let glitched = 0;\r\n        SR.die.glitch.forEach(die => glitched += this.count(die));\r\n        return glitched > Math.floor(this.pool / 2);\r\n    }\r\n}\r\n\r\nexport class ShadowrunRoller {\r\n    static async itemRoll(event, item: SR5Item, actionTestData?: ActionTestData): Promise<ShadowrunRoll | undefined> {\r\n        // Create common data for all item types.\r\n        const title = item.getRollName();\r\n        const actor = item.actor;\r\n        const attack =  item.getAttackData(0, actionTestData);\r\n        const parts = item.getRollPartsList();\r\n        const limit = item.getLimit();\r\n        const extended = item.getExtended();\r\n        const previewTemplate = item.hasTemplate;\r\n        const description = item.getChatData();\r\n        const tests = item.getOpposedTests();\r\n\r\n        // Prepare the roll and dialog.\r\n        const advancedRollProps = {\r\n            hideRollMessage: true,\r\n            event: event,\r\n            actor,\r\n            parts,\r\n            limit,\r\n            extended,\r\n            tests\r\n        } as AdvancedRollProps;\r\n\r\n\r\n        const advancedDialogOptions = {\r\n            environmental: 0,\r\n        } as RollDialogOptions;\r\n\r\n        // Use environmental modifiers based on targeted token distance measurement from ItemDialog.\r\n        if (item.isRangedWeapon() && actionTestData?.rangedWeapon) {\r\n            if (advancedDialogOptions) {\r\n                advancedDialogOptions.environmental = actionTestData.rangedWeapon.environmental.range;\r\n            }\r\n        }\r\n\r\n        const roll = await ShadowrunRoller.advancedRoll(advancedRollProps, advancedDialogOptions);\r\n\r\n        if (!roll) return;\r\n\r\n        if (attack) {\r\n            attack.hits = roll.hits;\r\n        }\r\n\r\n        // TODO: Separation of concerns. 'Roller' should only roll and prepare to roll.\r\n        //       Rules should be handled elsewhere. Attack Handler? Ranged, Melee, DirectSpell, IndirectSpell...\r\n        if (attack && item.isCombatSpell()) {\r\n            const spellAttack = item.getAttackData(roll.hits, actionTestData);\r\n            if (spellAttack) attack.damage = spellAttack.damage;\r\n        }\r\n\r\n\r\n        // Handle user targeting for for targeted messages and display.\r\n        const targets: Token[] = Helpers.getUserTargets();\r\n        // Allow for direct defense without token selection for ONE token targeted.\r\n        const target = targets.length === 1 ? targets[0] : undefined;\r\n\r\n        const rollChatOptions = {title, roll, actor, item, attack, previewTemplate, targets, target, description, tests};\r\n        await createRollChatMessage(rollChatOptions);\r\n\r\n        if (tests) {\r\n            const targetChatOptions = {actor, item, tests, roll, attack}\r\n            await ShadowrunRoller.targetsChatMessages(targets, targetChatOptions);\r\n        }\r\n\r\n        return roll;\r\n    }\r\n\r\n    static async resultingItemRolls(event, item: SR5Item, actionTestData? : ActionTestData) {\r\n        // Cast resulting tests from above Success Test depending on item type.\r\n        if (item.isComplexForm() && actionTestData?.complexForm) {\r\n            const level = actionTestData.complexForm.level;\r\n            const fade = item.getFade() + level;\r\n            const minFade = 2;\r\n            const totalFade = Math.max(fade, minFade);\r\n            await item.actor.rollFade({ event }, totalFade);\r\n        }\r\n        else if (item.isSpell()) {\r\n            // if (item.isCombatSpell() && roll) {\r\n            //     // TODO: isCombatSpell and roll does something but isn't handled.\r\n            // }\r\n            if (actionTestData?.spell) {\r\n                const force = actionTestData.spell.force;\r\n                const reckless = actionTestData.spell.reckless;\r\n                const drain = item.getDrain() + force + (reckless ? 3 : 0);\r\n                const minDrain = 2;\r\n                const totalDrain = Math.max(drain, minDrain);\r\n\r\n                await item.actor.rollDrain({ event }, totalDrain);\r\n            }\r\n        }\r\n        else if (item.isWeapon()) {\r\n            if (item.hasAmmo() && actionTestData?.rangedWeapon) {\r\n                const fireMode = actionTestData.rangedWeapon.fireMode.value || 1;\r\n                await item.useAmmo(fireMode);\r\n            }\r\n        }\r\n    }\r\n\r\n    static shadowrunFormula({\r\n        parts: partsProps,\r\n        limit,\r\n        explode,\r\n    }: {\r\n        parts: ModList<number>;\r\n        limit?: BaseValuePair<number> & LabelField;\r\n        explode?: boolean;\r\n    }): string {\r\n        const parts = new PartsList(partsProps);\r\n        const count = parts.total;\r\n        if (count <= 0) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.RollOneDie'));\r\n            return '0d6cs>=5';\r\n        }\r\n        let formula = `${count}d6`;\r\n        if (explode) {\r\n            formula += 'x6';\r\n        }\r\n        if (limit?.value) {\r\n            formula += `kh${limit.value}`;\r\n        }\r\n        formula += 'cs>=5';\r\n        return formula;\r\n    }\r\n\r\n    static roll(props: RollProps): ShadowrunRoll|undefined {\r\n        const parts = new PartsList(props.parts);\r\n\r\n        // Prepare SR Success Test with foundry formula.\r\n        const formulaOptions = { parts: parts.list, limit: props.limit, explode: props.explodeSixes };\r\n        const formula = this.shadowrunFormula(formulaOptions);\r\n        if (!formula) {\r\n            return;\r\n        }\r\n\r\n        // Execute the Success Test.\r\n        const rollData = {parts: parts.list, limit: props.limit, explodeSixes: props.explodeSixes};\r\n        const roll = new ShadowrunRoll(formula, rollData);\r\n\r\n        // Return roll reference instead roll() return to avoid typing issues.\r\n        roll.roll();\r\n\r\n        return roll;\r\n    }\r\n\r\n    static async basicRoll(basicProps: BasicRollProps): Promise<ShadowrunRoll | undefined> {\r\n        const props = ShadowrunRoller.basicRollPropsDefaults(basicProps);\r\n\r\n        const roll = await ShadowrunRoller.roll({parts: props.parts, limit: props.limit, explodeSixes: props.explodeSixes});\r\n        if (!roll) return;\r\n\r\n        if (!props.hideRollMessage) {\r\n            await ShadowrunRoller.rollChatMessage(roll, props);\r\n        }\r\n\r\n        return roll;\r\n    }\r\n\r\n    /** Provide a clear interface of which value are guaranteed to be defined.\r\n     */\r\n    static basicRollPropsDefaults(props: BasicRollProps): BasicRollPropsDefaulted {\r\n        props.title = props.title ?? DEFAULT_ROLL_NAME;\r\n        props.parts = props.parts ?? [];\r\n        props.explodeSixes = props.explodeSixes ?? false;\r\n        props.hideRollMessage = props.hideRollMessage ?? false;\r\n        props.rollMode = props.rollMode ?? CONFIG.Dice.rollModes.roll;\r\n        props.previewTemplate = props.previewTemplate ?? false;\r\n\r\n        return {...props} as BasicRollPropsDefaulted;\r\n    }\r\n\r\n    /** Provide a clear interface of which value are guaranteed to be defined.\r\n     */\r\n    static advancedRollPropsDefaults(props: AdvancedRollProps): AdvancedRollPropsDefaulted {\r\n        props.parts = props.parts ?? [];\r\n        props.wounds = props.wounds ?? true;\r\n\r\n        return {...props} as AdvancedRollPropsDefaulted;\r\n    }\r\n\r\n    /**\r\n     * Prompt a roll for the user\r\n     */\r\n    static promptRoll(): Promise<ShadowrunRoll | undefined> {\r\n        const value = game.user.getFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue) || 0;\r\n        const parts = [{ name: 'SR5.LastRoll', value }];\r\n        const advancedRollProps = { parts, title: game.i18n.localize(\"SR5.Test\")} as AdvancedRollProps;\r\n        const dialogOptions = { pool: true }\r\n        return ShadowrunRoller.advancedRoll(advancedRollProps, dialogOptions);\r\n    }\r\n\r\n    /**\r\n     * Start an advanced roll\r\n     * - Prompts the user for modifiers\r\n     */\r\n    static async advancedRoll(advancedProps: AdvancedRollProps, dialogOptions?: RollDialogOptions): Promise<ShadowrunRoll | undefined> {\r\n        // Remove after roll callback as to not move it further into other function calls.\r\n        const {after} = advancedProps;\r\n\r\n        const props = ShadowrunRoller.advancedRollPropsDefaults(advancedProps);\r\n\r\n        // remove limits if game settings is set\r\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.ApplyLimits)) {\r\n            delete props.limit;\r\n        } else {\r\n            ShadowrunRoller._errorOnInvalidLimit(props.limit);\r\n        }\r\n\r\n        // Ask user for additional, general success test role modifiers.\r\n        const testDialogOptions = {\r\n            title: props.title,\r\n            dialogOptions,\r\n            extended: props.extended,\r\n            limit: props.limit,\r\n            wounds: props.wounds,\r\n        };\r\n\r\n        const testDialog = await ShadowrunTestDialog.create(props.actor, testDialogOptions, props.parts);\r\n        const testData = await testDialog.select();\r\n\r\n        if (testDialog.canceled) return;\r\n\r\n\r\n        // Prepare Test Roll.\r\n        const basicRollProps = {...props} as BasicRollPropsDefaulted;\r\n        // basicRollProps.wounds = testData.wounds;\r\n        // basicRollProps.dialogOptions = testData.dialogOptions;\r\n        basicRollProps.rollMode = testData.rollMode;\r\n        basicRollProps.parts = testData.parts.list;\r\n        // TODO: This is needed a hotfix... basicRoll is used secondChance and pushTheLimit chat actions.\r\n        //       If those are handled by advancedRoll (without a dialog) basicRoll message creation can be removed\r\n        //       and this line as well...\r\n        basicRollProps.hideRollMessage = true;\r\n\r\n\r\n        if (testDialog.selectedButton === 'edge' && props.actor) {\r\n            await ShadowrunRoller.handleExplodingSixes(props.actor, basicRollProps, testData);\r\n        }\r\n\r\n\r\n        // Execute Test roll...\r\n        const roll = await this.basicRoll(basicRollProps);\r\n        if (!roll) return;\r\n\r\n\r\n        if (!props.hideRollMessage) {\r\n            await ShadowrunRoller.rollChatMessage(roll, basicRollProps);\r\n        }\r\n\r\n\r\n        if (testData.extended) {\r\n            ShadowrunRoller.handleExtendedRoll(props, testData);\r\n        }\r\n\r\n\r\n        // Call any provided callbacks to be executed after this roll.\r\n        if (after) await after(roll);\r\n\r\n        return roll;\r\n    }\r\n\r\n    static async rollChatMessage(roll: ShadowrunRoll, props: BasicRollPropsDefaulted) {\r\n        const {actor, target, item, rollMode, description, title, previewTemplate, attack, incomingAttack, damage, tests, combat} = props;\r\n        const rollChatMessageOptions = {roll, actor, target, item, rollMode, description, title, previewTemplate, attack, incomingAttack, damage, tests, combat};\r\n        await createRollChatMessage(rollChatMessageOptions);\r\n    }\r\n\r\n    /** Send a message to the specific targeted player given.\r\n     *\r\n     * Use targetsChatMessages for a simple way to send to all active player targets.\r\n     *\r\n     * Should a target have multiple user owners, each will get a message.\r\n     *\r\n     * @param options\r\n     */\r\n    static async targetChatMessage(options: RollTargetChatMessage) {\r\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers)) return;\r\n\r\n        const rollMode = options.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\r\n        if (rollMode === 'roll') return;\r\n\r\n        // @ts-ignore // Token.actor is of type Actor instead of SR5Actor\r\n        const users = options.target.actor.getActivePlayerOwners();\r\n\r\n        for (const user of users) {\r\n            if (user.isGM) continue;\r\n            if (user === game.user) continue;\r\n\r\n            const targetChatMessage = {\r\n                actor: options.actor, target: options.target, targets: [options.target], item: options.item,\r\n                tests: options.tests, whisperTo: user, attack: options.attack\r\n            } as TargetChatMessageOptions;\r\n            await createTargetChatMessage(targetChatMessage);\r\n        }\r\n    }\r\n\r\n    /** Send messages to ALL targets, no matter if specifically targeted in a action dialog.\r\n     *\r\n     * This can cause for multiple target whispers to happen, even if the active player only selected one\r\n     * during, for example, the ranged weapon dialog (which gives a selection and returns one)\r\n     *\r\n     *\r\n     * @param options\r\n     */\r\n    static async targetsChatMessages(targets: Token[], options: RollTargetChatMessage) {\r\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers)) return;\r\n\r\n        targets.forEach(target => {\r\n            // @ts-ignore // Token.actor is of type Actor instead of SR5Actor\r\n            if (!target.actor.hasActivePlayerOwner()) return;\r\n\r\n            options = {...options, target};\r\n            ShadowrunRoller.targetChatMessage(options);\r\n        })\r\n    }\r\n\r\n    static _errorOnInvalidLimit(limit?: LimitField) {\r\n        if (limit && limit.value <= 0) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.Warnings.NegativeLimitValue'));\r\n        }\r\n    }\r\n\r\n    static handleExtendedRoll(advancedProps: AdvancedRollPropsDefaulted, testData: TestDialogData) {\r\n        const currentExtended = testData.parts.getPartValue('SR5.Extended') ?? 0;\r\n        testData.parts.addUniquePart('SR5.Extended', currentExtended - 1);\r\n\r\n        // Prepare the next, extended test roll.\r\n        advancedProps.parts = testData.parts.list;\r\n        advancedProps.extended = true;\r\n        const delayInMs = 400;\r\n        setTimeout(() => this.advancedRoll(advancedProps), delayInMs);\r\n    }\r\n\r\n    static async handleExplodingSixes(actor: SR5Actor, basicProps: BasicRollProps, testData: TestDialogData) {\r\n        basicProps.explodeSixes = true;\r\n        delete basicProps.limit;\r\n        testData.parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n\r\n        await actor.useEdge();\r\n    }\r\n}\r\n","// game settings for shadowrun 5e\r\n\r\nimport { VersionMigration } from './migrator/VersionMigration';\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\n\r\nexport const registerSystemSettings = () => {\r\n    /**\r\n     * Register diagonal movement rule setting\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\r\n        name: 'SETTINGS.DiagonalMovementName',\r\n        hint: 'SETTINGS.DiagonalMovementDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: String,\r\n        default: '1-2-1',\r\n        choices: {\r\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\r\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\r\n            'EUCL': 'SETTINGS.Euclidean',\r\n        },\r\n        onChange: (rule) => (canvas.grid.diagonalRule = rule),\r\n    });\r\n\r\n    /**\r\n     * Default limit behavior\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\r\n        name: 'SETTINGS.ApplyLimitsName',\r\n        hint: 'SETTINGS.ApplyLimitsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\r\n        name: 'SETTINGS.DisplayDefaultRollCardName',\r\n        hint: 'SETTINGS.DisplayDefaultRollCardDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n    });\r\n\r\n    /**\r\n     * Track system version upon which a migration was last applied\r\n     */\r\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\r\n        name: 'System Data Version.',\r\n        scope: 'world',\r\n        config: false,\r\n        type: String,\r\n        default: '0',\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\r\n        name: 'SETTINGS.ShowGlitchAnimationName',\r\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput, {\r\n        name: 'SETTINGS.ShowTokenNameForChatOutputName',\r\n        hint: 'SETTINGS.ShowTokenNameForChatOutputDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers, {\r\n        name: 'SETTINGS.WhisperOpposedTestsToTargetedPlayers',\r\n        hint: 'SETTINGS.WhisperOpposedTestsToTargetedPlayersDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n};\r\n","import { SR5Item } from './item/SR5Item';\r\n\r\nexport type ShadowrunTemplateData = {\r\n    t: string;\r\n    user: User | string;\r\n    distance: number;\r\n    x: number;\r\n    y: number;\r\n    fillColor: string;\r\n    direction: number;\r\n};\r\n\r\nexport default // @ts-ignore\r\nclass Template extends MeasuredTemplate {\r\n    data: ShadowrunTemplateData;\r\n    layer: PlaceablesLayer;\r\n    x: number;\r\n    y: number;\r\n    item?: SR5Item;\r\n    onComplete?: () => void;\r\n\r\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\r\n        const templateShape = 'circle';\r\n\r\n        const templateData = {\r\n            t: templateShape,\r\n            user: game.user._id,\r\n            direction: 0,\r\n            x: 0,\r\n            y: 0,\r\n            // @ts-ignore\r\n            fillColor: game.user.color,\r\n        };\r\n        const blast = item.getBlastData();\r\n        templateData['distance'] = blast?.radius;\r\n        templateData['dropoff'] = blast?.dropoff;\r\n\r\n        // @ts-ignore\r\n        const template = new this(templateData);\r\n        template.item = item;\r\n        template.onComplete = onComplete;\r\n        return template;\r\n    }\r\n\r\n    drawPreview() {\r\n        const initialLayer = canvas.activeLayer;\r\n        // @ts-ignore\r\n        this.draw();\r\n        // @ts-ignore\r\n        this.layer.activate();\r\n        // @ts-ignore\r\n        this.layer.preview.addChild(this);\r\n        this.activatePreviewListeners(initialLayer);\r\n    }\r\n\r\n    activatePreviewListeners(initialLayer: CanvasLayer) {\r\n        const handlers = {};\r\n        let moveTime = 0;\r\n\r\n        // Update placement (mouse-move)\r\n        handlers['mm'] = (event) => {\r\n            event.stopPropagation();\r\n            let now = Date.now(); // Apply a 20ms throttle\r\n            if (now - moveTime <= 20) return;\r\n            const center = event.data.getLocalPosition(this.layer);\r\n            const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\r\n            this.data.x = snapped.x;\r\n            this.data.y = snapped.y;\r\n            // @ts-ignore\r\n            this.refresh();\r\n            moveTime = now;\r\n        };\r\n\r\n        // Cancel the workflow (right-click)\r\n        handlers['rc'] = () => {\r\n            this.layer.preview.removeChildren();\r\n            canvas.stage.off('mousemove', handlers['mm']);\r\n            canvas.stage.off('mousedown', handlers['lc']);\r\n            canvas.app.view.oncontextmenu = null;\r\n            canvas.app.view.onwheel = null;\r\n            initialLayer.activate();\r\n\r\n            if (this.onComplete) this.onComplete();\r\n        };\r\n\r\n        // Confirm the workflow (left-click)\r\n        handlers['lc'] = (event) => {\r\n            handlers['rc'](event);\r\n\r\n            // Confirm final snapped position\r\n            const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\r\n            this.data.x = destination.x;\r\n            this.data.y = destination.y;\r\n\r\n            // Create the template\r\n            canvas.scene.createEmbeddedEntity('MeasuredTemplate', this.data);\r\n        };\r\n\r\n        // Rotate the template by 3 degree increments (mouse-wheel)\r\n        handlers['mw'] = (event) => {\r\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\r\n            event.stopPropagation();\r\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\r\n            let snap = event.shiftKey ? delta : 5;\r\n            this.data.direction += snap * Math.sign(event.deltaY);\r\n            // @ts-ignore\r\n            this.refresh();\r\n        };\r\n\r\n        // Activate listeners\r\n        canvas.stage.on('mousemove', handlers['mm']);\r\n        canvas.stage.on('mousedown', handlers['lc']);\r\n        canvas.app.view.oncontextmenu = handlers['rc'];\r\n        canvas.app.view.onwheel = handlers['mw'];\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}