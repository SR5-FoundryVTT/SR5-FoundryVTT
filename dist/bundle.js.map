{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/base64-js/index.js","node_modules/browser-resolve/empty.js","node_modules/buffer/index.js","node_modules/core-util-is/lib/util.js","node_modules/events/events.js","node_modules/ieee754/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/isarray/index.js","node_modules/process-nextick-args/index.js","node_modules/process/browser.js","node_modules/readable-stream/duplex-browser.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/lib/internal/streams/BufferList.js","node_modules/readable-stream/lib/internal/streams/destroy.js","node_modules/readable-stream/lib/internal/streams/stream-browser.js","node_modules/readable-stream/passthrough.js","node_modules/readable-stream/readable-browser.js","node_modules/readable-stream/transform.js","node_modules/readable-stream/writable-browser.js","node_modules/regenerator-runtime/runtime.js","node_modules/safe-buffer/index.js","node_modules/sax/lib/sax.js","node_modules/stream-browserify/index.js","node_modules/string_decoder/lib/string_decoder.js","node_modules/timers-browserify/main.js","node_modules/util-deprecate/browser.js","node_modules/xml2js/lib/bom.js","node_modules/xml2js/lib/builder.js","node_modules/xml2js/lib/defaults.js","node_modules/xml2js/lib/parser.js","node_modules/xml2js/lib/processors.js","node_modules/xml2js/lib/xml2js.js","node_modules/xmlbuilder/lib/DocumentPosition.js","node_modules/xmlbuilder/lib/NodeType.js","node_modules/xmlbuilder/lib/Utility.js","node_modules/xmlbuilder/lib/WriterState.js","node_modules/xmlbuilder/lib/XMLAttribute.js","node_modules/xmlbuilder/lib/XMLCData.js","node_modules/xmlbuilder/lib/XMLCharacterData.js","node_modules/xmlbuilder/lib/XMLComment.js","node_modules/xmlbuilder/lib/XMLDOMConfiguration.js","node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js","node_modules/xmlbuilder/lib/XMLDOMImplementation.js","node_modules/xmlbuilder/lib/XMLDOMStringList.js","node_modules/xmlbuilder/lib/XMLDTDAttList.js","node_modules/xmlbuilder/lib/XMLDTDElement.js","node_modules/xmlbuilder/lib/XMLDTDEntity.js","node_modules/xmlbuilder/lib/XMLDTDNotation.js","node_modules/xmlbuilder/lib/XMLDeclaration.js","node_modules/xmlbuilder/lib/XMLDocType.js","node_modules/xmlbuilder/lib/XMLDocument.js","node_modules/xmlbuilder/lib/XMLDocumentCB.js","node_modules/xmlbuilder/lib/XMLDummy.js","node_modules/xmlbuilder/lib/XMLElement.js","node_modules/xmlbuilder/lib/XMLNamedNodeMap.js","node_modules/xmlbuilder/lib/XMLNode.js","node_modules/xmlbuilder/lib/XMLNodeList.js","node_modules/xmlbuilder/lib/XMLProcessingInstruction.js","node_modules/xmlbuilder/lib/XMLRaw.js","node_modules/xmlbuilder/lib/XMLStreamWriter.js","node_modules/xmlbuilder/lib/XMLStringWriter.js","node_modules/xmlbuilder/lib/XMLStringifier.js","node_modules/xmlbuilder/lib/XMLText.js","node_modules/xmlbuilder/lib/XMLWriterBase.js","node_modules/xmlbuilder/lib/index.js","src/module/actor/SR5Actor.ts","src/module/actor/SR5ActorSheet.ts","src/module/actor/flows/DamageApplicationFlow.ts","src/module/actor/flows/SkillFlow.ts","src/module/actor/flows/SoakFlow.ts","src/module/actor/prep/CharacterPrep.ts","src/module/actor/prep/CritterPrep.ts","src/module/actor/prep/SpiritPrep.ts","src/module/actor/prep/SpritePrep.ts","src/module/actor/prep/VehiclePrep.ts","src/module/actor/prep/functions/AttributesPrep.ts","src/module/actor/prep/functions/ConditionMonitorsPrep.ts","src/module/actor/prep/functions/InitiativePrep.ts","src/module/actor/prep/functions/ItemPrep.ts","src/module/actor/prep/functions/LimitsPrep.ts","src/module/actor/prep/functions/MatrixPrep.ts","src/module/actor/prep/functions/ModifiersPrep.ts","src/module/actor/prep/functions/MovementPrep.ts","src/module/actor/prep/functions/NPCPrep.ts","src/module/actor/prep/functions/SkillsPrep.ts","src/module/actor/prep/functions/WoundsPrep.ts","src/module/apps/ChangelogApplication.ts","src/module/apps/EnvModifiersApplication.ts","src/module/apps/characterImport/ArmorParser.js","src/module/apps/characterImport/BaseParserFunctions.js","src/module/apps/characterImport/CharacterImporter.js","src/module/apps/characterImport/CharacterInfoUpdater.js","src/module/apps/characterImport/ContactParser.js","src/module/apps/characterImport/CyberwareParser.js","src/module/apps/characterImport/ItemsParser.js","src/module/apps/characterImport/LifestyleParser.js","src/module/apps/characterImport/PowerParser.js","src/module/apps/characterImport/QualityParser.js","src/module/apps/characterImport/SpellParser.js","src/module/apps/characterImport/WeaponParser.js","src/module/apps/characterImport/gearImport/AmmoParser.ts","src/module/apps/characterImport/gearImport/BaseGearParser.ts","src/module/apps/characterImport/gearImport/DeviceParser.ts","src/module/apps/characterImport/gearImport/GearsParser.ts","src/module/apps/characterImport/gearImport/ParserSelector.ts","src/module/apps/characterImport/gearImport/ProgramParser.ts","src/module/apps/characterImport/gearImport/SinParser.ts","src/module/apps/chummer-import-form.js","src/module/apps/dialogs/DamageApplicationDialog.ts","src/module/apps/dialogs/DeleteConfirmationDialog.ts","src/module/apps/dialogs/FormDialog.ts","src/module/apps/dialogs/ShadowrunActorDialogs.ts","src/module/apps/dialogs/ShadowrunItemDialog.ts","src/module/apps/dialogs/ShadowrunTestDialog.ts","src/module/apps/gmtools/OverwatchScoreTracker.js","src/module/apps/skills/KnowledgeSkillEditSheet.ts","src/module/apps/skills/LanguageSkillEditSheet.ts","src/module/apps/skills/SkillEditSheet.ts","src/module/canvas.ts","src/module/chat.ts","src/module/combat/SR5Combat.ts","src/module/config.ts","src/module/constants.ts","src/module/data/DataDefaults.ts","src/module/data/DataWrapper.ts","src/module/data/SR5ItemDataWrapper.ts","src/module/handlebars/AppHelpers.ts","src/module/handlebars/BasicHelpers.ts","src/module/handlebars/HandlebarManager.ts","src/module/handlebars/HandlebarTemplates.ts","src/module/handlebars/ItemLineHelpers.ts","src/module/handlebars/RollAndLabelHelpers.ts","src/module/handlebars/SkillLineHelpers.ts","src/module/helpers.ts","src/module/hooks.ts","src/module/importer/apps/import-form.ts","src/module/importer/helper/ImportHelper.ts","src/module/importer/helper/ImportStrategy.ts","src/module/importer/helper/JSONStrategy.ts","src/module/importer/helper/XMLStrategy.ts","src/module/importer/importer/AmmoImporter.ts","src/module/importer/importer/ArmorImporter.ts","src/module/importer/importer/ComplexFormImporter.ts","src/module/importer/importer/Constants.ts","src/module/importer/importer/CritterPowerImporter.ts","src/module/importer/importer/DataImporter.ts","src/module/importer/importer/DeviceImporter.ts","src/module/importer/importer/EquipmentImporter.ts","src/module/importer/importer/ModImporter.ts","src/module/importer/importer/QualityImporter.ts","src/module/importer/importer/SpellImporter.ts","src/module/importer/importer/WareImporter.ts","src/module/importer/importer/WeaponImporter.ts","src/module/importer/parser/Parser.ts","src/module/importer/parser/ParserMap.ts","src/module/importer/parser/armor/ArmorParserBase.ts","src/module/importer/parser/complex-form/ComplexFormParserBase.ts","src/module/importer/parser/critter-power/CritterPowerParserBase.ts","src/module/importer/parser/item/ItemParserBase.ts","src/module/importer/parser/item/TechnologyItemParserBase.ts","src/module/importer/parser/mod/ModParserBase.ts","src/module/importer/parser/quality/QualityParserBase.ts","src/module/importer/parser/spell/CombatSpellParser.ts","src/module/importer/parser/spell/DetectionSpellImporter.ts","src/module/importer/parser/spell/IllusionSpellParser.ts","src/module/importer/parser/spell/ManipulationSpellParser.ts","src/module/importer/parser/spell/SpellParserBase.ts","src/module/importer/parser/ware/CyberwareParser.ts","src/module/importer/parser/weapon/MeleeParser.ts","src/module/importer/parser/weapon/RangedParser.ts","src/module/importer/parser/weapon/ThrownParser.ts","src/module/importer/parser/weapon/WeaponParserBase.ts","src/module/item/ChatData.ts","src/module/item/SR5Item.ts","src/module/item/SR5ItemSheet.ts","src/module/item/flows/ActionFlow.ts","src/module/macros.ts","src/module/main.ts","src/module/migrator/Migrator.ts","src/module/migrator/VersionMigration.ts","src/module/migrator/versions/LegacyMigration.ts","src/module/migrator/versions/Version0_6_10.ts","src/module/migrator/versions/Version0_6_5.ts","src/module/migrator/versions/Version0_7_2.ts","src/module/parts/PartsList.ts","src/module/rolls/ShadowrunRoller.ts","src/module/rules/CombatRules.ts","src/module/rules/Modifiers.ts","src/module/rules/SkillRules.ts","src/module/rules/SoakRules.ts","src/module/settings.ts","src/module/template.ts","src/test/quench.ts","src/test/sr5.Modifiers.spec.ts","src/test/sr5.SR5Item.spec.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxjvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxlrqzuhvnxlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnppCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplhhjxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACraA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var superPropBase = require(\"./superPropBase.js\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var _typeof = require(\"@babel/runtime/helpers/typeof\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","module.exports = require(\"regenerator-runtime\");\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","module.exports = require('events').EventEmitter;\n","module.exports = require('./readable').PassThrough\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./lib/_stream_writable.js');\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  exports.stripBOM = function(str) {\n    if (str[0] === '\\uFEFF') {\n      return str.substring(1);\n    } else {\n      return str;\n    }\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,\n    hasProp = {}.hasOwnProperty;\n\n  builder = require('xmlbuilder');\n\n  defaults = require('./defaults').defaults;\n\n  requiresCDATA = function(entry) {\n    return typeof entry === \"string\" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);\n  };\n\n  wrapCDATA = function(entry) {\n    return \"<![CDATA[\" + (escapeCDATA(entry)) + \"]]>\";\n  };\n\n  escapeCDATA = function(entry) {\n    return entry.replace(']]>', ']]]]><![CDATA[>');\n  };\n\n  exports.Builder = (function() {\n    function Builder(opts) {\n      var key, ref, value;\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n    }\n\n    Builder.prototype.buildObject = function(rootObj) {\n      var attrkey, charkey, render, rootElement, rootName;\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {\n        rootName = Object.keys(rootObj)[0];\n        rootObj = rootObj[rootName];\n      } else {\n        rootName = this.options.rootName;\n      }\n      render = (function(_this) {\n        return function(element, obj) {\n          var attr, child, entry, index, key, value;\n          if (typeof obj !== 'object') {\n            if (_this.options.cdata && requiresCDATA(obj)) {\n              element.raw(wrapCDATA(obj));\n            } else {\n              element.txt(obj);\n            }\n          } else if (Array.isArray(obj)) {\n            for (index in obj) {\n              if (!hasProp.call(obj, index)) continue;\n              child = obj[index];\n              for (key in child) {\n                entry = child[key];\n                element = render(element.ele(key), entry).up();\n              }\n            }\n          } else {\n            for (key in obj) {\n              if (!hasProp.call(obj, key)) continue;\n              child = obj[key];\n              if (key === attrkey) {\n                if (typeof child === \"object\") {\n                  for (attr in child) {\n                    value = child[attr];\n                    element = element.att(attr, value);\n                  }\n                }\n              } else if (key === charkey) {\n                if (_this.options.cdata && requiresCDATA(child)) {\n                  element = element.raw(wrapCDATA(child));\n                } else {\n                  element = element.txt(child);\n                }\n              } else if (Array.isArray(child)) {\n                for (index in child) {\n                  if (!hasProp.call(child, index)) continue;\n                  entry = child[index];\n                  if (typeof entry === 'string') {\n                    if (_this.options.cdata && requiresCDATA(entry)) {\n                      element = element.ele(key).raw(wrapCDATA(entry)).up();\n                    } else {\n                      element = element.ele(key, entry).up();\n                    }\n                  } else {\n                    element = render(element.ele(key), entry).up();\n                  }\n                }\n              } else if (typeof child === \"object\") {\n                element = render(element.ele(key), child).up();\n              } else {\n                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {\n                  element = element.ele(key).raw(wrapCDATA(child)).up();\n                } else {\n                  if (child == null) {\n                    child = '';\n                  }\n                  element = element.ele(key, child.toString()).up();\n                }\n              }\n            }\n          }\n          return element;\n        };\n      })(this);\n      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n        headless: this.options.headless,\n        allowSurrogateChars: this.options.allowSurrogateChars\n      });\n      return render(rootElement, rootObj).end(this.options.renderOpts);\n    };\n\n    return Builder;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      emptyTag: ''\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      preserveChildrenOrder: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      rootName: 'root',\n      xmldec: {\n        'version': '1.0',\n        'encoding': 'UTF-8',\n        'standalone': true\n      },\n      doctype: null,\n      renderOpts: {\n        'pretty': true,\n        'indent': '  ',\n        'newline': '\\n'\n      },\n      headless: false,\n      chunkSize: 10000,\n      emptyTag: '',\n      cdata: false\n    }\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  sax = require('sax');\n\n  events = require('events');\n\n  bom = require('./bom');\n\n  processors = require('./processors');\n\n  setImmediate = require('timers').setImmediate;\n\n  defaults = require('./defaults').defaults;\n\n  isEmpty = function(thing) {\n    return typeof thing === \"object\" && (thing != null) && Object.keys(thing).length === 0;\n  };\n\n  processItem = function(processors, item, key) {\n    var i, len, process;\n    for (i = 0, len = processors.length; i < len; i++) {\n      process = processors[i];\n      item = process(item, key);\n    }\n    return item;\n  };\n\n  exports.Parser = (function(superClass) {\n    extend(Parser, superClass);\n\n    function Parser(opts) {\n      this.parseStringPromise = bind(this.parseStringPromise, this);\n      this.parseString = bind(this.parseString, this);\n      this.reset = bind(this.reset, this);\n      this.assignOrPush = bind(this.assignOrPush, this);\n      this.processAsync = bind(this.processAsync, this);\n      var key, ref, value;\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n      if (this.options.normalizeTags) {\n        if (!this.options.tagNameProcessors) {\n          this.options.tagNameProcessors = [];\n        }\n        this.options.tagNameProcessors.unshift(processors.normalize);\n      }\n      this.reset();\n    }\n\n    Parser.prototype.processAsync = function() {\n      var chunk, err;\n      try {\n        if (this.remaining.length <= this.options.chunkSize) {\n          chunk = this.remaining;\n          this.remaining = '';\n          this.saxParser = this.saxParser.write(chunk);\n          return this.saxParser.close();\n        } else {\n          chunk = this.remaining.substr(0, this.options.chunkSize);\n          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n          this.saxParser = this.saxParser.write(chunk);\n          return setImmediate(this.processAsync);\n        }\n      } catch (error1) {\n        err = error1;\n        if (!this.saxParser.errThrown) {\n          this.saxParser.errThrown = true;\n          return this.emit(err);\n        }\n      }\n    };\n\n    Parser.prototype.assignOrPush = function(obj, key, newValue) {\n      if (!(key in obj)) {\n        if (!this.options.explicitArray) {\n          return obj[key] = newValue;\n        } else {\n          return obj[key] = [newValue];\n        }\n      } else {\n        if (!(obj[key] instanceof Array)) {\n          obj[key] = [obj[key]];\n        }\n        return obj[key].push(newValue);\n      }\n    };\n\n    Parser.prototype.reset = function() {\n      var attrkey, charkey, ontext, stack;\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      this.saxParser.errThrown = false;\n      this.saxParser.onerror = (function(_this) {\n        return function(error) {\n          _this.saxParser.resume();\n          if (!_this.saxParser.errThrown) {\n            _this.saxParser.errThrown = true;\n            return _this.emit(\"error\", error);\n          }\n        };\n      })(this);\n      this.saxParser.onend = (function(_this) {\n        return function() {\n          if (!_this.saxParser.ended) {\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      this.saxParser.ended = false;\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      this.saxParser.onopentag = (function(_this) {\n        return function(node) {\n          var key, newValue, obj, processedKey, ref;\n          obj = {};\n          obj[charkey] = \"\";\n          if (!_this.options.ignoreAttrs) {\n            ref = node.attributes;\n            for (key in ref) {\n              if (!hasProp.call(ref, key)) continue;\n              if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                obj[attrkey] = {};\n              }\n              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n              if (_this.options.mergeAttrs) {\n                _this.assignOrPush(obj, processedKey, newValue);\n              } else {\n                obj[attrkey][processedKey] = newValue;\n              }\n            }\n          }\n          obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n          if (_this.options.xmlns) {\n            obj[_this.options.xmlnskey] = {\n              uri: node.uri,\n              local: node.local\n            };\n          }\n          return stack.push(obj);\n        };\n      })(this);\n      this.saxParser.onclosetag = (function(_this) {\n        return function() {\n          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n          obj = stack.pop();\n          nodeName = obj[\"#name\"];\n          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n            delete obj[\"#name\"];\n          }\n          if (obj.cdata === true) {\n            cdata = obj.cdata;\n            delete obj.cdata;\n          }\n          s = stack[stack.length - 1];\n          if (obj[charkey].match(/^\\s*$/) && !cdata) {\n            emptyStr = obj[charkey];\n            delete obj[charkey];\n          } else {\n            if (_this.options.trim) {\n              obj[charkey] = obj[charkey].trim();\n            }\n            if (_this.options.normalize) {\n              obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n            }\n            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n              obj = obj[charkey];\n            }\n          }\n          if (isEmpty(obj)) {\n            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;\n          }\n          if (_this.options.validator != null) {\n            xpath = \"/\" + ((function() {\n              var i, len, results;\n              results = [];\n              for (i = 0, len = stack.length; i < len; i++) {\n                node = stack[i];\n                results.push(node[\"#name\"]);\n              }\n              return results;\n            })()).concat(nodeName).join(\"/\");\n            (function() {\n              var err;\n              try {\n                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n              } catch (error1) {\n                err = error1;\n                return _this.emit(\"error\", err);\n              }\n            })();\n          }\n          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n            if (!_this.options.preserveChildrenOrder) {\n              node = {};\n              if (_this.options.attrkey in obj) {\n                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                delete obj[_this.options.attrkey];\n              }\n              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                node[_this.options.charkey] = obj[_this.options.charkey];\n                delete obj[_this.options.charkey];\n              }\n              if (Object.getOwnPropertyNames(obj).length > 0) {\n                node[_this.options.childkey] = obj;\n              }\n              obj = node;\n            } else if (s) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              objClone = {};\n              for (key in obj) {\n                if (!hasProp.call(obj, key)) continue;\n                objClone[key] = obj[key];\n              }\n              s[_this.options.childkey].push(objClone);\n              delete obj[\"#name\"];\n              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                obj = obj[charkey];\n              }\n            }\n          }\n          if (stack.length > 0) {\n            return _this.assignOrPush(s, nodeName, obj);\n          } else {\n            if (_this.options.explicitRoot) {\n              old = obj;\n              obj = {};\n              obj[nodeName] = old;\n            }\n            _this.resultObject = obj;\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      ontext = (function(_this) {\n        return function(text) {\n          var charChild, s;\n          s = stack[stack.length - 1];\n          if (s) {\n            s[charkey] += text;\n            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, '').trim() !== '')) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              charChild = {\n                '#name': '__text__'\n              };\n              charChild[charkey] = text;\n              if (_this.options.normalize) {\n                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n              }\n              s[_this.options.childkey].push(charChild);\n            }\n            return s;\n          }\n        };\n      })(this);\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = (function(_this) {\n        return function(text) {\n          var s;\n          s = ontext(text);\n          if (s) {\n            return s.cdata = true;\n          }\n        };\n      })(this);\n    };\n\n    Parser.prototype.parseString = function(str, cb) {\n      var err;\n      if ((cb != null) && typeof cb === \"function\") {\n        this.on(\"end\", function(result) {\n          this.reset();\n          return cb(null, result);\n        });\n        this.on(\"error\", function(err) {\n          this.reset();\n          return cb(err);\n        });\n      }\n      try {\n        str = str.toString();\n        if (str.trim() === '') {\n          this.emit(\"end\", null);\n          return true;\n        }\n        str = bom.stripBOM(str);\n        if (this.options.async) {\n          this.remaining = str;\n          setImmediate(this.processAsync);\n          return this.saxParser;\n        }\n        return this.saxParser.write(str).close();\n      } catch (error1) {\n        err = error1;\n        if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n          this.emit('error', err);\n          return this.saxParser.errThrown = true;\n        } else if (this.saxParser.ended) {\n          throw err;\n        }\n      }\n    };\n\n    Parser.prototype.parseStringPromise = function(str) {\n      return new Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.parseString(str, function(err, value) {\n            if (err) {\n              return reject(err);\n            } else {\n              return resolve(value);\n            }\n          });\n        };\n      })(this));\n    };\n\n    return Parser;\n\n  })(events);\n\n  exports.parseString = function(str, a, b) {\n    var cb, options, parser;\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n      options = {};\n    }\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n\n  exports.parseStringPromise = function(str, a) {\n    var options, parser;\n    if (typeof a === 'object') {\n      options = a;\n    }\n    parser = new exports.Parser(options);\n    return parser.parseStringPromise(str);\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var prefixMatch;\n\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function(str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function(str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function(str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n    return str;\n  };\n\n  exports.parseBooleans = function(str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n    return str;\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, parser, processors,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  defaults = require('./defaults');\n\n  builder = require('./builder');\n\n  parser = require('./parser');\n\n  processors = require('./processors');\n\n  exports.defaults = defaults.defaults;\n\n  exports.processors = processors;\n\n  exports.ValidationError = (function(superClass) {\n    extend(ValidationError, superClass);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n\n  })(Error);\n\n  exports.Builder = builder.Builder;\n\n  exports.Parser = parser.Parser;\n\n  exports.parseString = parser.parseString;\n\n  exports.parseStringPromise = parser.parseStringPromise;\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Disconnected: 1,\n    Preceding: 2,\n    Following: 4,\n    Contains: 8,\n    ContainedBy: 16,\n    ImplementationSpecific: 32\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Element: 1,\n    Attribute: 2,\n    Text: 3,\n    CData: 4,\n    EntityReference: 5,\n    EntityDeclaration: 6,\n    ProcessingInstruction: 7,\n    Comment: 8,\n    Document: 9,\n    DocType: 10,\n    DocumentFragment: 11,\n    NotationDeclaration: 12,\n    Declaration: 201,\n    Raw: 202,\n    AttributeDeclaration: 203,\n    ElementDeclaration: 204,\n    Dummy: 205\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function() {\n    var i, key, len, source, sources, target;\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    None: 0,\n    OpenTag: 1,\n    InsideTag: 2,\n    CloseTag: 3\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLNode;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLAttribute = (function() {\n    function XMLAttribute(parent, name, value) {\n      this.parent = parent;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.value = this.stringify.attValue(value);\n      this.type = NodeType.Attribute;\n      this.isId = false;\n      this.schemaTypeInfo = null;\n    }\n\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function() {\n        return true;\n      }\n    });\n\n    XMLAttribute.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLAttribute.prototype.toString = function(options) {\n      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLAttribute.prototype.debugInfo = function(name) {\n      name = name || this.name;\n      if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else {\n        return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLAttribute.prototype.isEqualNode = function(node) {\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.value !== this.value) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLAttribute;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCData, XMLCharacterData,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLCData = (function(superClass) {\n    extend(XMLCData, superClass);\n\n    function XMLCData(parent, text) {\n      XMLCData.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    XMLCData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCData.prototype.toString = function(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLCData;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLCharacterData, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLCharacterData = (function(superClass) {\n    extend(XMLCharacterData, superClass);\n\n    function XMLCharacterData(parent) {\n      XMLCharacterData.__super__.constructor.call(this, parent);\n      this.value = '';\n    }\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function() {\n        return this.value.length;\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    XMLCharacterData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCharacterData.prototype.substringData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.appendData = function(arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.insertData = function(offset, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.deleteData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.isEqualNode = function(node) {\n      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.data !== this.data) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLCharacterData;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLComment,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n\n  XMLDOMStringList = require('./XMLDOMStringList');\n\n  module.exports = XMLDOMConfiguration = (function() {\n    function XMLDOMConfiguration() {\n      var clonedSelf;\n      this.defaultParams = {\n        \"canonical-form\": false,\n        \"cdata-sections\": false,\n        \"comments\": false,\n        \"datatype-normalization\": false,\n        \"element-content-whitespace\": true,\n        \"entities\": true,\n        \"error-handler\": new XMLDOMErrorHandler(),\n        \"infoset\": true,\n        \"validate-if-schema\": false,\n        \"namespaces\": true,\n        \"namespace-declarations\": true,\n        \"normalize-characters\": false,\n        \"schema-location\": '',\n        \"schema-type\": '',\n        \"split-cdata-sections\": true,\n        \"validate\": false,\n        \"well-formed\": true\n      };\n      this.params = clonedSelf = Object.create(this.defaultParams);\n    }\n\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n\n    XMLDOMConfiguration.prototype.getParameter = function(name) {\n      if (this.params.hasOwnProperty(name)) {\n        return this.params[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n      return true;\n    };\n\n    XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n      if (value != null) {\n        return this.params[name] = value;\n      } else {\n        return delete this.params[name];\n      }\n    };\n\n    return XMLDOMConfiguration;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMErrorHandler;\n\n  module.exports = XMLDOMErrorHandler = (function() {\n    function XMLDOMErrorHandler() {}\n\n    XMLDOMErrorHandler.prototype.handleError = function(error) {\n      throw new Error(error);\n    };\n\n    return XMLDOMErrorHandler;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = (function() {\n    function XMLDOMImplementation() {}\n\n    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n      return true;\n    };\n\n    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLDOMImplementation;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMStringList;\n\n  module.exports = XMLDOMStringList = (function() {\n    function XMLDOMStringList(arr) {\n      this.arr = arr || [];\n    }\n\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\n      get: function() {\n        return this.arr.length;\n      }\n    });\n\n    XMLDOMStringList.prototype.item = function(index) {\n      return this.arr[index] || null;\n    };\n\n    XMLDOMStringList.prototype.contains = function(str) {\n      return this.arr.indexOf(str) !== -1;\n    };\n\n    return XMLDOMStringList;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = (function(superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDElement, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDElement = (function(superClass) {\n    extend(XMLDTDElement, superClass);\n\n    function XMLDTDElement(parent, name, value) {\n      XMLDTDElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    XMLDTDElement.prototype.toString = function(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDElement;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDEntity = (function(superClass) {\n    extend(XMLDTDEntity, superClass);\n\n    function XMLDTDEntity(parent, pe, name, value) {\n      XMLDTDEntity.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n      }\n      if (value == null) {\n        throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n      }\n      this.pe = !!pe;\n      this.name = this.stringify.name(name);\n      this.type = NodeType.EntityDeclaration;\n      if (!isObject(value)) {\n        this.value = this.stringify.dtdEntityValue(value);\n        this.internal = true;\n      } else {\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        if (value.pubID && !value.sysID) {\n          throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n        }\n        this.internal = false;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n        if (value.nData != null) {\n          this.nData = this.stringify.dtdNData(value.nData);\n        }\n        if (this.pe && this.nData) {\n          throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n        }\n      }\n    }\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDTDEntity.prototype.toString = function(options) {\n      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDEntity;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDNotation = (function(superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.NotationDeclaration;\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    XMLDTDNotation.prototype.toString = function(options) {\n      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDNotation;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDeclaration = (function(superClass) {\n    extend(XMLDeclaration, superClass);\n\n    function XMLDeclaration(parent, version, encoding, standalone) {\n      var ref;\n      XMLDeclaration.__super__.constructor.call(this, parent);\n      if (isObject(version)) {\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    XMLDeclaration.prototype.toString = function(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDeclaration;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLDocType = (function(superClass) {\n    extend(XMLDocType, superClass);\n\n    function XMLDocType(parent, pubID, sysID) {\n      var child, i, len, ref, ref1, ref2;\n      XMLDocType.__super__.constructor.call(this, parent);\n      this.type = NodeType.DocType;\n      if (parent.children) {\n        ref = parent.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.Element) {\n            this.name = child.name;\n            break;\n          }\n        }\n      }\n      this.documentObject = parent;\n      if (isObject(pubID)) {\n        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n      }\n      if (sysID == null) {\n        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];\n      }\n      if (pubID != null) {\n        this.pubID = this.stringify.dtdPubID(pubID);\n      }\n      if (sysID != null) {\n        this.sysID = this.stringify.dtdSysID(sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLDocType.prototype.element = function(name, value) {\n      var child;\n      child = new XMLDTDElement(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var child;\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.entity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, false, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.pEntity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, true, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.notation = function(name, value) {\n      var child;\n      child = new XMLDTDNotation(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.toString = function(options) {\n      return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocType.prototype.ele = function(name, value) {\n      return this.element(name, value);\n    };\n\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n    };\n\n    XMLDocType.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocType.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocType.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    XMLDocType.prototype.up = function() {\n      return this.root() || this.documentObject;\n    };\n\n    XMLDocType.prototype.isEqualNode = function(node) {\n      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.name !== this.name) {\n        return false;\n      }\n      if (node.publicId !== this.publicId) {\n        return false;\n      }\n      if (node.systemId !== this.systemId) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLDocType;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isPlainObject = require('./Utility').isPlainObject;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  module.exports = XMLDocument = (function(superClass) {\n    extend(XMLDocument, superClass);\n\n    function XMLDocument(options) {\n      XMLDocument.__super__.constructor.call(this, null);\n      this.name = \"#document\";\n      this.type = NodeType.Document;\n      this.documentURI = null;\n      this.domConfig = new XMLDOMConfiguration();\n      options || (options = {});\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n    }\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDocument.prototype.end = function(writer) {\n      var writerOptions;\n      writerOptions = {};\n      if (!writer) {\n        writer = this.options.writer;\n      } else if (isPlainObject(writer)) {\n        writerOptions = writer;\n        writer = this.options.writer;\n      }\n      return writer.document(this, writer.filterOptions(writerOptions));\n    };\n\n    XMLDocument.prototype.toString = function(options) {\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocument.prototype.createElement = function(tagName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createDocumentFragment = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTextNode = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createComment = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createCDATASection = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttribute = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEntityReference = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.importNode = function(importedNode, deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementById = function(elementId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.adoptNode = function(source) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.normalizeDocument = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEvent = function(eventInterface) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createRange = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLDocument;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n\n  NodeType = require('./NodeType');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLElement = require('./XMLElement');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLDocumentCB = (function() {\n    function XMLDocumentCB(options, onData, onEnd) {\n      var writerOptions;\n      this.name = \"?xml\";\n      this.type = NodeType.Document;\n      options || (options = {});\n      writerOptions = {};\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      } else if (isPlainObject(options.writer)) {\n        writerOptions = options.writer;\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.writer = options.writer;\n      this.writerOptions = this.writer.filterOptions(writerOptions);\n      this.stringify = new XMLStringifier(options);\n      this.onDataCallback = onData || function() {};\n      this.onEndCallback = onEnd || function() {};\n      this.currentNode = null;\n      this.currentLevel = -1;\n      this.openTags = {};\n      this.documentStarted = false;\n      this.documentCompleted = false;\n      this.root = null;\n    }\n\n    XMLDocumentCB.prototype.createChildNode = function(node) {\n      var att, attName, attributes, child, i, len, ref1, ref2;\n      switch (node.type) {\n        case NodeType.CData:\n          this.cdata(node.value);\n          break;\n        case NodeType.Comment:\n          this.comment(node.value);\n          break;\n        case NodeType.Element:\n          attributes = {};\n          ref1 = node.attribs;\n          for (attName in ref1) {\n            if (!hasProp.call(ref1, attName)) continue;\n            att = ref1[attName];\n            attributes[attName] = att.value;\n          }\n          this.node(node.name, attributes);\n          break;\n        case NodeType.Dummy:\n          this.dummy();\n          break;\n        case NodeType.Raw:\n          this.raw(node.value);\n          break;\n        case NodeType.Text:\n          this.text(node.value);\n          break;\n        case NodeType.ProcessingInstruction:\n          this.instruction(node.target, node.value);\n          break;\n        default:\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n      }\n      ref2 = node.children;\n      for (i = 0, len = ref2.length; i < len; i++) {\n        child = ref2[i];\n        this.createChildNode(child);\n        if (child.type === NodeType.Element) {\n          this.up();\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dummy = function() {\n      return this;\n    };\n\n    XMLDocumentCB.prototype.node = function(name, attributes, text) {\n      var ref1;\n      if (name == null) {\n        throw new Error(\"Missing node name.\");\n      }\n      if (this.root && this.currentLevel === -1) {\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n      }\n      this.openCurrent();\n      name = getValue(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];\n      }\n      this.currentNode = new XMLElement(this, name, attributes);\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      if (text != null) {\n        this.text(text);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.element = function(name, attributes, text) {\n      var child, i, len, oldValidationFlag, ref1, root;\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        this.dtdElement.apply(this, arguments);\n      } else {\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n          oldValidationFlag = this.options.noValidation;\n          this.options.noValidation = true;\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\n          root.element(name);\n          this.options.noValidation = oldValidationFlag;\n          ref1 = root.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            this.createChildNode(child);\n            if (child.type === NodeType.Element) {\n              this.up();\n            }\n          }\n        } else {\n          this.node(name, attributes, text);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (!this.currentNode || this.currentNode.children) {\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.text = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLText(this, value);\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.cdata = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLCData(this, value);\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.comment = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLComment(this, value);\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.raw = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLRaw(this, value);\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.instruction = function(target, value) {\n      var i, insTarget, insValue, len, node;\n      this.openCurrent();\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (i = 0, len = target.length; i < len; i++) {\n          insTarget = target[i];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        node = new XMLProcessingInstruction(this, target, value);\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n      var node;\n      this.openCurrent();\n      if (this.documentStarted) {\n        throw new Error(\"declaration() must be the first node.\");\n      }\n      node = new XMLDeclaration(this, version, encoding, standalone);\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n      this.openCurrent();\n      if (root == null) {\n        throw new Error(\"Missing root node name.\");\n      }\n      if (this.root) {\n        throw new Error(\"dtd() must come before the root node.\");\n      }\n      this.currentNode = new XMLDocType(this, pubID, sysID);\n      this.currentNode.rootNodeName = root;\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dtdElement = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDElement(this, name, value);\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.entity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, false, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.pEntity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, true, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.notation = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDNotation(this, name, value);\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.up = function() {\n      if (this.currentLevel < 0) {\n        throw new Error(\"The document node has no parent.\");\n      }\n      if (this.currentNode) {\n        if (this.currentNode.children) {\n          this.closeNode(this.currentNode);\n        } else {\n          this.openNode(this.currentNode);\n        }\n        this.currentNode = null;\n      } else {\n        this.closeNode(this.openTags[this.currentLevel]);\n      }\n      delete this.openTags[this.currentLevel];\n      this.currentLevel--;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.end = function() {\n      while (this.currentLevel >= 0) {\n        this.up();\n      }\n      return this.onEnd();\n    };\n\n    XMLDocumentCB.prototype.openCurrent = function() {\n      if (this.currentNode) {\n        this.currentNode.children = true;\n        return this.openNode(this.currentNode);\n      }\n    };\n\n    XMLDocumentCB.prototype.openNode = function(node) {\n      var att, chunk, name, ref1;\n      if (!node.isOpen) {\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n          this.root = node;\n        }\n        chunk = '';\n        if (node.type === NodeType.Element) {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\n          ref1 = node.attribs;\n          for (name in ref1) {\n            if (!hasProp.call(ref1, name)) continue;\n            att = ref1[name];\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n          }\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\n          this.writerOptions.state = WriterState.InsideTag;\n        } else {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\n          if (node.pubID && node.sysID) {\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\n          }\n          if (node.children) {\n            chunk += ' [';\n            this.writerOptions.state = WriterState.InsideTag;\n          } else {\n            this.writerOptions.state = WriterState.CloseTag;\n            chunk += '>';\n          }\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.onData(chunk, this.currentLevel);\n        return node.isOpen = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.closeNode = function(node) {\n      var chunk;\n      if (!node.isClosed) {\n        chunk = '';\n        this.writerOptions.state = WriterState.CloseTag;\n        if (node.type === NodeType.Element) {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        } else {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.writerOptions.state = WriterState.None;\n        this.onData(chunk, this.currentLevel);\n        return node.isClosed = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.onData = function(chunk, level) {\n      this.documentStarted = true;\n      return this.onDataCallback(chunk, level + 1);\n    };\n\n    XMLDocumentCB.prototype.onEnd = function() {\n      this.documentCompleted = true;\n      return this.onEndCallback();\n    };\n\n    XMLDocumentCB.prototype.debugInfo = function(name) {\n      if (name == null) {\n        return \"\";\n      } else {\n        return \"node: <\" + name + \">\";\n      }\n    };\n\n    XMLDocumentCB.prototype.ele = function() {\n      return this.element.apply(this, arguments);\n    };\n\n    XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n      return this.doctype(root, pubID, sysID);\n    };\n\n    XMLDocumentCB.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLDocumentCB.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.att = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.a = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocumentCB.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocumentCB.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    return XMLDocumentCB;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDummy, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDummy = (function(superClass) {\n    extend(XMLDummy, superClass);\n\n    function XMLDummy(parent) {\n      XMLDummy.__super__.constructor.call(this, parent);\n      this.type = NodeType.Dummy;\n    }\n\n    XMLDummy.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLDummy.prototype.toString = function(options) {\n      return '';\n    };\n\n    return XMLDummy;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLElement = (function(superClass) {\n    extend(XMLElement, superClass);\n\n    function XMLElement(parent, name, attributes) {\n      var child, j, len, ref1;\n      XMLElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing element name. \" + this.debugInfo());\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.Element;\n      this.attribs = {};\n      this.schemaTypeInfo = null;\n      if (attributes != null) {\n        this.attribute(attributes);\n      }\n      if (parent.type === NodeType.Document) {\n        this.isRoot = true;\n        this.documentObject = parent;\n        parent.rootObject = this;\n        if (parent.children) {\n          ref1 = parent.children;\n          for (j = 0, len = ref1.length; j < len; j++) {\n            child = ref1[j];\n            if (child.type === NodeType.DocType) {\n              child.name = this.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    XMLElement.prototype.clone = function() {\n      var att, attName, clonedSelf, ref1;\n      clonedSelf = Object.create(this);\n      if (clonedSelf.isRoot) {\n        clonedSelf.documentObject = null;\n      }\n      clonedSelf.attribs = {};\n      ref1 = this.attribs;\n      for (attName in ref1) {\n        if (!hasProp.call(ref1, attName)) continue;\n        att = ref1[attName];\n        clonedSelf.attribs[attName] = att.clone();\n      }\n      clonedSelf.children = [];\n      this.children.forEach(function(child) {\n        var clonedChild;\n        clonedChild = child.clone();\n        clonedChild.parent = clonedSelf;\n        return clonedSelf.children.push(clonedChild);\n      });\n      return clonedSelf;\n    };\n\n    XMLElement.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLElement.prototype.removeAttribute = function(name) {\n      var attName, j, len;\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo());\n      }\n      name = getValue(name);\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          attName = name[j];\n          delete this.attribs[attName];\n        }\n      } else {\n        delete this.attribs[name];\n      }\n      return this;\n    };\n\n    XMLElement.prototype.toString = function(options) {\n      return this.options.writer.element(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLElement.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.getAttribute = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].value;\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttribute = function(name, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNode = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttributeNode = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.hasAttribute = function(name) {\n      return this.attribs.hasOwnProperty(name);\n    };\n\n    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttribute = function(name, isId) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].isId;\n      } else {\n        return isId;\n      }\n    };\n\n    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.isEqualNode = function(node) {\n      var i, j, ref1;\n      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.attribs.length !== this.attribs.length) {\n        return false;\n      }\n      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {\n        if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    return XMLElement;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNamedNodeMap;\n\n  module.exports = XMLNamedNodeMap = (function() {\n    function XMLNamedNodeMap(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\n      get: function() {\n        return Object.keys(this.nodes).length || 0;\n      }\n    });\n\n    XMLNamedNodeMap.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n      return this.nodes[name];\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n      var oldNode;\n      oldNode = this.nodes[node.nodeName];\n      this.nodes[node.nodeName] = node;\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n      var oldNode;\n      oldNode = this.nodes[name];\n      delete this.nodes[name];\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.item = function(index) {\n      return this.nodes[Object.keys(this.nodes)[index]] || null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLNamedNodeMap;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,\n    hasProp = {}.hasOwnProperty;\n\n  ref1 = require('./Utility'), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n\n  XMLElement = null;\n\n  XMLCData = null;\n\n  XMLComment = null;\n\n  XMLDeclaration = null;\n\n  XMLDocType = null;\n\n  XMLRaw = null;\n\n  XMLText = null;\n\n  XMLProcessingInstruction = null;\n\n  XMLDummy = null;\n\n  NodeType = null;\n\n  XMLNodeList = null;\n\n  XMLNamedNodeMap = null;\n\n  DocumentPosition = null;\n\n  module.exports = XMLNode = (function() {\n    function XMLNode(parent1) {\n      this.parent = parent1;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      this.value = null;\n      this.children = [];\n      this.baseURI = null;\n      if (!XMLElement) {\n        XMLElement = require('./XMLElement');\n        XMLCData = require('./XMLCData');\n        XMLComment = require('./XMLComment');\n        XMLDeclaration = require('./XMLDeclaration');\n        XMLDocType = require('./XMLDocType');\n        XMLRaw = require('./XMLRaw');\n        XMLText = require('./XMLText');\n        XMLProcessingInstruction = require('./XMLProcessingInstruction');\n        XMLDummy = require('./XMLDummy');\n        NodeType = require('./NodeType');\n        XMLNodeList = require('./XMLNodeList');\n        XMLNamedNodeMap = require('./XMLNamedNodeMap');\n        DocumentPosition = require('./DocumentPosition');\n      }\n    }\n\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\n      get: function() {\n        return this.value;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\n      get: function() {\n        if (!this.childNodeList || !this.childNodeList.nodes) {\n          this.childNodeList = new XMLNodeList(this.children);\n        }\n        return this.childNodeList;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\n      get: function() {\n        return this.children[0] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\n      get: function() {\n        return this.children[this.children.length - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i + 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\n      get: function() {\n        return this.document() || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\n      get: function() {\n        var child, j, len, ref2, str;\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n          str = '';\n          ref2 = this.children;\n          for (j = 0, len = ref2.length; j < len; j++) {\n            child = ref2[j];\n            if (child.textContent) {\n              str += child.textContent;\n            }\n          }\n          return str;\n        } else {\n          return null;\n        }\n      },\n      set: function(value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLNode.prototype.setParent = function(parent) {\n      var child, j, len, ref2, results;\n      this.parent = parent;\n      if (parent) {\n        this.options = parent.options;\n        this.stringify = parent.stringify;\n      }\n      ref2 = this.children;\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        results.push(child.setParent(this));\n      }\n      return results;\n    };\n\n    XMLNode.prototype.element = function(name, attributes, text) {\n      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n      lastChild = null;\n      if (attributes === null && (text == null)) {\n        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];\n      }\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          item = name[j];\n          lastChild = this.element(item);\n        }\n      } else if (isFunction(name)) {\n        lastChild = this.element(name.apply());\n      } else if (isObject(name)) {\n        for (key in name) {\n          if (!hasProp.call(name, key)) continue;\n          val = name[key];\n          if (isFunction(val)) {\n            val = val.apply();\n          }\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n            lastChild = this.dummy();\n          } else if (isObject(val) && isEmpty(val)) {\n            lastChild = this.element(key);\n          } else if (!this.options.keepNullNodes && (val == null)) {\n            lastChild = this.dummy();\n          } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n            for (k = 0, len1 = val.length; k < len1; k++) {\n              item = val[k];\n              childNode = {};\n              childNode[key] = item;\n              lastChild = this.element(childNode);\n            }\n          } else if (isObject(val)) {\n            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n              lastChild = this.element(val);\n            } else {\n              lastChild = this.element(key);\n              lastChild.element(val);\n            }\n          } else {\n            lastChild = this.element(key, val);\n          }\n        }\n      } else if (!this.options.keepNullNodes && text === null) {\n        lastChild = this.dummy();\n      } else {\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n          lastChild = this.text(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n          lastChild = this.cdata(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n          lastChild = this.comment(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n          lastChild = this.raw(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n        } else {\n          lastChild = this.node(name, attributes, text);\n        }\n      }\n      if (lastChild == null) {\n        throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n      }\n      return lastChild;\n    };\n\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, newChild, refChild, removed;\n      if (name != null ? name.type : void 0) {\n        newChild = name;\n        refChild = attributes;\n        newChild.setParent(this);\n        if (refChild) {\n          i = children.indexOf(refChild);\n          removed = children.splice(i);\n          children.push(newChild);\n          Array.prototype.push.apply(children, removed);\n        } else {\n          children.push(newChild);\n        }\n        return newChild;\n      } else {\n        if (this.isRoot) {\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n        }\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        child = this.parent.element(name, attributes, text);\n        Array.prototype.push.apply(this.parent.children, removed);\n        return child;\n      }\n    };\n\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, removed;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n      }\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.element(name, attributes, text);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return child;\n    };\n\n    XMLNode.prototype.remove = function() {\n      var i, ref2;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;\n      return this.parent;\n    };\n\n    XMLNode.prototype.node = function(name, attributes, text) {\n      var child, ref2;\n      if (name != null) {\n        name = getValue(name);\n      }\n      attributes || (attributes = {});\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];\n      }\n      child = new XMLElement(this, name, attributes);\n      if (text != null) {\n        child.text(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLNode.prototype.text = function(value) {\n      var child;\n      if (isObject(value)) {\n        this.element(value);\n      }\n      child = new XMLText(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.cdata = function(value) {\n      var child;\n      child = new XMLCData(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.comment = function(value) {\n      var child;\n      child = new XMLComment(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.commentBefore = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.commentAfter = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.raw = function(value) {\n      var child;\n      child = new XMLRaw(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.dummy = function() {\n      var child;\n      child = new XMLDummy(this);\n      return child;\n    };\n\n    XMLNode.prototype.instruction = function(target, value) {\n      var insTarget, insValue, instruction, j, len;\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (j = 0, len = target.length; j < len; j++) {\n          insTarget = target[j];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        instruction = new XMLProcessingInstruction(this, target, value);\n        this.children.push(instruction);\n      }\n      return this;\n    };\n\n    XMLNode.prototype.instructionBefore = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.instructionAfter = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {\n      var doc, xmldec;\n      doc = this.document();\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n      if (doc.children.length === 0) {\n        doc.children.unshift(xmldec);\n      } else if (doc.children[0].type === NodeType.Declaration) {\n        doc.children[0] = xmldec;\n      } else {\n        doc.children.unshift(xmldec);\n      }\n      return doc.root() || doc;\n    };\n\n    XMLNode.prototype.dtd = function(pubID, sysID) {\n      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n      doc = this.document();\n      doctype = new XMLDocType(doc, pubID, sysID);\n      ref2 = doc.children;\n      for (i = j = 0, len = ref2.length; j < len; i = ++j) {\n        child = ref2[i];\n        if (child.type === NodeType.DocType) {\n          doc.children[i] = doctype;\n          return doctype;\n        }\n      }\n      ref3 = doc.children;\n      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {\n        child = ref3[i];\n        if (child.isRoot) {\n          doc.children.splice(i, 0, doctype);\n          return doctype;\n        }\n      }\n      doc.children.push(doctype);\n      return doctype;\n    };\n\n    XMLNode.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLNode.prototype.root = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node.rootObject;\n        } else if (node.isRoot) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.document = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.end = function(options) {\n      return this.document().end(options);\n    };\n\n    XMLNode.prototype.prev = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node. \" + this.debugInfo());\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLNode.prototype.next = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node. \" + this.debugInfo());\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLNode.prototype.importDocument = function(doc) {\n      var clonedRoot;\n      clonedRoot = doc.root().clone();\n      clonedRoot.parent = this;\n      clonedRoot.isRoot = false;\n      this.children.push(clonedRoot);\n      return this;\n    };\n\n    XMLNode.prototype.debugInfo = function(name) {\n      var ref2, ref3;\n      name = name || this.name;\n      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n        return \"\";\n      } else if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n        return \"node: <\" + name + \">\";\n      } else {\n        return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLNode.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLNode.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLNode.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLNode.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.u = function() {\n      return this.up();\n    };\n\n    XMLNode.prototype.importXMLBuilder = function(doc) {\n      return this.importDocument(doc);\n    };\n\n    XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.removeChild = function(oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.appendChild = function(newChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.hasChildNodes = function() {\n      return this.children.length !== 0;\n    };\n\n    XMLNode.prototype.cloneNode = function(deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.normalize = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isSupported = function(feature, version) {\n      return true;\n    };\n\n    XMLNode.prototype.hasAttributes = function() {\n      return this.attribs.length !== 0;\n    };\n\n    XMLNode.prototype.compareDocumentPosition = function(other) {\n      var ref, res;\n      ref = this;\n      if (ref === other) {\n        return 0;\n      } else if (this.document() !== other.document()) {\n        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n        if (Math.random() < 0.5) {\n          res |= DocumentPosition.Preceding;\n        } else {\n          res |= DocumentPosition.Following;\n        }\n        return res;\n      } else if (ref.isAncestor(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Preceding;\n      } else if (ref.isDescendant(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Following;\n      } else if (ref.isPreceding(other)) {\n        return DocumentPosition.Preceding;\n      } else {\n        return DocumentPosition.Following;\n      }\n    };\n\n    XMLNode.prototype.isSameNode = function(other) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isEqualNode = function(node) {\n      var i, j, ref2;\n      if (node.nodeType !== this.nodeType) {\n        return false;\n      }\n      if (node.children.length !== this.children.length) {\n        return false;\n      }\n      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {\n        if (!this.children[i].isEqualNode(node.children[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    XMLNode.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.setUserData = function(key, data, handler) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.getUserData = function(key) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.contains = function(other) {\n      if (!other) {\n        return false;\n      }\n      return other === this || this.isDescendant(other);\n    };\n\n    XMLNode.prototype.isDescendant = function(node) {\n      var child, isDescendantChild, j, len, ref2;\n      ref2 = this.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (node === child) {\n          return true;\n        }\n        isDescendantChild = child.isDescendant(node);\n        if (isDescendantChild) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    XMLNode.prototype.isAncestor = function(node) {\n      return node.isDescendant(this);\n    };\n\n    XMLNode.prototype.isPreceding = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos < thisPos;\n      }\n    };\n\n    XMLNode.prototype.isFollowing = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos > thisPos;\n      }\n    };\n\n    XMLNode.prototype.treePosition = function(node) {\n      var found, pos;\n      pos = 0;\n      found = false;\n      this.foreachTreeNode(this.document(), function(childNode) {\n        pos++;\n        if (!found && childNode === node) {\n          return found = true;\n        }\n      });\n      if (found) {\n        return pos;\n      } else {\n        return -1;\n      }\n    };\n\n    XMLNode.prototype.foreachTreeNode = function(node, func) {\n      var child, j, len, ref2, res;\n      node || (node = this.document());\n      ref2 = node.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (res = func(child)) {\n          return res;\n        } else {\n          res = this.foreachTreeNode(child, func);\n          if (res) {\n            return res;\n          }\n        }\n      }\n    };\n\n    return XMLNode;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNodeList;\n\n  module.exports = XMLNodeList = (function() {\n    function XMLNodeList(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\n      get: function() {\n        return this.nodes.length || 0;\n      }\n    });\n\n    XMLNodeList.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNodeList.prototype.item = function(index) {\n      return this.nodes[index] || null;\n    };\n\n    return XMLNodeList;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLProcessingInstruction = (function(superClass) {\n    extend(XMLProcessingInstruction, superClass);\n\n    function XMLProcessingInstruction(parent, target, value) {\n      XMLProcessingInstruction.__super__.constructor.call(this, parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    XMLProcessingInstruction.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLProcessingInstruction.prototype.toString = function(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLProcessingInstruction;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLNode, XMLRaw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = (function(superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n\n  })(XMLNode);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLStreamWriter = (function(superClass) {\n    extend(XMLStreamWriter, superClass);\n\n    function XMLStreamWriter(stream, options) {\n      this.stream = stream;\n      XMLStreamWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStreamWriter.prototype.endline = function(node, options, level) {\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n        return '';\n      } else {\n        return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n      }\n    };\n\n    XMLStreamWriter.prototype.document = function(doc, options) {\n      var child, i, j, k, len, len1, ref, ref1, results;\n      ref = doc.children;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        child = ref[i];\n        child.isLastRootNode = i === doc.children.length - 1;\n      }\n      options = this.filterOptions(options);\n      ref1 = doc.children;\n      results = [];\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        child = ref1[k];\n        results.push(this.writeChildNode(child, options, 0));\n      }\n      return results;\n    };\n\n    XMLStreamWriter.prototype.attribute = function(att, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n    };\n\n    XMLStreamWriter.prototype.cdata = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.comment = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.declaration = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.docType = function(node, options, level) {\n      var child, j, len, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level));\n      this.stream.write('<!DOCTYPE ' + node.root().name);\n      if (node.pubID && node.sysID) {\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n      } else if (node.sysID) {\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n      }\n      if (node.children.length > 0) {\n        this.stream.write(' [');\n        this.stream.write(this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (j = 0, len = ref.length; j < len; j++) {\n          child = ref[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(']');\n      }\n      options.state = WriterState.CloseTag;\n      this.stream.write(options.spaceBeforeSlash + '>');\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level) + '<' + node.name);\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          this.stream.write('>');\n          options.state = WriterState.CloseTag;\n          this.stream.write('</' + node.name + '>');\n        } else {\n          options.state = WriterState.CloseTag;\n          this.stream.write(options.spaceBeforeSlash + '/>');\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        this.stream.write('>');\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        this.stream.write('</' + node.name + '>');\n      } else {\n        this.stream.write('>' + this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref1 = node.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\n      }\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.raw = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.text = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n    };\n\n    return XMLStreamWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  module.exports = XMLStringWriter = (function(superClass) {\n    extend(XMLStringWriter, superClass);\n\n    function XMLStringWriter(options) {\n      XMLStringWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStringWriter.prototype.document = function(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    };\n\n    return XMLStringWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var regex, res;\n      if (this.options.noValidation) {\n        return str;\n      }\n      regex = '';\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function(str) {\n      var regex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLText,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = (function(superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function(options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function(offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function(content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n\n  })(XMLCharacterData);\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  assign = require('./Utility').assign;\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLWriterBase = (function() {\n    function XMLWriterBase(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    XMLWriterBase.prototype.filterOptions = function(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    };\n\n    XMLWriterBase.prototype.indent = function(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    };\n\n    XMLWriterBase.prototype.endline = function(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    };\n\n    XMLWriterBase.prototype.attribute = function(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      r = ' ' + att.name + '=\"' + att.value + '\"';\n      this.closeAttribute(att, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.cdata = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.comment = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.declaration = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.docType = function(node, options, level) {\n      var child, i, len, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n      level || (level = 0);\n      prettySuppressed = false;\n      r = '';\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r += this.indent(node, options, level) + '<' + node.name;\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        r += this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        if (options.dontPrettyTextNodes) {\n          ref1 = node.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref2 = node.children;\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\n          child = ref2[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    };\n\n    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.raw = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.text = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.openNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n\n    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n\n    return XMLWriterBase;\n\n  })();\n\n}).call(this);\n","// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n\n  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    doc = new XMLDocument(options);\n    root = doc.element(name);\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  module.exports.begin = function(options, onData, onEnd) {\n    var ref1;\n    if (isFunction(options)) {\n      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n","import {ShadowrunRoll, ShadowrunRoller} from '../rolls/ShadowrunRoller';\nimport {Helpers} from '../helpers';\nimport {SR5Item} from '../item/SR5Item';\nimport {FLAGS, SKILL_DEFAULT_NAME, SR, SYSTEM_NAME} from '../constants';\nimport {PartsList} from '../parts/PartsList';\nimport {ShadowrunActorDialogs} from \"../apps/dialogs/ShadowrunActorDialogs\";\nimport {createRollChatMessage} from \"../chat\";\nimport {SR5Combat} from \"../combat/SR5Combat\";\nimport {SoakFlow} from './flows/SoakFlow';\nimport {DefaultValues} from '../data/DataDefaults';\nimport {SkillFlow} from \"./flows/SkillFlow\";\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\nimport AttributeField = Shadowrun.AttributeField;\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\nimport SkillField = Shadowrun.SkillField;\nimport ModList = Shadowrun.ModList;\nimport LimitField = Shadowrun.LimitField;\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\nimport VehicleStat = Shadowrun.VehicleStat;\nimport Attributes = Shadowrun.Attributes;\nimport Limits = Shadowrun.Limits;\nimport DamageData = Shadowrun.DamageData;\nimport TrackType = Shadowrun.TrackType;\nimport OverflowTrackType = Shadowrun.OverflowTrackType;\nimport SpellDefenseOptions = Shadowrun.SpellDefenseOptions;\nimport NumberOrEmpty = Shadowrun.NumberOrEmpty;\nimport VehicleStats = Shadowrun.VehicleStats;\nimport ActorArmorData = Shadowrun.ActorArmorData;\nimport ConditionData = Shadowrun.ConditionData;\nimport Skills = Shadowrun.Skills;\nimport {SkillRules} from \"../rules/SkillRules\";\nimport CharacterSkills = Shadowrun.CharacterSkills;\nimport {SR5} from \"../config\";\nimport ShadowrunActorData = Shadowrun.ShadowrunActorData;\nimport {CharacterDataPrepare} from \"./prep/CharacterPrep\";\nimport {SR5ItemDataWrapper} from \"../data/SR5ItemDataWrapper\";\nimport {CritterDataPrepare} from \"./prep/CritterPrep\";\nimport {SpiritDataPrepare} from \"./prep/SpiritPrep\";\nimport {SpriteDataPrepare} from \"./prep/SpritePrep\";\nimport {VehicleDataPreparation} from \"./prep/VehiclePrep\";\nimport SpiritActorData = Shadowrun.SpiritActorData;\nimport CharacterData = Shadowrun.CharacterData;\nimport CharacterActorData = Shadowrun.CharacterActorData;\nimport SpriteActorData = Shadowrun.SpriteActorData;\nimport VehicleData = Shadowrun.VehicleData;\nimport VehicleActorData = Shadowrun.VehicleActorData;\nimport CritterActorData = Shadowrun.CritterActorData;\nimport {Modifiers} from \"../rules/Modifiers\";\n\n/**\n * The general Shadowrun actor implementation, which currently handles all actor types.\n *\n * To easily access Actor.data without any typing issues us the SR5Actor.asCritterData helpers.\n * They are set up in a way that will handle both error management and type narrowing.\n * Example:\n * <pre><code>\n *     const actor = game.actors.get('randomId');\n *     const critterData = actor.asCritterData();\n *     if (!critterData) return;\n *     // critterData.type === 'critter'\n *     // critterData.data as CritterData\n * </code></pre>\n *\n */\nexport class SR5Actor extends Actor<ShadowrunActorData, SR5Item> {\n    getOverwatchScore() {\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\n        return os !== undefined ? os : 0;\n    }\n\n    async setOverwatchScore(value) {\n        const num = parseInt(value);\n        if (!isNaN(num)) {\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\n        }\n    }\n\n    /**\n     * General data preparation order.\n     * Check base, embeddedEntities and derived methods (see super.prepareData implementation for order)\n     * Only implement data preparation here that doesn't fall into the other three categories.\n     */\n    prepareData() {\n        super.prepareData();\n    }\n\n    /**\n     *  Prepare base data. Be careful that this ONLY included data not in need for item access. Check ClientDocumentMixin.prepareData for order of data prep.\n     */\n    prepareBaseData() {\n        super.prepareBaseData();\n    }\n\n    /**\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\n     */\n    prepareEmbeddedEntities() {\n        super.prepareEmbeddedEntities();\n    }\n\n    /**\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\n     *\n     * At the moment general actor data preparation has been moved to derived data preparation, due it's dependence\n     * on prepareEmbeddedEntities and prepareEmbeddedItems for items modifying attribute values and more.\n     */\n    prepareDerivedData() {\n        super.prepareDerivedData();\n\n        // General actor data preparation has been moved to derived data, as it depends on prepared item data.\n        const itemDataWrappers = this.items.map((item) => new SR5ItemDataWrapper(item.data));\n        switch (this.data.type) {\n            case 'character':\n                CharacterDataPrepare(this.data.data, itemDataWrappers);\n                break;\n            case \"critter\":\n                CritterDataPrepare(this.data.data, itemDataWrappers);\n                break;\n            case \"spirit\":\n                SpiritDataPrepare(this.data.data, itemDataWrappers);\n                break;\n            case \"sprite\":\n                SpriteDataPrepare(this.data.data, itemDataWrappers);\n                break;\n            case \"vehicle\":\n                VehicleDataPreparation(this.data.data, itemDataWrappers);\n                break;\n        }\n    }\n\n    getModifier(modifierName: string): NumberOrEmpty {\n        return this.data.data.modifiers[modifierName];\n    }\n\n    findActiveSkill(skillName?: string): SkillField | undefined {\n        // Check for faulty to catch empty names as well as missing parameters.\n        if (!skillName) return undefined;\n\n        // Handle legacy skills (name is id)\n        const skills = this.getActiveSkills();\n        const skill = skills[skillName];\n        if (skill) return skill;\n\n        // Handle custom skills (name is not id)\n        return Object.values(skills).find(skill => skill.name === skillName);\n    }\n\n    findAttribute(attributeName?: string): AttributeField | undefined {\n        if (attributeName === undefined) return undefined;\n        return this.data.data.attributes[attributeName];\n    }\n\n    findVehicleStat(statName?: string): VehicleStat | undefined {\n        if (statName === undefined) return;\n\n        const vehicleStats = this.getVehicleStats();\n        if (vehicleStats)\n            return vehicleStats[statName];\n    }\n\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\n        if (attributeName === undefined) return undefined;\n        const attribute = this.findAttribute(attributeName);\n        if (!attribute?.limit) return undefined;\n        return this.findLimit(attribute.limit);\n    }\n\n    findLimit(limitName?: string): LimitField | undefined {\n        if (!limitName) return undefined;\n        return this.data.data.limits[limitName];\n    }\n\n    getWoundModifier(): number {\n        if (!(\"wounds\" in this.data.data)) return 0;\n        return -1 * this.data.data.wounds.value || 0;\n    }\n\n    /** Use edge on actors that have an edge attribute.\n     *\n     * NOTE: This doesn't only include characters but spirits, critters and more.\n     */\n    async useEdge(by: number = -1) {\n        const edge = this.getEdge();\n        if (edge && edge.value === 0) return;\n        // NOTE: There used to be a bug which could lower edge usage below zero. Let's quietly ignore and reset. :)\n        const usesLeft = edge.uses > 0 ? edge.uses : 0;\n        const uses = Math.min(edge.value, usesLeft + by);\n\n        // @ts-ignore\n        await this.update({'data.attributes.edge.uses': uses});\n    }\n\n    getEdge(): EdgeAttributeField {\n        return this.data.data.attributes.edge;\n    }\n\n    hasArmor(): boolean {\n        return \"armor\" in this.data.data;\n    }\n\n    getArmor(): ActorArmorData {\n        if (\"armor\" in this.data.data)\n            return this.data.data.armor;\n\n        return DefaultValues.actorArmorData();\n    }\n\n    getMatrixDevice(): SR5Item | undefined | null {\n        if (!(\"matrix\" in this.data.data)) return;\n        const matrix = this.data.data.matrix;\n        if (matrix.device) return this.items.get(matrix.device);\n    }\n\n    getFullDefenseAttribute(): AttributeField | undefined {\n        if (this.isVehicle()) {\n            return this.findVehicleStat('pilot');\n        } else if (this.isCharacter()) {\n            const character = this.asCharacterData();\n            if (character) {\n                let att = character.data.full_defense_attribute;\n                if (!att) att = 'willpower';\n                return this.findAttribute(att);\n            }\n        }\n    }\n\n    getEquippedWeapons(): SR5Item[] {\n        // @ts-ignore // TODO: How to define SR5Actor.items as SR5Item[]?\n        return this.items.filter((item: SR5Item) => item.isEquipped() && item.isWeapon());\n    }\n\n    getRecoilCompensation(): number {\n        let total = 1; // always get 1\n        const strength = this.findAttribute('strength');\n        if (strength) {\n            total += Math.ceil(strength.value / 3);\n        }\n        return total;\n    }\n\n    getDeviceRating(): number {\n        if (!(\"matrix\" in this.data.data)) return 0;\n        // @ts-ignore // parseInt does indeed allow number types.\n        return parseInt(this.data.data.matrix.rating);\n    }\n\n    getAttributes(): Attributes {\n        return this.data.data.attributes;\n    }\n\n    getAttribute(name: string): AttributeField {\n        const attributes = this.getAttributes();\n        return attributes[name];\n    }\n\n    getLimits(): Limits {\n        return this.data.data.limits;\n    }\n\n    getLimit(name: string): LimitField {\n        const limits = this.getLimits();\n        return limits[name];\n    }\n\n    /** Return actor type, which can be different kind of actors from 'character' to 'vehicle'.\n     *  Please check SR5ActorType for reference.\n     */\n    getType(): string {\n        return this.data.type;\n    }\n\n    isCharacter(): boolean {\n        return this.getType() === 'character';\n    }\n\n    isSpirit(): boolean {\n        return this.getType() === 'spirit';\n    }\n\n    isSprite(): boolean {\n        return this.getType() === 'sprite';\n    }\n\n    isVehicle() {\n        return this.getType() === 'vehicle';\n    }\n\n    isGrunt() {\n        if (!(\"is_npc\" in this.data.data) || !(\"npc\" in this.data.data)) return false;\n\n        return this.data.data.is_npc && this.data.data.npc.is_grunt;\n    }\n\n    isCritter() {\n        return this.getType() === 'critter';\n    }\n\n    getVehicleTypeSkillName(): string | undefined {\n        if (!(\"vehicleType\" in this.data.data)) return;\n\n        switch (this.data.data.vehicleType) {\n            case 'air':\n                return 'pilot_aircraft';\n            case 'ground':\n                return 'pilot_ground_craft';\n            case 'water':\n                return 'pilot_water_craft';\n            case 'aerospace':\n                return 'pilot_aerospace';\n            case 'walker':\n                return 'pilot_walker';\n            case 'exotic':\n                return'pilot_exotic_vehicle';\n            default:\n                return;\n        }\n    }\n\n    getVehicleTypeSkill(): SkillField | undefined {\n        if (this.isVehicle()) return;\n\n        const name = this.getVehicleTypeSkillName();\n        return this.findActiveSkill(name);\n    }\n\n    getSkills(): CharacterSkills {\n        return this.data.data.skills;\n    }\n\n    getActiveSkills(): Skills {\n        return this.data.data.skills.active;\n    }\n\n    /**\n     * Return the full pool of a skill including attribute and possible specialization bonus.\n     * @param skillId The ID of the skill. Note that this can differ from what is shown in the skill list. If you're\n     *                unsure about the id and want to search\n     * @param options An object to change the behaviour.\n     *                The property specialization will trigger the pool value to be raised by a specialization modifier\n     *                The property byLbale will cause the param skillId to be interpreted as the shown i18n label.\n     */\n    getPool(skillId: string, options= {specialization: false, byLabel: false}): number {\n        const skill = options.byLabel ? this.getSkillByLabel(skillId) : this.getSkill(skillId);\n        if (!skill || !skill.attribute) return 0;\n        if (!SkillFlow.allowRoll(skill)) return 0;\n\n        const attribute = this.getAttribute(skill.attribute);\n\n        // An attribute can have a NaN value if no value has been set yet. Do the skill for consistency.\n        const attributeValue = typeof attribute.value === 'number' ? attribute.value : 0;\n        const skillValue = typeof skill.value === 'number' ? skill.value : 0;\n\n        if (SkillRules.mustDefaultToRoll(skill) && SkillRules.allowDefaultingRoll(skill)) {\n            return SkillRules.getDefaultingModifier() + attributeValue;\n        }\n\n        const specializationBonus = options.specialization ? SR.skill.SPECIALIZATION_MODIFIER : 0;\n        return skillValue + attributeValue + specializationBonus;\n    }\n\n    /**\n     * Find a skill either by id or label.\n     *\n     * Skills are mapped by an id, which can be a either a lower case name (legacy skills) or a short uid (custom, language, knowledge).\n     * Legacy skills use their name as the id, while not having a name set on the SkillField.\n     * Custom skills use an id and have their name set, however no label. This goes for active, language and knowledge.\n     *\n     * NOTE: Normalizing skill mapping from active, language and knowledge to a single skills with a type property would\n     *       clear this function up.\n     *\n     * @param id Either the searched id, name or translated label of a skill\n     * @param options .byLabel when true search will try to match given skillId with the translated label\n     */\n    getSkill(id: string, options= {byLabel: false}): SkillField | undefined {\n        if (options.byLabel)\n            return this.getSkillByLabel(id);\n\n        const { skills } = this.data.data;\n\n        // Find skill by direct id to key matching.\n        if (skills.active.hasOwnProperty(id)) {\n            return skills.active[id];\n        }\n        if (skills.language.value.hasOwnProperty(id)) {\n            return skills.language.value[id];\n        }\n        // Knowledge skills are de-normalized into categories (street, hobby, ...)\n        for (const categoryKey in skills.knowledge) {\n            if (skills.knowledge.hasOwnProperty(categoryKey)) {\n                const category = skills.knowledge[categoryKey];\n                if (category.value.hasOwnProperty(id)) {\n                    return category.value[id];\n                }\n            }\n        }\n    }\n\n    /**\n     * Search all skills for a matching i18n translation label.\n     * NOTE: You should use getSkill if you have the skillId ready. Only use this for ease of use!\n     *\n     * @param searchedFor The translated output of either the skill label (after localize) or name of the skill in question.\n     * @return The first skill found with a matching translation or name.\n     */\n    getSkillByLabel(searchedFor: string): SkillField|undefined {\n        if (!searchedFor) return;\n\n        const possibleMatch = (skill: SkillField): string =>  skill.label ? game.i18n.localize(skill.label) : skill.name;\n\n        const skills = this.getSkills();\n\n        for (const skill of Object.values(skills.active)) {\n            if (searchedFor === possibleMatch(skill))\n                return skill;\n        }\n\n        for (const skill of Object.values(skills.language.value)) {\n            if (searchedFor === possibleMatch(skill))\n                return skill;\n        }\n\n        // Iterate over all different knowledge skill categories\n        for (const categoryKey in skills.knowledge) {\n            if (!skills.knowledge.hasOwnProperty(categoryKey)) continue;\n            // Typescript can't follow the flow here...\n            const categorySkills = skills.knowledge[categoryKey].value as SkillField[];\n            for (const skill of Object.values(categorySkills) ) {\n                if (searchedFor === possibleMatch(skill))\n                    return skill;\n            }\n        }\n    }\n\n    getSkillLabel(skillId: string): string {\n        const skill = this.getSkill(skillId);\n        if (!skill) {\n            return '';\n        }\n\n        return skill.label ? skill.label : skill.name ? skill.name : '';\n    }\n\n    async addKnowledgeSkill(category, skill?): Promise<string> {\n        const defaultSkill = {\n            name: '',\n            specs: [],\n            base: 0,\n            value: 0,\n            mod: 0,\n        };\n        skill = {\n            ...defaultSkill,\n            ...skill,\n        };\n\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `data.skills.knowledge.${category}.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n\n        await this.update(updateData);\n\n        return id;\n    }\n\n    async addActiveSkill(skillData: Partial<SkillField> = {name: SKILL_DEFAULT_NAME}): Promise<string | undefined> {\n        const skill = DefaultValues.skillData(skillData);\n\n        const activeSkillsPath = 'data.skills.active';\n        const updateSkillDataResult = Helpers.getRandomIdSkillFieldDataEntry(activeSkillsPath, skill);\n\n        if (!updateSkillDataResult) return;\n\n        const {updateSkillData, id} = updateSkillDataResult;\n\n        await this.update(updateSkillData as object);\n\n        return id;\n    }\n\n    async removeLanguageSkill(skillId) {\n        const updateData = Helpers.getDeleteDataEntry('data.skills.language.value', skillId);\n        await this.update(updateData);\n    }\n\n    async addLanguageSkill(skill): Promise<string> {\n        const defaultSkill = {\n            name: '',\n            specs: [],\n            base: 0,\n            value: 0,\n            // TODO: BUG ModifiableValue is ModList<number>[] and not number\n            mod: 0,\n        };\n        skill = {\n            ...defaultSkill,\n            ...skill,\n        };\n\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `data.skills.language.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n\n        await this.update(updateData);\n\n        return id;\n    }\n\n    async removeKnowledgeSkill(skillId, category) {\n        const updateData = Helpers.getDeleteDataEntry(`data.skills.knowledge.${category}.value`, skillId);\n        await this.update(updateData);\n    }\n\n    /** Delete the given active skill by it's id. It doesn't\n     *\n     * @param skillId Either a random id for custom skills or the skills name used as an id.\n     */\n    async removeActiveSkill(skillId: string) {\n        const activeSkills = this.getActiveSkills();\n        if (!activeSkills.hasOwnProperty(skillId)) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        // Don't delete legacy skills to allow prepared items to use them, should the user delete by accident.\n        // New custom skills won't have a label set also.\n        if (skill.name === '' && skill.label !== undefined && skill.label !== '') {\n            await this.hideSkill(skillId);\n            // NOTE: For some reason unlinked token actors won't cause a render on update?\n            if (!this.data.token.actorLink)\n                await this.sheet.render();\n            return;\n        }\n\n        // Remove custom skills without mercy!\n        const updateData = Helpers.getDeleteDataEntry('data.skills.active', skillId);\n        await this.update(updateData);\n    }\n\n    /**\n     * Mark the given skill as hidden.\n     *\n     * NOTE: Hiding skills has\n     *\n     * @param skillId The id of any type of skill.\n     */\n    async hideSkill(skillId: string) {\n        if (!skillId) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        skill.hidden = true;\n        const updateData = Helpers.getUpdateDataEntry(`data.skills.active.${skillId}`, skill);\n        await this.update(updateData);\n    }\n\n    /**\n     * mark the given skill as visible.\n     *\n     * @param skillId The id of any type of skill.\n     */\n    async showSkill(skillId: string) {\n        if (!skillId) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        skill.hidden = false;\n        const updateData = Helpers.getUpdateDataEntry(`data.skills.active.${skillId}`, skill);\n        await this.update(updateData);\n    }\n\n    /**\n     * Show all hidden skills.\n     */\n    async showHiddenSkills() {\n        const updateData = {};\n\n        const skills = this.getActiveSkills();\n        for (const [id, skill] of Object.entries(skills)) {\n            if (skill.hidden === true) {\n                skill.hidden = false;\n                updateData[`data.skills.active.${id}`] = skill;\n            }\n        }\n\n        if (!updateData) return;\n\n        await this.update(updateData);\n        // NOTE: For some reason unlinked token actors won't cause a render on update?\n        if (!this.data.token.actorLink)\n                await this.sheet.render();\n    }\n\n    async rollFade(options: ActorRollOptions = {}, incoming = -1): Promise<ShadowrunRoll|undefined> {\n        const wil = duplicate(this.data.data.attributes.willpower);\n        const res = duplicate(this.data.data.attributes.resonance);\n        const data = this.data.data;\n\n        const parts = new PartsList<number>();\n        parts.addUniquePart(wil.label, wil.value);\n        parts.addUniquePart(res.label, res.value);\n        if (data.modifiers.fade) parts.addUniquePart('SR5.Bonus', data.modifiers.fade);\n\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Fade')}`;\n\n        const actor = this;\n        const roll = await ShadowrunRoller.advancedRoll({\n            parts: parts.list,\n            actor,\n            title: title,\n            wounds: false,\n            hideRollMessage: true\n        });\n\n        if (!roll) return;\n\n        // Reduce damage by soak roll and inform user.\n        const incomingDamage = Helpers.createDamageData(incoming, 'stun');\n        const damage = Helpers.reduceDamageByHits(incomingDamage, roll.hits, 'SR5.Fade');\n\n        await createRollChatMessage({title, roll, actor, damage});\n\n        return roll;\n    }\n\n    async rollDrain(options: ActorRollOptions = {}, incoming = -1): Promise<ShadowrunRoll|undefined> {\n        if (!this.isCharacter()) return;\n\n        const data = this.data.data as CharacterData;\n\n        const wil = duplicate(data.attributes.willpower);\n        const drainAtt = duplicate(data.attributes[data.magic.attribute]);\n\n        const parts = new PartsList<number>();\n        parts.addPart(wil.label, wil.value);\n        parts.addPart(drainAtt.label, drainAtt.value);\n        if (data.modifiers.drain) parts.addUniquePart('SR5.Bonus', data.modifiers.drain);\n\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Drain')}`;\n        const actor = this;\n        const roll = await ShadowrunRoller.advancedRoll({\n            parts: parts.list,\n            title,\n            actor,\n            wounds: false,\n            hideRollMessage: true\n        });\n\n        if (!roll) return;\n\n        // Reduce damage by soak roll and inform user.\n        const incomingDamage = Helpers.createDamageData(incoming, 'stun');\n        const damage = Helpers.reduceDamageByHits(incomingDamage, roll.hits, 'SR5.Drain');\n\n        await createRollChatMessage({title, roll, actor, damage});\n\n        return roll;\n    }\n\n    rollArmor(options: ActorRollOptions = {}, partsProps: ModList<number> = []) {\n        const parts = new PartsList(partsProps);\n        this._addArmorParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options.event,\n            actor: this,\n            parts: parts.list,\n            title: game.i18n.localize('SR5.Armor'),\n            wounds: false,\n        });\n    }\n\n    /** A attack defense is anything against visible attacks (ranged weapons, melee weapons, indirect spell attacks, ...)\n     */\n    async rollAttackDefense(options: DefenseRollOptions = {}, partsProps: ModList<number> = []): Promise<ShadowrunRoll | undefined> {\n        const {attack} = options;\n\n        const defenseDialog = await ShadowrunActorDialogs.createDefenseDialog(this, options, partsProps);\n        const defenseActionData = await defenseDialog.select();\n\n        if (defenseDialog.canceled) return;\n\n        const roll = await ShadowrunRoller.advancedRoll({\n            event: options.event,\n            actor: this,\n            parts: defenseActionData.parts.list,\n            title: game.i18n.localize('SR5.DefenseTest'),\n            incomingAttack: attack,\n            combat: defenseActionData.combat\n        });\n\n        if (!roll) return;\n\n        // Reduce initiative after a successful roll, but before attack handling, to allow for the standalone sheet\n        // defense action to still reduce the initiative.\n        if (defenseActionData.combat.initiative) {\n            await this.changeCombatInitiative(defenseActionData.combat.initiative);\n        }\n\n        if (!attack) return;\n\n        // Collect defense information.\n        let defenderHits = roll.total;\n        let attackerHits = attack.hits || 0;\n        let netHits = Math.max(attackerHits - defenderHits, 0);\n\n        // Reduce damage flow.\n        let damage = attack.damage;\n\n        // modified damage value by netHits.\n        if (netHits > 0) {\n            const {modified} = Helpers.modifyDamageByHits(damage, netHits, \"SR5.NetHits\");\n            damage = modified;\n        }\n\n        const soakRollOptions = {\n            event: options.event,\n            damage,\n        };\n\n        await this.rollSoak(soakRollOptions);\n    }\n\n    async rollDirectSpellDefense(spell: SR5Item, options: SpellDefenseOptions): Promise<ShadowrunRoll | undefined> {\n        if (!spell.isDirectCombatSpell()) return;\n\n        // Prepare the actual roll.\n        options.hideRollMessage = options.hideRollMessage ?? true;\n        const attribute = spell.isManaSpell() ?\n            SR.defense.spell.direct.mana :\n            SR.defense.spell.direct.physical;\n\n        const roll = await this.rollSingleAttribute(attribute, options);\n\n        if (!roll) return;\n\n        // Prepare the resulting damage message.\n        const title = spell.isManaSpell() ?\n            game.i18n.localize('SR5.SpellDefenseDirectMana') :\n            game.i18n.localize('SR5.SpellDefenseDirectPhysical');\n        const modificationLabel = 'SR5.SpellDefense';\n        const actor = this;\n        const damage = Helpers.reduceDamageByHits(options.attack.damage, roll.hits, modificationLabel);\n\n        await createRollChatMessage({title, roll, actor, damage});\n\n        return roll;\n    }\n\n    async rollIndirectSpellDefense(spell: SR5Item, options: SpellDefenseOptions): Promise<ShadowrunRoll | undefined> {\n        if (!spell.isIndirectCombatSpell()) return;\n\n        const opposedParts = spell.getOpposedTestMod();\n\n        // TODO: indirect LOS spell defense works like a ranged weapon defense, but indirect LOS(A) spell defense\n        //       work like grenade attack (no defense, but soak, with the threshold net hits modifying damage.)\n        //       Grenades: SR5#181 Combat Spells: SR5#283\n        return await this.rollAttackDefense(options, opposedParts.list);\n    }\n\n    // TODO: Abstract handling of const damage : ModifiedDamageData\n    async rollSoak(options: SoakRollOptions, partsProps: ModList<number> = []): Promise<ShadowrunRoll|undefined> {\n        return new SoakFlow().runSoakTest(this, options, partsProps);\n    }\n\n    rollSingleAttribute(attId, options: ActorRollOptions) {\n        const attr = duplicate(this.data.data.attributes[attId]);\n        const parts = new PartsList<number>();\n        parts.addUniquePart(attr.label, attr.value);\n        this._addMatrixParts(parts, attr);\n        this._addGlobalParts(parts);\n\n        return ShadowrunRoller.advancedRoll({\n            actor: this,\n            parts: parts.list,\n            event: options?.event,\n            title: options.title ?? Helpers.label(attId),\n            hideRollMessage: options.hideRollMessage\n        });\n    }\n\n    rollTwoAttributes([id1, id2], options: ActorRollOptions) {\n        const attr1 = duplicate(this.data.data.attributes[id1]);\n        const attr2 = duplicate(this.data.data.attributes[id2]);\n        const label1 = Helpers.label(id1);\n        const label2 = Helpers.label(id2);\n        const parts = new PartsList<number>();\n        parts.addPart(attr1.label, attr1.value);\n        parts.addPart(attr2.label, attr2.value);\n        this._addMatrixParts(parts, [attr1, attr2]);\n        this._addGlobalParts(parts);\n\n        return ShadowrunRoller.advancedRoll({\n            actor: this,\n            parts: parts.list,\n            event: options?.event,\n            title: options.title ?? `${label1} + ${label2}`,\n            hideRollMessage: options.hideRollMessage\n        });\n    }\n\n    rollNaturalRecovery(track, options?: ActorRollOptions) {\n        if (!this.isCharacter()) return;\n\n        let id1 = 'body';\n        let id2 = 'willpower';\n        let title = 'Natural Recover';\n        if (track === 'physical') {\n            id2 = 'body';\n            title += ' - Physical - 1 Day';\n        } else {\n            title += ' - Stun - 1 Hour';\n        }\n        let att1 = duplicate(this.data.data.attributes[id1]);\n        let att2 = duplicate(this.data.data.attributes[id2]);\n        const parts = new PartsList<number>();\n        parts.addPart(att1.label, att1.value);\n        parts.addPart(att2.label, att2.value);\n\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: title,\n            extended: true,\n            after: async (roll: ShadowrunRoll | undefined) => {\n                if (!roll) return;\n                let hits = roll.total;\n                const data = this.data.data as CharacterData;\n                let current = data.track[track].value;\n\n                current = Math.max(current - hits, 0);\n\n                let key = `data.track.${track}.value`;\n\n                let u = {};\n                u[key] = current;\n                await this.update(u);\n            },\n        });\n    }\n\n    async rollMatrixAttribute(attr, options?: ActorRollOptions) {\n        if (!(\"matrix\" in this.data.data)) return;\n\n        let matrix_att = duplicate(this.data.data.matrix[attr]);\n        let title = game.i18n.localize(SR5.matrixAttributes[attr]);\n        const parts = new PartsList<number>();\n        parts.addPart(SR5.matrixAttributes[attr], matrix_att.value);\n\n        if (options && options.event && options.event[SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\n        if (Helpers.hasModifiers(options?.event)) {\n            return ShadowrunRoller.advancedRoll({\n                event: options?.event,\n                actor: this,\n                parts: parts.list,\n                title: title,\n            });\n        }\n        const attributes = Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0);\n        const attribute = 'willpower';\n\n        let dialogData = {\n            attribute: attribute,\n            attributes: attributes,\n        };\n        const buttons = {\n            roll: {\n                label: 'Continue',\n                callback: () => (cancel = false),\n            },\n        };\n\n        let cancel = true;\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/matrix-roll.html', dialogData).then((dlg) => {\n            // @ts-ignore\n            new Dialog({\n                title: `${title} Test`,\n                content: dlg,\n                buttons: buttons,\n                close: async (html) => {\n                    if (cancel) return;\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=attribute]').val());\n                    let att: AttributeField | undefined = undefined;\n                    if (newAtt) {\n                        att = this.data.data.attributes[newAtt];\n                        title += ` + ${game.i18n.localize(SR5.attributes[newAtt])}`;\n                    }\n                    if (att !== undefined) {\n                        if (att.value && att.label) parts.addPart(att.label, att.value);\n                        this._addMatrixParts(parts, true);\n                        this._addGlobalParts(parts);\n                        return ShadowrunRoller.advancedRoll({\n                            event: options?.event,\n                            actor: this,\n                            parts: parts.list,\n                            title: title,\n                        });\n                    }\n                },\n            }).render(true);\n        });\n    }\n\n    promptRoll(options?: ActorRollOptions) {\n        const rollProps = {\n            event: options?.event,\n            title: 'Roll',\n            parts: [],\n            actor: this\n        };\n        const dialogOptions = {\n            pool: true\n        }\n        return ShadowrunRoller.advancedRoll(rollProps, dialogOptions);\n    }\n\n    rollDeviceRating(options?: ActorRollOptions) {\n        const title = game.i18n.localize('SR5.Labels.ActorSheet.DeviceRating');\n        const parts = new PartsList<number>();\n        const rating = this.getDeviceRating();\n        // add device rating twice as this is the most common roll\n        parts.addPart(title, rating);\n        parts.addPart(title, rating);\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            title,\n            parts: parts.list,\n            actor: this,\n        });\n    }\n\n    rollAttributesTest(rollId, options?: ActorRollOptions) {\n        const title = game.i18n.localize(SR5.attributeRolls[rollId]);\n        const atts = this.data.data.attributes;\n        const modifiers = this.data.data.modifiers;\n        const parts = new PartsList<number>();\n        if (rollId === 'composure') {\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\n            if (modifiers.composure) parts.addUniquePart('SR5.Bonus', modifiers.composure);\n        } else if (rollId === 'judge_intentions') {\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\n            parts.addUniquePart(atts.intuition.label, atts.intuition.value);\n            if (modifiers.judge_intentions) parts.addUniquePart('SR5.Bonus', modifiers.judge_intentions);\n        } else if (rollId === 'lift_carry') {\n            parts.addUniquePart(atts.strength.label, atts.strength.value);\n            parts.addUniquePart(atts.body.label, atts.body.value);\n            if (modifiers.lift_carry) parts.addUniquePart('SR5.Bonus', modifiers.lift_carry);\n        } else if (rollId === 'memory') {\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\n            parts.addUniquePart(atts.logic.label, atts.logic.value);\n            if (modifiers.memory) parts.addUniquePart('SR5.Bonus', modifiers.memory);\n        }\n\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: `${title} Test`,\n        });\n    }\n\n    async rollSkill(skill: SkillField, options?: SkillRollOptions) {\n        // NOTE: Currently defaulting happens at multiple places, which is why SkillFlow.handleDefaulting isn't used\n        //       here, yet. A general skill usage clean up between Skill, Attribute and Item action handling is needed.\n        if (!SkillFlow.allowRoll(skill)) {\n            ui.notifications.warn(game.i18n.localize('SR5.Warnings.SkillCantBeDefault'));\n            return;\n        }\n\n        // Legacy skills have a label, but no name. Custom skills have a name but no label.\n        const label = skill.label ? game.i18n.localize(skill.label) : skill.name;\n        const title = label;\n\n        // Since options can provide an attribute, ignore incomplete sill attribute configuration.\n        const attributeName = options?.attribute ? options.attribute : skill.attribute;\n        const attribute = this.getAttribute(attributeName);\n        if (!attribute) {\n            ui.notifications.error(game.i18n.localize('SR5.Errors.SkillWithoutAttribute'));\n            return;\n        }\n        let limit = attribute.limit ? this.getLimit(attribute.limit) : undefined;\n\n        // Initialize parts with always needed skill data.\n        const parts = new PartsList<number>();\n        parts.addUniquePart(label, skill.value);\n        this._addMatrixParts(parts, [attribute, skill]);\n        this._addGlobalParts(parts);\n\n        // Directly test, without further skill dialog.\n        if (options?.event && Helpers.hasModifiers(options?.event)) {\n            parts.addUniquePart(attribute.label, attribute.value);\n            if (options.event[SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\n\n            return await ShadowrunRoller.advancedRoll({\n                event: options.event,\n                actor: this,\n                parts: parts.list,\n                limit,\n                title: `${title} ${game.i18n.localize('SR5.Test')}`,\n            });\n        }\n\n        // First ask user about skill details.\n        const skillRollDialogOptions = {\n            skill,\n            attribute: attributeName\n        }\n\n        const skillDialog = await ShadowrunActorDialogs.createSkillDialog(this, skillRollDialogOptions, parts);\n        const skillActionData = await skillDialog.select();\n\n        if (skillDialog.canceled) return;\n\n        return await ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: skillActionData.parts.list,\n            limit: skillActionData.limit,\n            title: skillActionData.title,\n        });\n    }\n\n    async rollDronePerception(options?: ActorRollOptions) {\n        if (!this.isVehicle())\n            return;\n\n        const actorData = duplicate(this.data.data) as VehicleData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            // TODO possibly look for autosoft item level?\n            const perception = this.findActiveSkill('perception');\n            const limit = this.findLimit('sensor');\n\n            if (perception && limit) {\n                parts.addPart('SR5.Vehicle.Clearsight', Helpers.calcTotal(perception));\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n\n                this._addGlobalParts(parts);\n\n                return ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDronePerception'),\n                });\n            }\n        } else {\n            await this.rollActiveSkill('perception', options);\n        }\n    }\n\n    async rollPilotVehicle(options?: ActorRollOptions) {\n        if (!this.isVehicle()) {\n            return undefined;\n        }\n        const actorData = duplicate(this.data.data) as VehicleData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            let skill: SkillField | undefined = this.getVehicleTypeSkill();\n            const environment = actorData.environment;\n            const limit = this.findLimit(environment);\n\n            if (skill && limit) {\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n                // TODO possibly look for autosoft item level?\n                parts.addPart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\n\n                this._addGlobalParts(parts);\n\n                return await ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollPilotVehicleTest'),\n                });\n            }\n        } else {\n            const skillName = this.getVehicleTypeSkillName();\n            if (!skillName) return;\n            return await this.rollActiveSkill(skillName, options);\n        }\n    }\n\n    async rollDroneInfiltration(options?: ActorRollOptions) {\n        if (!this.isVehicle()) {\n            return undefined;\n        }\n        const actorData = duplicate(this.data.data) as VehicleData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            // TODO possibly look for autosoft item level?\n            const sneaking = this.findActiveSkill('sneaking');\n            const limit = this.findLimit('sensor');\n\n            if (sneaking && limit) {\n                parts.addPart('SR5.Vehicle.Stealth', Helpers.calcTotal(sneaking));\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n\n                this._addGlobalParts(parts);\n\n                return ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDroneInfiltration'),\n                });\n            }\n        } else {\n            await this.rollActiveSkill('sneaking', options);\n        }\n    }\n\n    rollKnowledgeSkill(catId: string, skillId: string, options?: SkillRollOptions) {\n        const category = duplicate(this.data.data.skills.knowledge[catId]);\n        const skill = duplicate(category.value[skillId]) as SkillField;\n        skill.attribute = category.attribute;\n        skill.label = skill.name;\n        return this.rollSkill(skill, options);\n    }\n\n    rollLanguageSkill(skillId: string, options?: SkillRollOptions) {\n        const skill = duplicate(this.data.data.skills.language.value[skillId]) as SkillField;\n        skill.attribute = 'intuition';\n        skill.label = skill.name;\n        return this.rollSkill(skill, options);\n    }\n\n    rollActiveSkill(skillId: string, options?: SkillRollOptions) {\n        const skill = duplicate(this.data.data.skills.active[skillId]) as SkillField;\n        return this.rollSkill(skill, options);\n    }\n\n    rollAttribute(attId, options?: ActorRollOptions) {\n        let title = game.i18n.localize(SR5.attributes[attId]);\n        const attribute = duplicate(this.data.data.attributes[attId]);\n        const attributes = duplicate(this.data.data.attributes) as Attributes;\n        const parts = new PartsList<number>();\n        parts.addPart(attribute.label, attribute.value);\n        let dialogData = {\n            attribute: attribute,\n            attributes: attributes,\n        };\n        let cancel = true;\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/single-attribute.html', dialogData).then((dlg) => {\n            new Dialog({\n                title: `${title} Attribute Test`,\n                content: dlg,\n                buttons: {\n                    roll: {\n                        label: 'Continue',\n                        callback: () => (cancel = false),\n                    },\n                },\n                default: 'roll',\n                close: async (html) => {\n                    if (cancel) return;\n\n                    const attribute2Id: string = Helpers.parseInputToString($(html).find('[name=attribute2]').val());\n                    let attribute2: AttributeField | undefined = undefined;\n                    if (attribute2Id !== 'none') {\n                        attribute2 = attributes[attribute2Id];\n                        if (attribute2?.label) {\n                            parts.addPart(attribute2.label, attribute2.value);\n                            const att2IdLabel = game.i18n.localize(SR5.attributes[attribute2Id]);\n                            title += ` + ${att2IdLabel}`;\n                        }\n                    }\n                    if (attribute2Id === 'default') {\n                        parts.addUniquePart('SR5.Defaulting', -1);\n                    }\n                    this._addMatrixParts(parts, [attribute, attribute2]);\n                    this._addGlobalParts(parts);\n                    return ShadowrunRoller.advancedRoll({\n                        event: options?.event,\n                        title: `${title} Test`,\n                        actor: this,\n                        parts: parts.list,\n                    });\n                },\n            }).render(true);\n        });\n    }\n\n    _addMatrixParts(parts: PartsList<number>, atts) {\n        if (Helpers.isMatrix(atts)) {\n            if (!(\"matrix\" in this.data.data)) return;\n\n            const matrix = this.data.data.matrix;\n            if (matrix.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\n            if (matrix.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\n        }\n    }\n    _addGlobalParts(parts: PartsList<number>) {\n        if (this.data.data.modifiers.global) {\n            parts.addUniquePart('SR5.Global', this.data.data.modifiers.global);\n        }\n    }\n\n    _addDefenseParts(parts: PartsList<number>) {\n        if (this.isVehicle()) {\n            const pilot = this.findVehicleStat('pilot');\n            if (pilot) {\n                parts.addUniquePart(pilot.label, Helpers.calcTotal(pilot));\n            }\n            const skill = this.getVehicleTypeSkill();\n            if (skill) {\n                parts.addUniquePart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\n            }\n        } else {\n            const reaction = this.findAttribute('reaction');\n            const intuition = this.findAttribute('intuition');\n\n            if (reaction) {\n                parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\n            }\n            if (intuition) {\n                parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\n            }\n        }\n\n        const mod = this.getModifier('defense');\n        if (mod) {\n            parts.addUniquePart('SR5.Bonus', mod);\n        }\n    }\n\n    _addArmorParts(parts: PartsList<number>) {\n        const armor = this.getArmor();\n        if (armor) {\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\n            for (let part of armor.mod) {\n                parts.addUniquePart(part.name, part.value);\n            }\n        }\n    }\n\n    static async pushTheLimit(li) {\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\n\n        if (msg.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) {\n            let actor = (msg.user.character as unknown) as SR5Actor;\n            if (!actor) {\n                const tokens = Helpers.getControlledTokens();\n                if (tokens.length > 0) {\n                    for (let token of tokens) {\n                        // @ts-ignore // TODO: foundry-vtt-types not yet on 0.8\n                        if (token.actor.isOwner) {\n                            actor = token.actor as SR5Actor;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (actor) {\n                const parts = new PartsList<number>();\n                parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\n                ShadowrunRoller.basicRoll({\n                    title: ` - ${game.i18n.localize('SR5.PushTheLimit')}`,\n                    parts: parts.list,\n                    actor: actor,\n                }).then(() => {\n                    // @ts-ignore\n                    actor.update({\n                        'data.attributes.edge.uses': actor.getEdge().uses - 1,\n                    });\n                });\n            } else {\n                // @ts-ignore\n                ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\n            }\n        }\n    }\n\n    static async secondChance(li) {\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\n        // @ts-ignore\n        let roll: Roll = JSON.parse(msg.data?.roll);\n        let formula = roll.formula;\n        let hits = roll.total;\n        let re = /(\\d+)d6/;\n        let matches = formula.match(re);\n        if (matches && matches[1]) {\n            let match = matches[1];\n            let pool = parseInt(match.replace('d6', ''));\n            if (!isNaN(pool) && !isNaN(hits)) {\n                let actor = (msg.user.character as unknown) as SR5Actor;\n                if (!actor) {\n                    const tokens = Helpers.getControlledTokens();\n                    if (tokens.length > 0) {\n                        for (let token of tokens) {\n                            // @ts-ignore // TODO: foundry-vtt-types not yet on 0.8\n                            if (token.actor.isOwner) {\n                                actor = token.actor as SR5Actor;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (actor) {\n                    const parts = new PartsList<number>();\n                    parts.addUniquePart('SR5.OriginalDicePool', pool);\n                    parts.addUniquePart('SR5.Successes', -hits);\n\n                    return ShadowrunRoller.basicRoll({\n                        title: ` - Second Chance`,\n                        parts: parts.list,\n                        actor: actor,\n                    }).then(() => {\n                        actor.useEdge();\n                    });\n                } else {\n                    // @ts-ignore\n                    ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\n                }\n            }\n        }\n    }\n\n    /**\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\n     * @param scope\n     * @param key\n     * @param value\n     */\n    setFlag(scope: string, key: string, value: any): Promise<any> {\n        const newValue = Helpers.onSetFlag(value);\n        return super.setFlag(scope, key, newValue);\n    }\n\n    /**\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\n     * @param scope\n     * @param key\n     */\n    getFlag(scope: string, key: string): any {\n        const data = super.getFlag(scope, key);\n        return Helpers.onGetFlag(data);\n    }\n\n    /** Return either the linked token or the token of the synthetic actor.\n     *\n     * TODO: Correctly type this method to return TokenDocument\n     * @retrun Will return null should no token have been placed on scene.\n     */\n    getToken(): Token {\n        // Linked actors can only have one token, which isn't stored within actor data...\n        if (this._isLinkedToToken() && this.hasToken()) {\n            const linked = true;\n            const tokens = this.getActiveTokens(linked);\n            // This assumes for a token to exist and should fail if not.\n            // @ts-ignore // foundry-vtt-types 0.8 support\n            return tokens[0].document;\n        }\n\n        // Unlinked actors can have multiple active token but each have theirs directly attached...\n        return this.token;\n    }\n\n    /**\n     * There is no need for a token to placed. The prototype token is enough.\n     */\n    _isLinkedToToken(): boolean {\n        //@ts-ignore\n        // If an actor is linked, all it's copies also contain this linked status, even if they're not.\n        return this.data.token.actorLink && !this.token;\n    }\n\n    hasToken(): boolean {\n        return this.getActiveTokens().length > 0;\n    }\n\n    hasActivePlayerOwner(): boolean {\n        const players = this.getActivePlayerOwners();\n        return players.length > 0;\n    }\n\n    getActivePlayer(): User|null {\n        //@ts-ignore\n        if (!this.hasPlayerOwner) {\n            return null;\n        }\n\n        // @ts-ignore // TODO: foundry-vtt-types Does not support DocumentCollection yet.\n        for (const user of game.users.contents) {\n            if (!user.active || user.isGM) {\n                continue;\n            }\n            if (this.id === user.character.id) {\n                return user;\n            }\n        }\n\n        return null;\n    }\n\n    getActivePlayerOwners(): User[] {\n        return Helpers.getPlayersWithPermission(this, 'OWNER', true);\n    }\n\n    __addDamageToTrackValue(damage: DamageData, track: TrackType|OverflowTrackType|ConditionData): TrackType|OverflowTrackType|ConditionData {\n        if (damage.value === 0) return track;\n        if (track.value === track.max) return track;\n\n        //  Avoid cross referencing.\n        // @ts-ignore\n        track = duplicate(track);\n\n        track.value += damage.value;\n        if (track.value > track.max) {\n            // dev error, not really meant to be ever seen by users. Therefore no localization.\n            console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\n            track.value = track.max;\n        }\n\n        return track;\n    }\n\n    async _addDamageToDeviceTrack(damage: DamageData, device: SR5Item) {\n        if (!device) return;\n\n        let condition = device.getCondition();\n        if (!condition) return damage;\n\n        if (damage.value === 0) return;\n        if (condition.value === condition.max) return;\n\n        condition = this.__addDamageToTrackValue(damage, condition);\n\n        const data = {['data.technology.condition_monitor']: condition};\n        await device.update(data);\n    }\n\n    async _addDamageToTrack(damage: DamageData, track: TrackType|OverflowTrackType|ConditionData) {\n        if (damage.value === 0) return;\n        if (track.value === track.max) return;\n\n        track = this.__addDamageToTrackValue(damage, track);\n        // //  Avoid cross referencing.\n        // track = duplicate(track);\n        //\n        // track.value += damage.value;\n        // if (track.value > track.max) {\n        //     // dev error, not really meant to be ever seen by users. Therefore no localization.\n        //     console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\n        //     track.value = track.max;\n        // }\n\n        const data = {[`data.track.${damage.type.value}`]: track};\n        await this.update(data);\n    }\n\n    async _addDamageToOverflow(damage: DamageData, track: OverflowTrackType) {\n        if (damage.value === 0) return;\n        if (track.overflow.value === track.overflow.max) return;\n\n        //  Avoid cross referencing.\n        const overflow = duplicate(track.overflow);\n\n        // Don't over apply damage to the track overflow.\n        overflow.value += damage.value;\n        overflow.value = Math.min(overflow.value, overflow.max);\n\n        const data = {[`data.track.${damage.type.value}.overflow`]: overflow};\n        await this.update(data);\n    }\n\n    /** Apply damage to the stun track and get overflow damage for the physical track.\n     */\n    async addStunDamage(damage: DamageData): Promise<DamageData> {\n        if (damage.type.value !== 'stun') return damage;\n\n        const track = this.getStunTrack();\n        if (!track)\n            return damage;\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        // Only change damage type when needed, in order to avoid confusion of callers.\n        if (overflow.value > 0) {\n            // Apply Stun overflow damage to physical track according to: SR5E#170\n            overflow.value = Math.floor(overflow.value / 2);\n            overflow.type.value = 'physical';\n        }\n\n        await this._addDamageToTrack(rest, track);\n        return overflow;\n    }\n\n    async addPhysicalDamage(damage: DamageData) {\n        if (damage.type.value !== 'physical') return damage;\n\n        const track = this.getPhysicalTrack();\n        if (!track)\n            return damage;\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        await this._addDamageToTrack(rest, track);\n        await this._addDamageToOverflow(overflow, track);\n    }\n\n    /** Adding damage to a device track instead of an actors track, as they contain their own track within their data.\n     */\n    async addMatrixDamage(damage: DamageData): Promise<DamageData> {\n        if (damage.type.value !== 'matrix') return damage;\n\n        const device = this.getMatrixDevice();\n        if (!device) return damage;\n\n        const track = this.getMatrixTrack();\n        // Actor might not have a commlink/cyberdeck equipped.\n        if (!track) return damage;\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        await this._addDamageToDeviceTrack(rest, device);\n\n        // Return overflow for consistency, yet nothing will take overflowing matrix damage.\n        return overflow;\n    }\n\n    /** Calculate damage overflow only based on max and current track values.\n     */\n    _calcDamageOverflow(damage: DamageData, track: TrackType|ConditionData): {overflow: DamageData, rest: DamageData} {\n        const freeTrackDamage = track.max - track.value;\n        const overflowDamage = damage.value > freeTrackDamage ?\n            damage.value - freeTrackDamage :\n            0;\n        const restDamage = damage.value - overflowDamage;\n\n        //  Avoid cross referencing.\n        const overflow = duplicate(damage);\n        const rest = duplicate(damage);\n\n        overflow.value = overflowDamage;\n        rest.value = restDamage;\n\n        // @ts-ignore\n        return {overflow, rest};\n    }\n\n    getStunTrack(): TrackType | undefined {\n        if (\"track\" in this.data.data && \"stun\" in this.data.data.track)\n            return this.data.data.track.stun;\n    }\n\n    getPhysicalTrack(): OverflowTrackType | undefined {\n        if (\"track\" in this.data.data)\n            return this.data.data.track.physical;\n    }\n\n    getMatrixTrack(): ConditionData|undefined {\n        const device = this.getMatrixDevice();\n        if (!device) return undefined;\n\n        return device.getCondition();\n    }\n\n    getModifiedArmor(damage: DamageData): ActorArmorData {\n        if (!damage.ap?.value) {\n            return this.getArmor();\n       }\n\n        const modified = duplicate(this.getArmor());\n        if (modified) {\n            // @ts-ignore\n            modified.mod = PartsList.AddUniquePart(modified.mod, 'SR5.DV', damage.ap.value);\n            // @ts-ignore\n            modified.value = Helpers.calcTotal(modified, {min: 0});\n        }\n\n        // @ts-ignore\n        return modified;\n    }\n\n    /** Reduce the initiative of the actor in the currently open / selected combat.\n     * Should a tokens actor be in multiple combats it will also only affect the currently open combat,\n     * since that is what's set in game.combat\n     *\n     * TODO: There is an issue with linked actors that have multiple tokens placed, with each in different combats.\n     *       The defense test needs to be done using the correct token, not just by the actor (from the sidebar).\n     *       One could argue this to be correct behavior, just confusing with normal linked actor / token usage.\n     */\n    async changeCombatInitiative(modifier: number) {\n        // No change needed for nothing to change.\n        if (modifier === 0) return;\n\n        const combat: SR5Combat = game.combat as SR5Combat;\n        const combatant = combat.getActorCombatant(this);\n\n        // Token might not be part of active combat.\n        if (!combatant) return;\n\n        await combat.adjustInitiative(combatant, modifier);\n    }\n\n    hasDamageTracks(): boolean {\n        return \"track\" in this.data.data;\n    }\n\n    asVehicleData(): VehicleActorData | undefined {\n        if (this.isVehicle())\n            return this.data as VehicleActorData;\n    }\n\n    asCharacterData(): CharacterActorData | undefined {\n        if (this.isCharacter())\n            return this.data as CharacterActorData;\n    }\n\n    asSpiritData(): SpiritActorData | undefined {\n        if (this.isSpirit()) {\n            return this.data as SpiritActorData;\n        }\n    }\n\n    asSpriteData(): SpriteActorData | undefined {\n        if (this.isSprite()) {\n            return this.data as SpriteActorData;\n        }\n    }\n\n    asCritterData(): CritterActorData | undefined {\n        if (this.isCritter()){\n            return this.data as CritterActorData;\n        }\n    }\n\n    getVehicleStats(): VehicleStats | undefined {\n        if (this.isVehicle() && \"vehicle_stats\" in this.data.data) {\n            return this.data.data.vehicle_stats;\n        }\n    }\n\n    /** Add another actor as the driver of a vehicle to allow for their values to be used in testing.\n     *\n     * @param id An actors id. Should be a character able to drive a vehicle\n     */\n    async addVehicleDriver(id: string) {\n        if (!this.isVehicle()) return;\n\n        const driver = game.actors.get(id) as SR5Actor;\n        if (!driver) return;\n\n        // NOTE: In THEORY almost all actor types can drive a vehicle.\n        // ... drek, in theory a drone could drive another vehicle even...\n\n        await this.update({'data.driver': driver.id});\n    }\n\n    async removeVehicleDriver() {\n        if (!this.hasDriver()) return;\n\n        await this.update({'data.driver': ''});\n    }\n\n    hasDriver(): boolean {\n        const data = this.asVehicleData();\n\n        if (!data) return false;\n        return data.data.driver.length > 0;\n    }\n\n    getVehicleDriver(): SR5Actor|undefined {\n        if (!this.hasDriver()) return;\n        const data = this.asVehicleData();\n        if (!data) return;\n\n        const driver = game.actors.get(data.data.driver) as SR5Actor;\n        // If no driver id is set, we won't get an actor and should explicitly return undefined.\n        if (!driver) return;\n        return driver;\n    }\n\n    /** Check if this actor is of one or multiple given actor types\n     *\n     * @param types A list of actor types to check.\n     */\n    matchesActorTypes(types: string[]): boolean {\n        return types.includes(this.data.type);\n    }\n\n    /** TODO: method documentation\n     *\n     * @param ignoreScene Set to true to ignore modifiers set on active or given scene.\n     * @param scene Should a scene be used as a fallback, provide this here. Otherwise current scene will be used.\n     */\n    // @ts-ignore\n    async getModifiers(ignoreScene: boolean=false, scene: Scene=canvas.scene): Promise<Modifiers> {\n        const onActor = await Modifiers.getModifiersFromEntity(this);\n\n        if (onActor.hasActiveEnvironmental) {\n            return onActor;\n        // No open scene, or scene ignored.\n        } else if (ignoreScene || scene === null) {\n            return new Modifiers(Modifiers.getDefaultModifiers());\n        } else {\n            return await Modifiers.getModifiersFromEntity(scene);\n        }\n    }\n\n    async setModifiers(modifiers: Modifiers) {\n        await Modifiers.setModifiersOnEntity(this, modifiers.modifiers);\n    }\n}\n","import {Helpers} from '../helpers';\nimport {ChummerImportForm} from '../apps/chummer-import-form';\nimport {SkillEditSheet} from '../apps/skills/SkillEditSheet';\nimport {KnowledgeSkillEditSheet} from '../apps/skills/KnowledgeSkillEditSheet';\nimport {LanguageSkillEditSheet} from '../apps/skills/LanguageSkillEditSheet';\nimport {SR5Actor} from './SR5Actor';\nimport {SR5} from '../config';\nimport {SR5Item} from \"../item/SR5Item\";\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\nimport Skills = Shadowrun.Skills;\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\nimport SkillField = Shadowrun.SkillField;\nimport DeviceData = Shadowrun.DeviceData;\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\nimport Attributes = Shadowrun.Attributes;\n\n// Use SR5ActorSheet._showSkillEditForm to only ever render one SkillEditSheet instance.\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\n// when opened in succession, causing SkillEditSheet to wrongfully overwrite the wrong data.\nlet globalSkillAppId: number = -1;\n\n/**\n * Extend the basic ActorSheet with some very simple modifications\n *\n */\nexport class SR5ActorSheet extends ActorSheet<SR5ActorSheetData, SR5Actor> {\n    _shownDesc: string[];\n    _filters: SR5SheetFilters;\n    _scroll: string;\n\n    constructor(actor, options?) {\n        super(actor, options);\n\n        /**\n         * Keep track of the currently active sheet tab\n         * @type {string}\n         */\n        this._shownDesc = [];\n        this._filters = {\n            skills: '',\n            showUntrainedSkills: true,\n        };\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Extend and override the default options used by the 5e Actor Sheet\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n        // @ts-ignore\n        return mergeObject(super.defaultOptions, {\n            classes: ['sr5', 'sheet', 'actor'],\n            width: 880,\n            height: 690,\n            tabs: [\n                {\n                    navSelector: '.tabs',\n                    contentSelector: '.sheetbody',\n                    initial: 'skills',\n                },\n            ],\n        });\n    }\n\n    get template() {\n        const path = 'systems/shadowrun5e/dist/templates';\n\n        if (this.actor.limited) {\n            return `${path}/actor-limited/${this.actor.data.type}.html`;\n        }\n\n        return `${path}/actor/${this.actor.data.type}.html`;\n    }\n\n    /**\n     * Prepare data for rendering the Actor sheet\n     * The prepared data object contains both the actor data as well as additional sheet options\n     */\n    getData() {\n        // Restructure redesigned Document.getData to contain all new fields, while keeping data.data as system data.\n        let data = super.getData() as unknown as SR5ActorSheetData;\n        data = {\n            ...data,\n            // @ts-ignore\n            data: data.data.data\n        }\n\n        // General purpose fields...\n        data.config = SR5;\n        data.filters = this._filters;\n\n        this._prepareMatrixAttributes(data);\n        this._prepareActorAttributes(data);\n\n        this._prepareItems(data);\n        this._prepareSkillsWithFilters(data);\n        this._prepareActorTypeFields(data);\n        this._prepareCharacterFields(data);\n        this._prepareVehicleFields(data);\n\n        return data;\n    }\n\n    _isSkillMagic(id, skill) {\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\n    }\n\n    _isSkillResonance(skill) {\n        return skill.attribute === 'resonance';\n    }\n\n    _getSkillLabelOrName(skill) {\n        return Helpers.getSkillLabelOrName(skill);\n    }\n\n    _doesSkillContainText(key, skill, text) {\n        if (!text) {\n            return true;\n        }\n\n        // Search both english keys, localized labels and all specializations.\n        const name = this._getSkillLabelOrName(skill);\n        const searchKey = skill.name === undefined ? key : '';\n        // some \"specs\" were a string from old code I think\n        const specs = skill.specs !== undefined && Array.isArray(skill.specs) ? skill.specs.join(' ') : '';\n        let searchString = `${searchKey} ${name} ${specs}`;\n\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\n    }\n\n    _prepareCharacterFields(data: SR5ActorSheetData) {\n        // Empty zero value modifiers for display purposes.\n        const { modifiers: mods } = data.data;\n        for (let [key, value] of Object.entries(mods)) {\n            if (value === 0) mods[key] = '';\n        }\n\n        data.awakened = data.data.special === 'magic';\n        data.emerged = data.data.special === 'resonance';\n        data.woundTolerance = 3 + (Number(mods['wound_tolerance']) || 0);\n    }\n\n    _prepareVehicleFields(data: SR5ActorSheetData) {\n        if (!this.actor.isVehicle()) return;\n\n        const driver = this.actor.getVehicleDriver();\n\n        data.vehicle = {\n            driver\n        };\n    }\n\n    _prepareActorTypeFields(data: SR5ActorSheetData) {\n        data.isCharacter = this.actor.isCharacter();\n        data.isSpirit = this.actor.isSpirit();\n        data.isCritter = this.actor.isCritter();\n    }\n\n    _prepareMatrixAttributes(data) {\n        const { matrix } = data.data;\n        if (matrix) {\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\n                const att = matrix[attribute];\n                if (att) {\n                    if (!att.mod) att.mod = {};\n                    if (att.temp === 0) delete att.temp;\n                }\n            };\n\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\n        }\n    }\n\n    _prepareActorAttributes(data: SR5ActorSheetData) {\n        // Clear visible, zero value attributes temporary modifiers so they appear blank.\n        const attributes = data.data.attributes as Attributes;\n        for (let [, attribute] of Object.entries(attributes)) {\n            if (!attribute.hidden) {\n                if (attribute.temp === 0) delete attribute.temp;\n            }\n        }\n    }\n\n    _prepareSkillsWithFilters(data: SR5ActorSheetData) {\n        this._filterActiveSkills(data);\n        this._filterKnowledgeSkills(data);\n        this._filterLanguageSkills(data);\n    }\n\n    _filterActiveSkills(data: SR5ActorSheetData) {\n        // Handle active skills directly, as it doesn't use sub-categories.\n        data.data.skills.active = this._filterSkills(data, data.data.skills.active);\n    }\n\n    _filterKnowledgeSkills(data: SR5ActorSheetData) {\n        // Knowledge skill have separate sub-categories.\n        Object.keys(SR5.knowledgeSkillCategories).forEach((category) => {\n            if (!data.data.skills.knowledge.hasOwnProperty(category)) {\n                console.warn(`Knowledge Skill doesn't provide configured category ${category}`);\n                return;\n            }\n            data.data.skills.knowledge[category].value = this._filterSkills(data, data.data.skills.knowledge[category].value);\n        });\n    }\n\n    _filterLanguageSkills(data: SR5ActorSheetData) {\n        // Language Skills have no sub-categories.\n        data.data.skills.language.value = this._filterSkills(data, data.data.skills.language.value);\n    }\n\n    _filterSkills(data: SR5ActorSheetData, skills: Skills) {\n        const filteredSkills = {};\n        for (let [key, skill] of Object.entries(skills)) {\n            // Don't show hidden skills.\n            if (skill.hidden) {\n                continue;\n            }\n            // Filter visible skills.\n            if (this._showSkill(key, skill, data)) {\n                filteredSkills[key] = skill;\n            }\n        }\n\n        return Helpers.sortSkills(filteredSkills);\n    }\n\n    _showSkill(key, skill, data) {\n        if (this._showMagicSkills(key, skill, data)) {\n            return true;\n        }\n        if (this._showResonanceSkills(key, skill, data)) {\n            return true;\n        }\n\n        return this._showGeneralSkill(key, skill);\n    }\n\n    _isSkillFiltered(skillId, skill) {\n        // a newly created skill shouldn't be filtered, no matter what.\n        // Therefore disqualify empty skill labels/names from filtering and always show them.\n        const isFilterable = this._getSkillLabelOrName(skill).length > 0;\n        const isHiddenForText = !this._doesSkillContainText(skillId, skill, this._filters.skills);\n        const isHiddenForUntrained = !this._filters.showUntrainedSkills && skill.value === 0;\n\n        return !(isFilterable && (isHiddenForUntrained || isHiddenForText));\n    }\n\n    _showGeneralSkill(skillId, skill: SkillField) {\n        return !this._isSkillMagic(skillId, skill) && !this._isSkillResonance(skill) && this._isSkillFiltered(skillId, skill);\n    }\n\n    _showMagicSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\n        return this._isSkillMagic(skillId, skill) && data.data.special === 'magic' && this._isSkillFiltered(skillId, skill);\n    }\n\n    _showResonanceSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\n        return this._isSkillResonance(skill) && data.data.special === 'resonance' && this._isSkillFiltered(skillId, skill);\n    }\n\n    _prepareItems(data) {\n        const inventory = {};\n\n        // All acting entities should be allowed to carry some protection!\n        inventory['weapon'] = {\n            label: game.i18n.localize('SR5.ItemTypes.Weapon'),\n            items: [],\n            dataset: {\n                type: 'weapon',\n            },\n        };\n\n        // Critters are people to... Support your local HMHVV support groups!\n        if (this.actor.matchesActorTypes(['character', 'critter', 'vehicle'])) {\n            inventory['armor'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Armor'),\n                items: [],\n                dataset: {\n                    type: 'armor',\n                },\n            };\n            inventory['device'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Device'),\n                items: [],\n                dataset: {\n                    type: 'device',\n                },\n            };\n            inventory['equipment'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Equipment'),\n                items: [],\n                dataset: {\n                    type: 'equipment',\n                },\n            };\n            inventory['ammo'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Ammo'),\n                items: [],\n                dataset: {\n                    type: 'ammo',\n                },\n            };\n            inventory['cyberware'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Cyberware'),\n                items: [],\n                dataset: {\n                    type: 'cyberware',\n                },\n            };\n            inventory['bioware'] = {\n                label: game.i18n.localize('SR5.ItemTypes.Bioware'),\n                items: [],\n                dataset: {\n                    type: 'bioware',\n                },\n            };\n        }\n\n        let [\n            items,\n            spells,\n            qualities,\n            adept_powers,\n            actions,\n            complex_forms,\n            lifestyles,\n            contacts,\n            sins,\n            programs,\n            critter_powers,\n            sprite_powers,\n        ] = data.items.reduce(\n            (arr, item) => {\n                // Duplicate to avoid later updates propagating changed item data.\n                // NOTE: If no duplication is done, added fields will be stored in the database on updates!\n                item = duplicate(item);\n                // Show item properties and description in the item list overviews.\n                const actorItem = this.actor.items.get(item._id);\n                const chatData = actorItem.getChatData();\n                item.description = chatData.description;\n                // @ts-ignore // This is a hacky monkey patch solution to pass template data through duplicated item data.\n                item.properties = chatData.properties;\n\n                // TODO: isStack property isn't used elsewhere. Remove if unnecessary.\n                item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\n                if (item.type === 'spell') arr[1].push(item);\n                else if (item.type === 'quality') arr[2].push(item);\n                else if (item.type === 'adept_power') arr[3].push(item);\n                else if (item.type === 'action') arr[4].push(item);\n                else if (item.type === 'complex_form') arr[5].push(item);\n                else if (item.type === 'lifestyle') arr[6].push(item);\n                else if (item.type === 'contact') arr[7].push(item);\n                else if (item.type === 'sin') arr[8].push(item);\n                else if (item.type === 'program') arr[9].push(item);\n                else if (item.type === 'critter_power') arr[10].push(item);\n                else if (item.type === 'sprite_power') arr[11].push(item);\n                else if (Object.keys(inventory).includes(item.type)) arr[0].push(item);\n                return arr;\n            },\n            [[], [], [], [], [], [], [], [], [], [], [], []],\n        );\n\n        const sortByName = (i1, i2) => {\n            if (i1.name > i2.name) return 1;\n            if (i1.name < i2.name) return -1;\n            return 0;\n        };\n        const sortByEquipped = (left, right) => {\n            const leftEquipped = left.data?.technology?.equipped;\n            const rightEquipped = right.data?.technology?.equipped;\n            if (leftEquipped && !rightEquipped) return -1;\n            if (rightEquipped && !leftEquipped) return 1;\n            if (left.name > right.name) return 1;\n            if (left.name < right.name) return -1;\n            return 0;\n        };\n        actions.sort(sortByName);\n        adept_powers.sort(sortByName);\n        complex_forms.sort(sortByName);\n        items.sort(sortByEquipped);\n        spells.sort(sortByName);\n        contacts.sort(sortByName);\n        lifestyles.sort(sortByName);\n        sins.sort(sortByName);\n        programs.sort(sortByEquipped);\n        critter_powers.sort(sortByName);\n        sprite_powers.sort(sortByName);\n\n        items.forEach((item) => {\n            inventory[item.type].items.push(item);\n        });\n\n        data.inventory = Object.values(inventory);\n        data.magic = {\n            spellbook: spells,\n            powers: adept_powers,\n        };\n        data.actions = actions;\n        data.complex_forms = complex_forms;\n        data.lifestyles = lifestyles;\n        data.contacts = contacts;\n        data.sins = sins;\n        data.programs = programs;\n        data.critter_powers = critter_powers;\n        data.sprite_powers = sprite_powers;\n\n        qualities.sort((a, b) => {\n            if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\n            if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\n            return a.name < b.name ? -1 : 1;\n        });\n        data.qualities = qualities;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Activate event listeners using the prepared sheet HTML\n     * @param html The prepared HTML object ready to be rendered into the DOM\n     */\n    activateListeners(html) {\n        super.activateListeners(html);\n\n        html.find('.hidden').hide();\n\n        html.find('.has-desc').click((event) => {\n            event.preventDefault();\n            const item = $(event.currentTarget).parents('.list-item');\n            const iid = $(item).data().item;\n            const field = item.next();\n            field.toggle();\n            if (iid) {\n                if (field.is(':visible')) this._shownDesc.push(iid);\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n            }\n        });\n\n        html.find('.skill-header').find('.item-name').click(this._onFilterUntrainedSkills.bind(this));\n        html.find('.skill-header').find('.skill-spec-item').click(this._onFilterUntrainedSkills.bind(this));\n        html.find('.skill-header').find('.rtg').click(this._onFilterUntrainedSkills.bind(this));\n\n        html.find('.cell-input-roll').click(this._onRollCellInput.bind(this));\n        html.find('.attribute-roll').click(this._onRollAttribute.bind(this));\n        html.find('.skill-roll').click(this._onRollActiveSkill.bind(this));\n\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\n\n        html.find('.skill-edit').click(this._onShowEditSkill.bind(this));\n        html.find('.knowledge-skill-edit').click(this._onShowEditKnowledgeSkill.bind(this));\n        html.find('.language-skill-edit').click(this._onShowEditLanguageSkill.bind(this));\n        html.find('.add-knowledge').click(this._onAddKnowledgeSkill.bind(this));\n        html.find('.add-language').click(this._onAddLanguageSkill.bind(this));\n        html.find('.add-active').click(this._onAddActiveSkill.bind(this));\n        html.find('.remove-knowledge').click(this._onRemoveKnowledgeSkill.bind(this));\n        html.find('.remove-language').click(this._onRemoveLanguageSkill.bind(this));\n        html.find('.remove-active').click(this._onRemoveActiveSkill.bind(this));\n        html.find('.knowledge-skill').click(this._onRollKnowledgeSkill.bind(this));\n        html.find('.language-skill').click(this._onRollLanguageSkill.bind(this));\n\n        html.find('.item-roll').click(this._onRollItem.bind(this));\n        html.find('.item-equip-toggle').click(this._onEquipItem.bind(this));\n        html.find('.item-qty').change(this._onChangeQty.bind(this));\n        html.find('.item-rtg').change(this._onChangeRtg.bind(this));\n        html.find('.item-create').click(this._onItemCreate.bind(this));\n        html.find('.reload-ammo').click(this._onReloadAmmo.bind(this));\n        html.find('.matrix-att-selector').change(this._onMatrixAttributeSelected.bind(this));\n\n        html.find('.import-character').click(this._onShowImportCharacter.bind(this));\n        html.find('.show-hidden-skills').click(this._onShowHiddenSkills.bind(this));\n\n        /**\n         * Open the PDF for an item on the actor\n         */\n        $(html)\n            .find('.open-source-pdf')\n            .on('click', async (event) => {\n                event.preventDefault();\n                const field = $(event.currentTarget).parents('.list-item');\n                const iid = $(field).data().itemId;\n                const item = this.actor.items.get(iid);\n                if (item) {\n                    await item.openPdfSource();\n                }\n            });\n\n        $(html).find('.horizontal-cell-input .cell').on('click', this._onSetCellInput.bind(this));\n        $(html).find('.horizontal-cell-input .cell').on('contextmenu', this._onClearCellInput.bind(this));\n\n        /**\n         * New API to use for rolling from the actor sheet\n         * the clickable label needs the css class Roll\n         * a parent of the label needs to have the css class RollId, and then have data-roll-id set\n         */\n        $(html).find('.Roll').on('click', this._onRollFromSheet.bind(this));\n\n        // updates matrix condition monitor on the device the actor has equippe\n        $(html)\n            .find('[name=\"data.matrix.condition_monitor.value\"]')\n            .on('change', async (event: any) => {\n                event.preventDefault();\n                const value = Helpers.parseInputToNumber(event.currentTarget.value);\n                const matrixDevice = this.actor.getMatrixDevice();\n                if (matrixDevice && !isNaN(value)) {\n                    const updateData = {};\n                    updateData['data.technology.condition_monitor.value'] = value;\n                    await matrixDevice.update(updateData);\n                }\n            });\n\n        // Update Inventory Item\n        html.find('.item-edit').click((event) => {\n            event.preventDefault();\n            const iid = Helpers.listItemId(event);\n            const item = this.actor.items.get(iid);\n            if (!item) return;\n            // @ts-ignore\n            item.sheet.render(true);\n        });\n        // Delete Inventory Item\n        html.find('.item-delete').click(event => this.deleteOwnedItem(event));\n\n        // Augment ListItem.html templates with drag support\n       this._addDragSupportToListItemTemplatePartial(html);\n\n        html.find('.driver-remove').click(this.handleRemoveVehicleDriver.bind(this));\n    }\n\n    /**\n     * @override Default drag start handler to add Skill support\n     * @param event\n     */\n    async _onDragStart(event) {\n        if (!canvas.ready) return;\n\n        // Create drag data\n        const dragData = {\n            actorId: this.actor.id,\n            sceneId: this.actor.isToken ? canvas.scene?.id : null,\n            tokenId: this.actor.isToken ? this.actor.token.id : null,\n            type: null,\n            data: null\n        };\n\n        // Handle different item type data transfers.\n        // These handlers depend on behavior of the template partial ListItem.html.\n        const element = event.currentTarget;\n        switch (element.dataset.itemType) {\n            // Skill data transfer. (Active and language skills)\n            case 'skill':\n                // Prepare data transfer\n                dragData.type = 'Skill';\n                dragData.data = {\n                    skillId: element.dataset.itemId,\n                    skill: this.actor.getSkill(element.dataset.itemId)\n                };\n\n                // Set data transfer\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n\n                return;\n\n            // Knowlege skill data transfer\n            case 'knowledgeskill':\n                // Knowledge skills have a multi purpose id built: <id>.<knowledge_category>\n                const skillId = element.dataset.itemId.includes('.') ? element.dataset.itemId.split('.')[0] : element.dataset.itemId;\n\n                dragData.type = 'Skill';\n                dragData.data = {\n                    skillId,\n                    skill: this.actor.getSkill(skillId)\n                };\n\n                // Set data transfer\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n\n                return;\n\n            // All default Foundry data transfer.\n            default:\n                // Let default Foundry handler deal with default drag cases.\n                return super._onDragStart(event);\n        }\n    }\n\n    /** Handle all document drops onto all actor sheet types.\n     *\n     * @param event\n     */\n    // @ts-ignore\n    async _onDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.dataTransfer) return;\n\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        // Handle specific system drop events.\n        switch (dropData.type) {\n            case \"Actor\":\n                await this.actor.addVehicleDriver(dropData.id)\n                break;\n        }\n\n        // Handle none specific drop events.\n        await super._onDrop(event);\n    }\n\n    /**\n     * Augment each item of the ListItem template partial with drag support.\n     * @param html\n     */\n    _addDragSupportToListItemTemplatePartial(html) {\n         html.find('.list-item').each((i, item) => {\n            if (item.dataset && item.dataset.itemId) {\n                item.setAttribute('draggable', true);\n                item.addEventListener('dragstart', this._onDragStart.bind(this), false);\n            }\n        });\n    }\n\n    async deleteOwnedItem(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        await item.delete();\n    }\n\n    async _onRollFromSheet(event) {\n        event.preventDefault();\n        // look for roll id data in the current line\n        let rollId = $(event.currentTarget).data()?.rollId;\n        // if that doesn't exist, look for a prent with RollId name\n        rollId = rollId ?? $(event.currentTarget).parent('.RollId').data().rollId;\n\n        const split = rollId.split('.');\n        const options = { event };\n        switch (split[0]) {\n            case 'prompt-roll':\n                await this.actor.promptRoll(options);\n                break;\n            case 'armor':\n                await this.actor.rollArmor(options);\n                break;\n            case 'fade':\n                await this.actor.rollFade(options);\n                break;\n            case 'drain':\n                await this.actor.rollDrain(options);\n                break;\n            case 'defense':\n                await this.actor.rollAttackDefense(options);\n                break;\n            case 'damage-resist':\n                await this.actor.rollSoak(options);\n                break;\n\n            // attribute only rolls\n            case 'composure':\n                await this.actor.rollAttributesTest('composure');\n                break;\n            case 'judge-intentions':\n                await this.actor.rollAttributesTest('judge_intentions');\n                break;\n            case 'lift-carry':\n                await this.actor.rollAttributesTest('lift_carry');\n                break;\n            case 'memory':\n                await this.actor.rollAttributesTest('memory');\n                break;\n\n            case 'vehicle-stat':\n                console.log('roll vehicle stat', rollId);\n                break;\n\n            case 'drone':\n                const prop = split[1]; // we expect another for \"drone\" category\n                switch (prop) {\n                    case 'perception':\n                        await this.actor.rollDronePerception(options);\n                        break;\n                    case 'infiltration':\n                        await this.actor.rollDroneInfiltration(options);\n                        break;\n                    case 'pilot-vehicle':\n                        await this.actor.rollPilotVehicle(options);\n                        break;\n                }\n                break;\n            // end drone\n\n            case 'attribute':\n                const attribute = split[1];\n                if (attribute) {\n                    await this.actor.rollAttribute(attribute, options);\n                }\n                break;\n            // end attribute\n\n            case 'skill':\n                const skillType = split[1];\n                switch (skillType) {\n                    case 'active': {\n                        const skillId = split[2];\n                        await this.actor.rollActiveSkill(skillId, options);\n                        break;\n                    }\n                    case 'language': {\n                        const skillId = split[2];\n                        await this.actor.rollLanguageSkill(skillId, options);\n                        break;\n                    }\n                    case 'knowledge': {\n                        const category = split[2];\n                        const skillId = split[3];\n                        await this.actor.rollKnowledgeSkill(category, skillId, options);\n                        break;\n                    }\n                }\n                break;\n            // end skill\n\n            case 'matrix':\n                const subkey = split[1];\n                switch (subkey) {\n                    case 'attribute':\n                        const attr = split[2];\n                        await this.actor.rollMatrixAttribute(attr, options);\n                        break;\n                    case 'device-rating':\n                        await this.actor.rollDeviceRating(options);\n                        break;\n                }\n\n                break;\n            // end matrix\n        }\n    }\n\n    // Setup skill name filter within getData\n    async _onFilterSkills(event) {\n        this._filters.skills = event.currentTarget.value;\n        await this.render();\n    }\n\n    // Setup untrained skill filter within getData\n    async _onFilterUntrainedSkills(event) {\n        event.preventDefault();\n        this._filters.showUntrainedSkills = !this._filters.showUntrainedSkills;\n        await this.render();\n    }\n\n    async _onReloadAmmo(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) return item.reloadAmmo();\n    }\n\n    async _onMatrixAttributeSelected(event) {\n        if (!(\"matrix\" in this.actor.data.data)) return;\n\n        let iid = this.actor.data.data.matrix.device;\n        let item = this.actor.items.get(iid);\n        if (!item) {\n            console.error('could not find item');\n            return;\n        }\n        // grab matrix attribute (sleaze, attack, etc.)\n        let att = event.currentTarget.dataset.att;\n        // grab device attribute (att1, att2, ...)\n        let deviceAtt = event.currentTarget.value;\n\n        // get current matrix attribute on the device\n        const deviceData = item.data.data as DeviceData;\n        let oldVal = deviceData.atts[deviceAtt].att;\n        let data = {\n            _id: iid,\n        };\n\n        // go through atts on device, setup matrix attributes on it\n        for (let i = 1; i <= 4; i++) {\n            let tmp = `att${i}`;\n            let key = `data.atts.att${i}.att`;\n            if (tmp === deviceAtt) {\n                data[key] = att;\n            } else if (deviceData.atts[`att${i}`].att === att) {\n                data[key] = oldVal;\n            }\n        }\n        await this.actor.updateOwnedItem(data);\n    }\n\n    _onItemCreate(event) {\n        event.preventDefault();\n        const type = Helpers.listItemId(event);\n        const itemData = {\n            name: `New ${type}`,\n            type: type,\n        };\n        // @ts-ignore // TODO: foundry-vtt-types has no Document Support yet.\n        return this.actor.createEmbeddedDocuments('Item', [itemData], { renderSheet: true });\n    }\n\n    async _onAddLanguageSkill(event) {\n        event.preventDefault();\n        const skillId = await this.actor.addLanguageSkill({ name: '' });\n        if (!skillId) return;\n\n        // NOTE: Causes issues with adding knowledge skills (category undefined)\n        // await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, {event}, skillId);\n    }\n\n    async _onRemoveLanguageSkill(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const skillId = Helpers.listItemId(event);\n        await this.actor.removeLanguageSkill(skillId);\n    }\n\n    async _onAddKnowledgeSkill(event) {\n        event.preventDefault();\n        const category = Helpers.listItemId(event);\n        const skillId = await this.actor.addKnowledgeSkill(category);\n        if (!skillId) return;\n\n        // NOTE: Causes issues with adding knowledge skills (category undefined)\n        // await this._showSkillEditForm(KnowledgeSkillEditSheet, this.actor, {event}, skillId);\n    }\n\n    async _onRemoveKnowledgeSkill(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const [skillId, category] = Helpers.listItemId(event).split('.');\n        await this.actor.removeKnowledgeSkill(skillId, category);\n    }\n\n    /** Add an active skill and show the matching edit application afterwards.\n     *\n     * @param event The HTML event from which the action resulted.\n     */\n     async _onAddActiveSkill(event: Event) {\n        event.preventDefault();\n        const skillId = await this.actor.addActiveSkill();\n        if (!skillId) return;\n\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skillId);\n    }\n\n    async _onRemoveActiveSkill(event: Event) {\n         event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const skillId = Helpers.listItemId(event);\n        await this.actor.removeActiveSkill(skillId);\n    }\n\n    async _onChangeRtg(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        const rtg = parseInt(event.currentTarget.value);\n        if (item && rtg) {\n            await item.update({ 'data.technology.rating': rtg });\n        }\n    }\n\n    async _onChangeQty(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        const qty = parseInt(event.currentTarget.value);\n        if (item && qty && \"technology\" in item.data.data) {\n            item.data.data.technology.quantity = qty;\n            await item.update({ 'data.technology.quantity': qty });\n        }\n    }\n\n    async _onEquipItem(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) {\n            const newItems = [] as any[];\n            if (item.isDevice()) {\n                // Only allow one equipped device item. Unequip all other.\n                for (const item of this.actor.items.filter(actorItem => actorItem.isDevice())) {\n                    newItems.push({\n                        '_id': item.id,\n                        'data.technology.equipped': item.id === iid,\n                    });\n                }\n\n            } else {\n                // Toggle equip status.\n                newItems.push({\n                    '_id': iid,\n                    'data.technology.equipped': !item.isEquipped(),\n                });\n            }\n            // @ts-ignore // TODO: foundry-vtt-types 0.8 has no Document support yet\n            await this.actor.updateEmbeddedDocuments('Item', newItems);\n\n            this.actor.render(false);\n        }\n    }\n\n    async _onSetCellInput(event) {\n        const value = Number(event.currentTarget.dataset.value);\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n        if (cmId === 'stun' || cmId === 'physical') {\n            const property = `data.track.${cmId}.value`;\n            data[property] = value;\n        } else if (cmId === 'edge') {\n            const property = `data.attributes.edge.uses`;\n            data[property] = value;\n        } else if (cmId === 'overflow') {\n            const property = 'data.track.physical.overflow.value';\n            data[property] = value;\n        } else if (cmId === 'matrix') {\n            const matrixDevice = this.actor.getMatrixDevice();\n            if (matrixDevice && !isNaN(value)) {\n                const updateData = {};\n                updateData['data.technology.condition_monitor.value'] = value;\n                await matrixDevice.update(updateData);\n            } else {\n                data['data.matrix.condition_monitor.value'] = value;\n            }\n        }\n        await this.actor.update(data);\n    }\n\n    async _onClearCellInput(event) {\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n        if (cmId === 'stun') {\n            data[`data.track.stun.value`] = 0;\n        }\n        // Clearing the physical monitor should also clear the overflow.\n        else if (cmId === 'physical') {\n            data[`data.track.physical.value`] = 0;\n            data['data.track.physical.overflow.value'] = 0;\n\n        } else if (cmId === 'edge') {\n            data[`data.attributes.edge.uses`] = 0;\n\n        } else if (cmId === 'overflow') {\n            data['data.track.physical.overflow.value'] = 0;\n\n        } else if (cmId === 'matrix') {\n            const matrixDevice = this.actor.getMatrixDevice();\n\n            if (matrixDevice) {\n                const updateData = {};\n                updateData['data.technology.condition_monitor.value'] = 0;\n                await matrixDevice.update(updateData);\n\n            } else {\n                data['data.matrix.condition_monitor.value'] = 0;\n            }\n        }\n\n        await this.actor.update(data);\n    }\n\n    async _onRollCellInput(event) {\n        event.preventDefault();\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        if (track === 'stun' || track === 'physical') {\n            await this.actor.rollNaturalRecovery(track, event);\n        } else if (track === 'edge') {\n            await this.actor.rollAttribute('edge');\n        }\n    }\n\n    async _onRollItem(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) {\n            await item.castAction(event);\n        }\n    }\n\n    async _onRollKnowledgeSkill(event) {\n        event.preventDefault();\n        const id = Helpers.listItemId(event);\n        const [skill, category] = id.split('.');\n        return this.actor.rollKnowledgeSkill(category, skill, { event: event });\n    }\n\n    async _onRollLanguageSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        return this.actor.rollLanguageSkill(skill, { event: event });\n    }\n\n    async _onRollActiveSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        return this.actor.rollActiveSkill(skill, { event: event });\n    }\n\n    async _onRollAttribute(event) {\n        event.preventDefault();\n        const attr = event.currentTarget.closest('.attribute').dataset.attribute;\n        return this.actor.rollAttribute(attr, { event: event });\n    }\n\n    /**\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    /**\n     * Enhance Foundry state restore on rerender by more user interaction state.\n     * @override\n     */\n    async _render(...args) {\n        const focus = this._saveInputCursorPosition();\n        this._saveScrollPositions();\n\n        await super._render(...args);\n\n        this._restoreScrollPositions();\n        this._restoreInputCursorPosition(focus);\n    }\n\n    _saveInputCursorPosition(): any|null {\n        const focusList = $(this.element).find('input:focus');\n        return focusList.length ? focusList[0] : null;\n    }\n\n    /**\n     * Restore the cursor position of focused input elements on top of Foundry restoring the general focus\n     * This is needed for char by char update caused by filtering skills.\n     */\n    _restoreInputCursorPosition(focus) {\n        if (focus && focus.name) {\n            if (!this.form) return;\n\n            const element = this.form[focus.name];\n            if (element) {\n                // Set general focus for allem input types.\n                element.focus();\n\n                // Set selection range for supported input types.\n                if (['checkbox', 'radio'].includes(element.type)) return;\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\n            }\n        }\n\n    }\n\n    /**\n     * @private\n     */\n    _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n\n    async _closeOpenSkillApp() {\n        if (globalSkillAppId !== -1) {\n            if (ui.windows[globalSkillAppId]) {\n                await ui.windows[globalSkillAppId].close();\n            }\n            globalSkillAppId = -1;\n        }\n    }\n\n    /** Keep track of each SkillEditSheet instance and close before opening another.\n     *\n     * @param skillEditFormImplementation Any extending class! of SkillEditSheet\n     * @param actor\n     * @param options\n     * @param args Collect arguments of the different renderWithSkill implementations.\n     */\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR5Actor, options: object, ...args) {\n        await this._closeOpenSkillApp();\n\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\n        globalSkillAppId = skillEditForm.appId;\n        await skillEditForm.render(true);\n    }\n\n    _onShowEditKnowledgeSkill(event) {\n        event.preventDefault();\n        const [skill, category] = Helpers.listItemId(event).split('.');\n\n        this._showSkillEditForm(\n            KnowledgeSkillEditSheet,\n            this.actor,\n            {\n                event: event,\n            },\n            skill,\n            category,\n        );\n    }\n\n    async _onShowEditLanguageSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        // new LanguageSkillEditSheet(this.actor, skill, { event: event }).render(true);\n        await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, { event: event }, skill);\n    }\n\n    async _onShowEditSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        // new SkillEditSheet(this.actor, skill, { event: event }).render(true);\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skill);\n    }\n\n    _onShowImportCharacter(event) {\n        event.preventDefault();\n        const options = {\n            name: 'chummer-import',\n            title: 'Chummer Import',\n        };\n        new ChummerImportForm(this.actor, options).render(true);\n    }\n\n    async _onShowHiddenSkills(event) {\n        event.preventDefault();\n\n        await this.actor.showHiddenSkills();\n    }\n\n    async handleRemoveVehicleDriver(event) {\n        event.preventDefault();\n        await this.actor.removeVehicleDriver();\n    }\n}\n","import {DamageApplicationDialog} from \"../../apps/dialogs/DamageApplicationDialog\";\nimport {SR5Actor} from \"../SR5Actor\";\nimport DamageData = Shadowrun.DamageData;\n\nexport class DamageApplicationFlow {\n\n    /**\n     * Runs the flow to apply damage to multiple actors with user interaction\n     * This will also take care of changing the damage type if necessary\n     * @param actors The actors that are affected\n     * @param damage The damage the actors will receive\n     */\n    async runApplyDamage(actors: SR5Actor[], damage : DamageData) {\n        // Show user the affected actors and the damage values\n        const damageApplicationDialog = await new DamageApplicationDialog(actors, damage);\n        await damageApplicationDialog.select();\n\n        if (damageApplicationDialog.canceled) {\n            return;\n        }\n\n        actors.forEach((actor) => {\n            this.applyDamageToActor(actor, damage);\n        });\n    }\n\n    /** Apply all types of damage to the actor.\n     *\n     * @param damage The damage to apply. Stun damage will be turned to physical for grunts.\n     */\n    async applyDamageToActor(actor : SR5Actor, damage: DamageData) {\n        if (damage.value <= 0) {\n            return;\n        }\n\n        // We change the damage type from stun to physical for grunts (they do not have a stun track)\n        // We are not doing this earlier in the soak flow to avoid confusing the user\n        damage = this.changeStunToPhysicalForGrunts(actor, damage);\n\n        // Apply damage and resulting overflow to the according track.\n        // The amount and type damage can value in the process.\n        if (damage.type.value === 'matrix') {\n            damage = await actor.addMatrixDamage(damage);\n        }\n\n        if (damage.type.value === 'stun') {\n            damage = await actor.addStunDamage(damage);\n        }\n\n        if (damage.type.value === 'physical') {\n            await actor.addPhysicalDamage(damage);\n        }\n\n        // NOTE: For stuff like healing the last wound by magic, it might also be interesting to store and give\n        //       an overview of each damage/wound applied to select from.\n        // await this.update({'data.track': this.data.data.track});\n        // TODO: Handle changes in actor status (death and such)\n    }\n\n    private changeStunToPhysicalForGrunts(actor : SR5Actor, damage: DamageData): DamageData {\n        const updatedDamage = duplicate(damage) as DamageData;\n        if (!actor.isGrunt()) {\n            return updatedDamage;\n        }\n\n        // Grunts do not have a stun track and will always receive physical damage.\n        if (damage.type.value === 'stun') {\n            updatedDamage.type.value = 'physical';\n        }\n\n        return updatedDamage;\n    }\n}","import SkillField = Shadowrun.SkillField;\nimport {SkillRules} from \"../../rules/SkillRules\";\nimport {PartsList} from \"../../parts/PartsList\";\nimport {FLAGS, SYSTEM_NAME} from \"../../constants\";\n\nexport class SkillFlow {\n    /**\n     * Handle everything around how a skill should be defaulted\n     * @param skill\n     * @param parts\n     */\n    static handleDefaulting(skill: SkillField, parts: PartsList<number>) {\n        if (!SkillRules.mustDefaultToRoll(skill)) return;\n\n        if (!SkillFlow.allowDefaultingRoll(skill)) {\n            ui.notifications?.warn(game.i18n.localize('SR5.Warnings.SkillCantBeDefault'));\n            return;\n        }\n\n        SkillRules.addDefaultingPart(parts);\n    }\n\n    /**\n     * Check if either the system settings or skill configuration allow for a skill to be defaulted.\n     * @param skill\n     * @return true will allow a role on the skill that needs defaulting.\n     */\n    static allowDefaultingRoll(skill: SkillField): boolean {\n        // Check if settings allow rolls of skills that otherwise would need to be defaulted.\n        const allowUnimproviseable = game.settings.get(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills) === false;\n        if (allowUnimproviseable)\n            return true;\n\n        return SkillRules.allowDefaultingRoll(skill);\n    }\n\n    static allowRoll(skill: SkillField): boolean {\n        if (SkillRules.mustDefaultToRoll(skill) && SkillFlow.allowDefaultingRoll(skill)) {\n            return true;\n        }\n        return SkillRules.allowRoll(skill);\n    }\n}","import {ShadowrunRoll, ShadowrunRoller} from '../../rolls/ShadowrunRoller';\nimport {SR5Actor} from \"../SR5Actor\";\nimport {SoakRules} from \"../../rules/SoakRules\";\nimport { Helpers } from '../../helpers';\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\nimport ModList = Shadowrun.ModList;\nimport {createRollChatMessage} from \"../../chat\";\nimport DamageData = Shadowrun.DamageData;\nimport DamageElement = Shadowrun.DamageElement;\nimport DamageType = Shadowrun.DamageType;\nimport {PartsList} from \"../../parts/PartsList\";\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport { ShadowrunActorDialogs } from '../../apps/dialogs/ShadowrunActorDialogs';\nimport {SR5Item} from '../../item/SR5Item';\n\nexport class SoakFlow {\n\n    /**\n     * Runs the soak flow with user interaction\n     * @param actor The actor doing the soaking\n     * @param soakRollOptions Information about the incoming damage (if it is already known)\n     * @param partsProps Optional modifiers for the soak test\n     */\n    async runSoakTest(actor: SR5Actor, soakRollOptions: SoakRollOptions, partsProps: ModList<number> = []): Promise<ShadowrunRoll|undefined> {\n        const initialDamageData = soakRollOptions.damage ? soakRollOptions.damage : DefaultValues.damageData();\n        const previewSoakDefenseParts = new PartsList<number>(duplicate(partsProps) as ModList<number>);\n        SoakRules.applyAllSoakParts(previewSoakDefenseParts, actor, initialDamageData);\n\n        // Ask the user for the damage data / update the incoming damage data\n        const damageDataOrUndef = await this.promptDamageData(soakRollOptions, previewSoakDefenseParts);\n        if (!damageDataOrUndef) {\n            return;\n        }\n\n        const damageData = damageDataOrUndef;\n        const finalSoakDefenseParts = new PartsList<number>(duplicate(partsProps) as ModList<number>);\n        SoakRules.applyAllSoakParts(finalSoakDefenseParts, actor, damageData);\n\n        // Query user for roll options and do the actual soak test.\n        const title = game.i18n.localize('SR5.SoakTest');\n        const roll = await ShadowrunRoller.advancedRoll({\n            event: soakRollOptions?.event,\n            extended: false,\n            actor,\n            parts: finalSoakDefenseParts.list,\n            title,\n            wounds: false,\n            hideRollMessage: true\n        });\n\n        if (!roll) return;\n\n        // Modify damage and reduce damage by net hits and show result\n        const incoming = duplicate(damageData) as DamageData;\n        let modified = SoakRules.modifyDamageType(incoming, actor);\n        modified = SoakRules.reduceDamage(actor, modified, roll.hits).modified;\n        const incAndModDamage = {incoming, modified};\n\n        const options = {title, roll, actor, damage: incAndModDamage};\n        if (this.knocksDown(modified, actor)) {\n            options[\"knockedDown\"] = true;\n        }\n        await createRollChatMessage(options);\n\n        return roll;\n    }\n\n    private knocksDown(damage: DamageData, actor:SR5Actor) {\n        // TODO: SR5 195 Called Shot Knock Down (Melee Only), requires attacker STR and actually announcing that called shot.\n        const gelRoundsEffect = this.isDamageFromGelRounds(damage) ? -2 : 0;  // SR5 434\n        const impactDispersionEffect = this.isDamageFromImpactDispersion(damage) ? -2 : 0  // FA 52\n        const limit = actor.getLimit('physical');\n        const effectiveLimit = limit.value + gelRoundsEffect + impactDispersionEffect\n        // SR5 194\n        return damage.value > effectiveLimit || damage.value >= 10;\n    }\n\n    private isDamageFromGelRounds(damage: DamageData) {\n        if (damage.source && damage.source.actorId && damage.source.itemId) {\n            const attacker = game.actors.find(actor => actor.id == damage.source?.actorId);\n            if (attacker) {\n                const item = attacker.items.find(item => item.id == damage.source?.itemId) as SR5Item;\n                if (item) {\n                    return item.items\n                        .filter(mod => mod.getTechnology()?.equipped)\n                        .filter(tech => tech.name == game.i18n.localize(\"SR5.AmmoGelRounds\")).length > 0;\n                }\n            }\n        }\n        return false;\n    }\n\n    private isDamageFromImpactDispersion(damage: DamageData) {\n        // TODO: FA 52. Ammo currently cannot have mods, so not sure how to implement Alter Ballistics idiomatically.\n        return false;\n    }\n\n    private async promptDamageData(soakRollOptions: SoakRollOptions, soakDefenseParts: PartsList<number>)\n        : Promise<DamageData | undefined> {\n\n        // Ask user for incoming damage, ap and element\n        const damageDataDialog = await ShadowrunActorDialogs.createSoakDialog(soakRollOptions, soakDefenseParts);\n        const userData = await damageDataDialog.select();\n        if (damageDataDialog.canceled) return;\n\n        // Update damage with the user input\n        const initialDamageData: DamageData = soakRollOptions?.damage\n                ? soakRollOptions.damage\n                : DefaultValues.damageData();\n\n        return this.updateDamageWithUserData(initialDamageData, userData.incomingDamage, userData.damageType, userData.ap, userData.element);\n    }\n\n    private updateDamageWithUserData(initialDamageData: DamageData, incomingDamage : number, damageType : DamageType, ap: number, element: string) {\n        const damageData = duplicate(initialDamageData) as DamageData;\n\n        // Update damage data, diff changes instead of simply replacing\n        const totalDamage = Helpers.calcTotal(damageData);\n        if (totalDamage !== incomingDamage) {\n            const diff = incomingDamage - totalDamage;\n            damageData.mod = PartsList.AddUniquePart(damageData.mod, 'SR5.UserInput', diff);\n            damageData.value = Helpers.calcTotal(damageData);\n        }\n\n        if (initialDamageData.type.base !== damageType) {\n            damageData.type.base = damageType;\n            damageData.type.value = damageType;\n        }\n\n        // Update ap, diff changes instead of simply replacing\n        const totalAp = Helpers.calcTotal(damageData.ap);\n        if (totalAp !== ap) {\n            const diff = ap - totalAp;\n            damageData.ap.mod = PartsList.AddUniquePart(damageData.ap.mod, 'SR5.UserInput', diff);\n            damageData.ap.value = Helpers.calcTotal(damageData.ap);\n        }\n\n        if (element) {\n            damageData.element.value = element as DamageElement;\n        }\n\n        return damageData;\n    }\n}","import { InitiativePrep } from './functions/InitiativePrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { ItemPrep } from './functions/ItemPrep';\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { NPCPrep } from './functions/NPCPrep';\nimport CharacterData = Shadowrun.CharacterData;\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\n\nexport function CharacterDataPrepare(data: CharacterData, items: SR5ItemDataWrapper[]) {\n    ModifiersPrep.prepareModifiers(data);\n    ModifiersPrep.clearAttributeMods(data);\n\n    ItemPrep.prepareArmor(data, items);\n    ItemPrep.prepareBodyware(data, items);\n\n    SkillsPrep.prepareSkills(data);\n    AttributesPrep.prepareAttributes(data);\n\n    // NPCPrep is reliant to be called after AttributesPrep.\n    NPCPrep.prepareNPCData(data);\n\n    LimitsPrep.prepareLimitBaseFromAttributes(data);\n    LimitsPrep.prepareLimits(data);\n\n    MatrixPrep.prepareMatrix(data, items);\n    MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\n\n    if (data.is_npc && data.npc.is_grunt) {\n        ConditionMonitorsPrep.prepareGrunt(data);\n    } else {\n        ConditionMonitorsPrep.preparePhysical(data);\n        ConditionMonitorsPrep.prepareStun(data);\n    }\n\n    MovementPrep.prepareMovement(data);\n    WoundsPrep.prepareWounds(data);\n\n    InitiativePrep.prepareMeatspaceInit(data);\n    InitiativePrep.prepareAstralInit(data);\n    InitiativePrep.prepareMatrixInit(data);\n    InitiativePrep.prepareCurrentInitiative(data);\n}\n","import { InitiativePrep } from './functions/InitiativePrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { ItemPrep } from './functions/ItemPrep';\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport CritterData = Shadowrun.CritterData;\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\n\nexport function CritterDataPrepare(data: CritterData, items: SR5ItemDataWrapper[]) {\n    ModifiersPrep.prepareModifiers(data);\n    ModifiersPrep.clearAttributeMods(data);\n\n    ItemPrep.prepareArmor(data, items);\n    ItemPrep.prepareBodyware(data, items);\n\n    SkillsPrep.prepareSkills(data);\n    AttributesPrep.prepareAttributes(data);\n    LimitsPrep.prepareLimitBaseFromAttributes(data);\n    LimitsPrep.prepareLimits(data);\n\n    MatrixPrep.prepareMatrix(data, items);\n    MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\n\n    ConditionMonitorsPrep.preparePhysical(data);\n    ConditionMonitorsPrep.prepareStun(data);\n\n    MovementPrep.prepareMovement(data);\n    WoundsPrep.prepareWounds(data);\n\n    InitiativePrep.prepareMeatspaceInit(data);\n    InitiativePrep.prepareAstralInit(data);\n    InitiativePrep.prepareMatrixInit(data);\n    InitiativePrep.prepareCurrentInitiative(data);\n}","import { SkillsPrep } from './functions/SkillsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport SpiritType = Shadowrun.SpiritType;\nimport { Helpers } from '../../helpers';\nimport {PartsList} from \"../../parts/PartsList\";\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\nimport SpiritData = Shadowrun.SpiritData;\n\n\nexport function SpiritDataPrepare(data: SpiritData, items: SR5ItemDataWrapper[]) {\n    ModifiersPrep.prepareModifiers(data);\n    ModifiersPrep.clearAttributeMods(data);\n\n    SpiritPrep.prepareSpiritBaseData(data);\n\n    SkillsPrep.prepareSkills(data);\n    AttributesPrep.prepareAttributes(data);\n    LimitsPrep.prepareLimitBaseFromAttributes(data);\n    LimitsPrep.prepareLimits(data);\n\n    SpiritPrep.prepareSpiritArmor(data);\n\n    ConditionMonitorsPrep.prepareStun(data);\n    ConditionMonitorsPrep.preparePhysical(data);\n\n    MovementPrep.prepareMovement(data);\n    WoundsPrep.prepareWounds(data);\n\n    InitiativePrep.prepareCurrentInitiative(data);\n\n    this.data.special = 'magic';\n}\n\nexport class SpiritPrep {\n    static prepareSpiritBaseData(data: SpiritData) {\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\n\n        if (overrides) {\n            const { attributes, skills, initiative, force, modifiers } = data;\n\n            // set the base of attributes to the provided force\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\n                if (attributes[attId] !== undefined) {\n                    attributes[attId].base = value + force;\n                }\n            }\n\n            for (const [skillId, skill] of Object.entries(skills.active)) {\n                // Leave custom skills alone to allow users to change those at will.\n                if (skill.name !== '') continue;\n\n                // Change default skills to the force rating.\n                skill.base = overrides.skills.find((s) => s === skillId) ? force : 0;\n            }\n\n            // prepare initiative data\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\n            initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\n            initiative.meatspace.dice.base = 2;\n            initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\n\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\n            initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\n            initiative.astral.dice.base = 3;\n            initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\n        }\n    }\n\n    static prepareSpiritArmor(data: SpiritData) {\n        const { armor, attributes } = data;\n        armor.base = (attributes.essence.value ?? 0) * 2;\n        armor.value = Helpers.calcTotal(armor);\n    }\n\n    /**\n     * get the attribute and initiative modifiers and skills\n     */\n    static getSpiritStatModifiers(spiritType: SpiritType) {\n        const overrides = {\n            // value of 0 for attribute makes it equal to the Force\n            attributes: {\n                body: 0,\n                agility: 0,\n                reaction: 0,\n                strength: 0,\n                willpower: 0,\n                logic: 0,\n                intuition: 0,\n                charisma: 0,\n                magic: 0,\n                essence: 0,\n            },\n            // modifiers for after the Force x 2 calculation\n            init: 0,\n            astral_init: 0,\n            // skills are all set to Force\n            skills: [] as string[],\n        };\n        switch (spiritType) {\n            case 'air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'aircraft':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -2;\n                overrides.skills.push('free_fall', 'navigation', 'perception', 'pilot_aircraft', 'unarmed_combat');\n                break;\n            case 'airwave':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'impersonation', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'automotive':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.logic = -2;\n                overrides.init = 1;\n                overrides.skills.push('navigation', 'perception', 'pilot_ground_craft', 'running', 'unarmed_combat');\n                break;\n            case 'beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'ceramic':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'energy':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\n                break;\n            case 'guardian':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 2;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'guidance':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\n                break;\n            case 'man':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'metal':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'plant':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = -1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\n                break;\n            case 'ship':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 2;\n                overrides.attributes.logic = -2;\n                overrides.init = -1;\n                overrides.skills.push('navigation', 'perception', 'pilot_water_craft', 'survival', 'swimming', 'unarmed_combat');\n                break;\n            case 'task':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'train':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = -2;\n                overrides.init = -1;\n                overrides.skills.push('intimidation', 'navigation', 'perception', 'pilot_ground_craft', 'unarmed_combat');\n                break;\n            case 'water':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'toxic_air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'gymnastics', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'toxic_fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'flight', 'unarmed_combat');\n                break;\n            case 'toxic_man':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spell_casting', 'unarmed_combat');\n                break;\n            case 'toxic_water':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'blood':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 2;\n                overrides.attributes.strength = 2;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'running', 'unarmed_combat');\n                break;\n\n            case 'muse':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'nightmare':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'shade':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'succubus':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'wraith':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n\n            case 'shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'master_shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n\n            // insect\n            case 'caretaker':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'leadership', 'perception', 'unarmed_combat');\n                break;\n            case 'nymph':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'scout':\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'sneaking', 'unarmed_combat');\n                break;\n            case 'soldier':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.strength = 3;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'exotic_range', 'gymnastics', 'perception', 'unarmed_combat');\n                break;\n            case 'worker':\n                overrides.attributes.strength = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'queen':\n                overrides.attributes.body = 5;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = 5;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 5;\n                overrides.skills.push(\n                    'assensing',\n                    'astral_combat',\n                    'con',\n                    'counterspelling',\n                    'gymnastics',\n                    'leadership',\n                    'negotiation',\n                    'perception',\n                    'spellcasting',\n                    'unarmed_combat',\n                );\n                break;\n        }\n        return overrides;\n    }\n}\n","import SpriteActorData = Shadowrun.SpriteData;\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport SpriteType = Shadowrun.SpriteType;\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\nimport SpriteData = Shadowrun.SpriteData;\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\n\n\nexport function SpriteDataPrepare(data: SpriteData, items: SR5ItemDataWrapper[]) {\n    ModifiersPrep.prepareModifiers(data);\n    ModifiersPrep.clearAttributeMods(data);\n\n    SpritePrep.prepareSpriteData(data);\n    MatrixPrep.prepareAttributesForDevice(data);\n\n    SkillsPrep.prepareSkills(data);\n    AttributesPrep.prepareAttributes(data);\n    LimitsPrep.prepareLimits(data);\n\n    MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\n\n    InitiativePrep.prepareCurrentInitiative(data);\n\n    data.special = 'resonance';\n}\n/**\n * Prepare a Sprite Type of Actor\n */\nexport class SpritePrep {\n    /**\n     * Prepares basic Sprite specific data\n     * - matrix attribute values\n     * - device rating\n     * - matrix condition monitor\n     * - matrix initiative\n     * - skills\n     * @param data\n     */\n    static prepareSpriteData(data: SpriteActorData) {\n        const { level, skills, matrix, spriteType, initiative, attributes, modifiers } = data;\n\n        const matrixAtts = ['attack', 'sleaze', 'data_processing', 'firewall'];\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // apply the matrix overrides\n        matrixAtts.forEach((att) => {\n            if (matrix[att] !== undefined) {\n                matrix[att].base = level + overrides[att];\n                matrix[att].value = Helpers.calcTotal(matrix[att]);\n            }\n        });\n\n        // setup initiative from overrides\n        initiative.matrix.base.base = level * 2 + overrides.init;\n        PartsList.AddUniquePart(initiative.matrix.base.mod, 'SR5.Bonus', modifiers['matrix_initiative']);\n        Helpers.calcTotal(initiative.matrix.base);\n\n        initiative.matrix.dice.base = 4;\n        PartsList.AddUniquePart(initiative.matrix.dice.mod, 'SR5.Bonus', modifiers['matrix_initiative_dice']);\n        Helpers.calcTotal(initiative.matrix.dice);\n\n        // always in matrix perception\n        initiative.perception = 'matrix';\n\n        // calculate resonance value\n        attributes.resonance.base = level + overrides.resonance;\n        Helpers.calcTotal(attributes.resonance);\n\n        // apply skill levels\n        // clear skills that we don't have\n        for (const [skillId, skill] of Object.entries(skills.active)) {\n            skill.base = overrides.skills.find((s) => s === skillId) ? level : 0;\n        }\n\n        matrix.rating = level;\n        matrix.condition_monitor.max = 8 + Math.ceil(level / 2);\n    }\n\n    /**\n     * Get the stat modifiers for the specified type of sprite\n     * @param spriteType\n     */\n    static getSpriteStatModifiers(spriteType: SpriteType) {\n        const overrides = {\n            attack: 0,\n            sleaze: 0,\n            data_processing: 0,\n            firewall: 0,\n            resonance: 0,\n            init: 0,\n            // all sprites have computer\n            skills: ['computer'],\n        };\n        switch (spriteType) {\n            case 'courier':\n                overrides.sleaze = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('hacking');\n                break;\n            case 'crack':\n                overrides.sleaze = 3;\n                overrides.data_processing = 2;\n                overrides.firewall = 1;\n                overrides.init = 2;\n                overrides.skills.push('hacking', 'electronic_warfare');\n                break;\n            case 'data':\n                overrides.attack = -1;\n                overrides.data_processing = 4;\n                overrides.firewall = 1;\n                overrides.init = 4;\n                overrides.skills.push('electronic_warfare');\n                break;\n            case 'fault':\n                overrides.attack = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('cybercombat', 'hacking');\n                break;\n            case 'machine':\n                overrides.attack = 1;\n                overrides.data_processing = 3;\n                overrides.firewall = 2;\n                overrides.init = 3;\n                overrides.skills.push('electronic_warfare', 'hardware');\n                break;\n        }\n        return overrides;\n    }\n}\n","import VehicleActorData = Shadowrun.VehicleData;\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\nimport {SR5} from \"../../config\";\nimport VehicleData = Shadowrun.VehicleData;\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\n\nexport function VehicleDataPreparation(data: VehicleData, items: SR5ItemDataWrapper[]) {\n    ModifiersPrep.prepareModifiers(data);\n    ModifiersPrep.clearAttributeMods(data);\n\n    VehiclePrep.prepareVehicleStats(data);\n    VehiclePrep.prepareAttributes(data);\n    VehiclePrep.prepareLimits(data);\n\n    SkillsPrep.prepareSkills(data);\n    AttributesPrep.prepareAttributes(data);\n    LimitsPrep.prepareLimits(data);\n\n    VehiclePrep.prepareConditionMonitor(data);\n\n    MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\n    MatrixPrep.prepareAttributesForDevice(data);\n\n    VehiclePrep.prepareMovement(data);\n\n    VehiclePrep.prepareMeatspaceInit(data);\n    InitiativePrep.prepareMatrixInit(data);\n    InitiativePrep.prepareCurrentInitiative(data);\n\n    VehiclePrep.prepareArmor(data);\n}\n\nexport class VehiclePrep {\n    static prepareVehicleStats(data: VehicleActorData) {\n        const { vehicle_stats, isOffRoad } = data;\n        // set the value for the stats\n        for (let [key, stat] of Object.entries(vehicle_stats)) {\n            // this turns the Object model into the list mod\n            if (typeof stat.mod === 'object') {\n                stat.mod = new PartsList(stat.mod).list;\n            }\n            const parts = new PartsList(stat.mod);\n\n            parts.addUniquePart('SR5.Temporary', stat.temp ?? 0);\n\n            stat.mod = parts.list;\n            Helpers.calcTotal(stat);\n            // add labels\n            stat.label = SR5.vehicle.stats[key];\n        }\n\n        // hide certain stats depending on if we're offroad\n        if (isOffRoad) {\n            vehicle_stats.off_road_speed.hidden = false;\n            vehicle_stats.off_road_handling.hidden = false;\n            vehicle_stats.speed.hidden = true;\n            vehicle_stats.handling.hidden = true;\n        } else {\n            vehicle_stats.off_road_speed.hidden = true;\n            vehicle_stats.off_road_handling.hidden = true;\n            vehicle_stats.speed.hidden = false;\n            vehicle_stats.handling.hidden = false;\n        }\n    }\n\n    static prepareAttributes(data: VehicleActorData) {\n        const { attributes, vehicle_stats } = data;\n\n        const attributeIds = ['agility', 'reaction', 'strength', 'willpower', 'logic', 'intuition', 'charisma'];\n\n        const totalPilot = Helpers.calcTotal(vehicle_stats.pilot);\n\n        attributeIds.forEach((attId) => {\n            if (attributes[attId] !== undefined) {\n                attributes[attId].base = totalPilot;\n            }\n        });\n    }\n\n    static prepareLimits(data: VehicleActorData) {\n        const { limits, vehicle_stats, isOffRoad } = data;\n\n        limits.mental.base = Helpers.calcTotal(vehicle_stats.sensor);\n\n        // add sensor, handling, and speed as limits\n        limits.sensor = { ...vehicle_stats.sensor, hidden: true };\n        limits.handling = { ...(isOffRoad ? vehicle_stats.off_road_handling : vehicle_stats.handling), hidden: true };\n        limits.speed = { ...(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed), hidden: true };\n    }\n\n    static prepareConditionMonitor(data: VehicleActorData) {\n        const { track, attributes, matrix, isDrone, modifiers } = data;\n\n        const halfBody = Math.ceil(Helpers.calcTotal(attributes.body) / 2);\n        // CRB pg 199 drone vs vehicle physical condition monitor rules\n        if (isDrone) {\n            track.physical.base = 6 + halfBody;\n            track.physical.max = track.physical.base + (Number(modifiers['physical_track']) || 0);\n        } else {\n            track.physical.base = 12 + halfBody;\n            track.physical.max =  track.physical.base + (Number(modifiers['physical_track']) || 0);\n        }\n        track.physical.label = SR5.damageTypes.physical;\n\n        const rating = matrix.rating || 0;\n        matrix.condition_monitor.max = 8 + Math.ceil(rating / 2);\n    }\n\n    static prepareMovement(data: VehicleActorData) {\n        const { vehicle_stats, movement, isOffRoad } = data;\n\n        let speedTotal = Helpers.calcTotal(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed);\n\n        // algorithm to determine speed, CRB pg 202 table\n        movement.walk.base = 5 * Math.pow(2, speedTotal - 1);\n        movement.walk.value = movement.walk.base;\n\n        movement.run.base = 10 * Math.pow(2, speedTotal - 1);\n        movement.run.value = movement.run.base;\n    }\n\n    static prepareMeatspaceInit(data: VehicleActorData) {\n        const { vehicle_stats, initiative } = data;\n\n        const pilot = Helpers.calcTotal(vehicle_stats.pilot);\n\n        initiative.meatspace.base.base = pilot * 2;\n        initiative.meatspace.dice.base = 4;\n        Helpers.calcTotal(initiative.meatspace.base);\n        Helpers.calcTotal(initiative.meatspace.dice);\n    }\n\n    static prepareArmor(data: VehicleActorData) {\n        const { armor } = data;\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR5.Temporary', armor['temp']);\n        Helpers.calcTotal(armor);\n    }\n}\n","import { PartsList } from '../../../parts/PartsList';\nimport { Helpers } from '../../../helpers';\nimport {SR} from \"../../../constants\";\nimport {SR5} from \"../../../config\";\nimport AttributeField = Shadowrun.AttributeField;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class AttributesPrep {\n    /**\n     * Prepare actor data for attributes\n     */\n    static prepareAttributes(data: ActorTypesData) {\n        const {attributes} = data;\n\n        // always have special attributes set to hidden\n        attributes.magic.hidden = true;\n        attributes.resonance.hidden = true;\n        attributes.edge.hidden = true;\n        attributes.essence.hidden = true;\n\n        // set the value for the attributes\n        for (let [name, attribute] of Object.entries(attributes)) {\n            // don't manage the attribute if it is using the old method of edge tracking\n            // needed to be able to migrate things correctly\n            if (name === 'edge' && attribute['uses'] === undefined) return;\n\n            const parts = new PartsList(attribute.mod);\n            attribute.mod = parts.list;\n\n            AttributesPrep.calculateAttribute(name, attribute);\n\n            // add i18n labels.\n            attribute.label = SR5.attributes[name];\n        }\n    }\n\n    /**\n     * Calculate a single attributes value with all it's ranges and rules applied.\n     *\n     * @param name The attributes name / id\n     * @param attribute The attribute will be modified in place\n     */\n    static calculateAttribute(name: string, attribute: AttributeField) {\n        // Each attribute can have a unique value range.\n        // TODO:  Implement metatype attribute value ranges for character actors.\n        const range = SR.attributes.ranges[name];\n        Helpers.calcTotal(attribute, range);\n    }\n}\n","import PhysicalTrackActorData = Shadowrun.PhysicalTrackActorData;\nimport StunTrackActorData = Shadowrun.StunTrackActorData;\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\nimport {SR5} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class ConditionMonitorsPrep {\n    static prepareStun(data: ActorTypesData & StunTrackActorData) {\n        const { track, attributes, modifiers } = data;\n\n        track.stun.base = 8 + Math.ceil(attributes.willpower.value / 2);\n        track.stun.max = track.stun.base + Number(modifiers['stun_track']);\n        track.stun.label = SR5.damageTypes.stun;\n        track.stun.disabled = false;\n    }\n\n    static preparePhysical(data: ActorTypesData & PhysicalTrackActorData) {\n        const { track, attributes, modifiers } = data;\n\n        track.physical.base = 8 + Math.ceil(attributes.body.value / 2);\n        track.physical.max = track.physical.base + Number(modifiers['physical_track']);\n        track.physical.overflow.max = attributes.body.value;\n        track.physical.label = SR5.damageTypes.physical;\n        track.physical.disabled = false;\n    }\n\n    static prepareGrunt(data: ActorTypesData & TwoTrackActorData) {\n        // Grunts use only one monitor, use physical to get overflow functionality.\n        ConditionMonitorsPrep.prepareStun(data);\n\n        const { track, attributes, modifiers } = data;\n        // Overwrite stun damage to avoid invisible damage modifiers.\n        track.stun.value = 0;\n        track.stun.disabled = true;\n\n        // Grunts use either their WIL or BOD as their monitors attribute.\n        const attribute = attributes.willpower.value > attributes.body.value ?\n            attributes.willpower:\n            attributes.body;\n\n        track.physical.base = 8 + Math.ceil(attribute.value / 2);\n        track.physical.max = track.physical.base + Number(modifiers['physical_track']);\n        track.physical.overflow.max = attributes.body.value;\n        track.physical.label = \"SR5.ConditionMonitor\";\n        track.physical.disabled = false;\n    }\n}\n","import MagicActorData = Shadowrun.MagicActorData;\nimport MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class InitiativePrep {\n    static prepareCurrentInitiative(data: ActorTypesData) {\n        const { initiative } = data;\n\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\n        else {\n            initiative.current = initiative.meatspace;\n            initiative.perception = 'meatspace';\n        }\n\n        initiative.current.dice.value = Helpers.calcTotal(initiative.current.dice);\n        if (initiative.edge) initiative.current.dice.value = 5;\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\n\n        initiative.current.base.value = Helpers.calcTotal(initiative.current.base);\n    }\n\n    static prepareMeatspaceInit(data: ActorTypesData) {\n        const { initiative, attributes, modifiers } = data;\n\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value;\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\n\n        initiative.meatspace.dice.base = 1;\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\n    }\n\n    static prepareAstralInit(data: ActorTypesData & MagicActorData) {\n        const { initiative, attributes, modifiers } = data;\n\n        initiative.astral.base.base = attributes.intuition.value * 2;\n        initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\n\n        initiative.astral.dice.base = 2;\n        initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\n    }\n\n    static prepareMatrixInit(data: ActorTypesData & MatrixActorData) {\n        const { initiative, attributes, modifiers, matrix } = data;\n        if (matrix) {\n\n            initiative.matrix.base.base = attributes.intuition.value + data.matrix.data_processing.value;\n            initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative']));\n\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3);\n            initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative_dice']));\n        }\n    }\n}\n","import { SR5ItemDataWrapper } from '../../../data/SR5ItemDataWrapper';\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport ArmorActorData = Shadowrun.ArmorActorData;\nimport {SR5} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class ItemPrep {\n    /**\n     * Prepare the armor data for the Item\n     * - will only allow one \"Base\" armor item to be used (automatically takes the best one if multiple are equipped)\n     * - all \"accessories\" will be added to the armor\n     */\n    static prepareArmor(data: ActorTypesData & ArmorActorData, items: SR5ItemDataWrapper[]) {\n        const { armor } = data;\n        armor.base = 0;\n        armor.value = 0;\n        armor.mod = [];\n        for (const element of Object.keys(SR5.elementTypes)) {\n            armor[element] = 0;\n        }\n\n        const armorModParts = new PartsList<number>(armor.mod);\n        const equippedArmor = items.filter((item) => item.couldHaveArmor() && item.isEquipped());\n        equippedArmor?.forEach((item) => {\n            // Don't spam armor values with clothing or armor like items without any actual armor.\n            if (item.hasArmor()) {\n                // We allow only one base armor but multiple armor accessories\n                if (item.hasArmorAccessory()) {\n                    armorModParts.addUniquePart(item.getName(), item.getArmorValue());\n                }\n                else {\n                    const armorValue = item.getArmorValue();\n                    if (armorValue > armor.base) {\n                        armor.base = item.getArmorValue();\n                        armor.label = item.getName();\n                    }\n                }\n            }\n\n            // Apply elemental modifiers of all worn armor and clothing SR5#169.\n            for (const element of Object.keys(SR5.elementTypes)) {\n                armor[element] += item.getArmorElements()[element];\n            }\n        });\n\n        if (data.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), data.modifiers['armor']);\n        // SET ARMOR\n        armor.value = Helpers.calcTotal(armor);\n    }\n    /**\n     * Prepare actor data for ware changes\n     * - this calculates the actors essence\n     */\n    static prepareBodyware(data: ActorTypesData, items: SR5ItemDataWrapper[]) {\n        const { attributes } = data;\n        const parts = new PartsList<number>();\n        // add Items as values to lower the total value of essence\n        items\n            .filter((item) => item.isBodyware() && item.isEquipped())\n            .forEach((item) => {\n                if (item.getEssenceLoss()) {\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\n                }\n            });\n        // add the bonus from the misc tab if applied\n        const essenceMod = data.modifiers['essence'];\n        if (essenceMod && !Number.isNaN(essenceMod)) {\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\n        }\n\n        attributes.essence.base = 6;\n        attributes.essence.mod = parts.list;\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\n    }\n}\n","import { PartsList } from '../../../parts/PartsList';\nimport { Helpers } from '../../../helpers';\nimport {SR5} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class LimitsPrep {\n    static prepareLimits(data: ActorTypesData) {\n        const { limits, modifiers } = data;\n\n        // SETUP LIMITS\n        limits.physical.mod = PartsList.AddUniquePart(limits.physical.mod, 'SR5.Bonus', Number(modifiers['physical_limit']));\n        limits.mental.mod = PartsList.AddUniquePart(limits.mental.mod, 'SR5.Bonus', Number(modifiers['mental_limit']));\n        limits.social.mod = PartsList.AddUniquePart(limits.social.mod, \"SR5.Bonus\", Number(modifiers['social_limit']));\n\n        // limit labels\n        for (let [limitKey, limitValue] of Object.entries(limits)) {\n            Helpers.calcTotal(limitValue);\n            limitValue.label = SR5.limits[limitKey];\n        }\n    }\n\n    static prepareLimitBaseFromAttributes(data: ActorTypesData) {\n\n        const { limits, attributes } = data;\n\n        limits.physical.base = Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3);\n        limits.mental.base = Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3);\n        limits.social.base = Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3);\n\n    }\n}\n","import MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { SR5ItemDataWrapper } from '../../../data/SR5ItemDataWrapper';\nimport { PartsList } from '../../../parts/PartsList';\nimport {SR5} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\n\nexport class MatrixPrep {\n    /**\n     * Prepare Matrix data on the actor\n     * - if an item is equipped, it will use that data\n     * - if it isn't and player is technomancer, it will use that data\n     */\n    static prepareMatrix(actorData: ActorTypesData & MatrixActorData, items: SR5ItemDataWrapper[]) {\n        const { matrix, attributes } = actorData;\n\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\n\n        // clear matrix data to defaults\n        MatrixList.forEach((key) => {\n            const parts = new PartsList(matrix[key].mod);\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\n            parts.removePart('Temporary');\n            matrix[key].mod = parts.list;\n            matrix[key].value = parts.total;\n        });\n        matrix.condition_monitor.max = 0;\n        matrix.rating = 0;\n        matrix.name = '';\n        matrix.device = '';\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\n\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\n\n        if (device) {\n            const conditionMonitor = device.getConditionMonitor();\n            matrix.device = device.getId();\n            matrix.condition_monitor.max = conditionMonitor.max;\n            matrix.condition_monitor.value = conditionMonitor.value;\n            matrix.rating = device.getRating();\n            matrix.is_cyberdeck = device.isCyberdeck();\n            matrix.name = device.getName();\n            matrix.item = device.getData();\n            const deviceAtts = device.getASDF();\n            if (deviceAtts) {\n                // setup the actual matrix attributes for the actor\n                for (const [key, value] of Object.entries(deviceAtts)) {\n                    if (value && matrix[key]) {\n                        matrix[key].base = value.value;\n                        matrix[key].device_att = value.device_att;\n                    }\n                }\n            }\n        } // if we don't have a device, use living persona\n        else if (actorData.special === 'resonance') {\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\n        }\n\n        // set matrix condition monitor to max if greater than\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\n        }\n    }\n\n    /**\n     * Add Matrix Attributes to Limits and Attributes\n     * @param data\n     */\n    static prepareMatrixToLimitsAndAttributes(data: ShadowrunActorDataData & MatrixActorData) {\n        const { matrix, attributes, limits } = data;\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\n\n        // add matrix attributes to both limits and attributes as hidden entries\n        MatrixList.forEach((key) => {\n            Helpers.calcTotal(matrix[key]);\n            if (matrix[key]) {\n                const label = SR5.matrixAttributes[key];\n                const { value, base, mod } = matrix[key];\n                const hidden = true;\n\n                limits[key] = {\n                    value,\n                    base,\n                    mod,\n                    label,\n                    hidden,\n                };\n                attributes[key] = {\n                    value,\n                    base,\n                    mod,\n                    label,\n                    hidden,\n                };\n            }\n        });\n    }\n\n    /**\n     * Prepare the mental attributes for a sheet that just has a device rating\n     * @param data\n     */\n    static prepareAttributesForDevice(data: ActorTypesData & MatrixActorData) {\n        const { matrix, attributes } = data;\n        const rating = matrix.rating || 0;\n        const mentalAttributes = ['intuition', 'logic', 'charisma', 'willpower'];\n\n        mentalAttributes.forEach((attLabel) => {\n            if (attributes[attLabel] !== undefined) {\n                attributes[attLabel].base = rating;\n                Helpers.calcTotal(attributes[attLabel]);\n            }\n        });\n        const basic = ['firewall', 'data_processing'];\n        basic.forEach((attId) => {\n            matrix[attId].base = rating;\n        });\n        [...basic, 'sleaze', 'attack'].forEach((attId) => {\n            Helpers.calcTotal(matrix[attId]);\n        });\n    }\n}\n","import ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\n\nexport class ModifiersPrep {\n    /**\n     * Prepare the modifiers that are displayed in the Misc. tab\n     */\n    static prepareModifiers(data: ActorTypesData) {\n        if (!data.modifiers) data.modifiers = {};\n        const modifiers = {};\n        let miscTabModifiers = [\n            'soak',\n            'drain',\n            'armor',\n            'physical_limit',\n            'social_limit',\n            'mental_limit',\n            'stun_track',\n            'physical_track',\n            'meat_initiative',\n            'meat_initiative_dice',\n            'astral_initiative',\n            'astral_initiative_dice',\n            'matrix_initiative',\n            'matrix_initiative_dice',\n            'composure',\n            'lift_carry',\n            'judge_intentions',\n            'memory',\n            'walk',\n            'run',\n            'defense',\n            'wound_tolerance',\n            'essence',\n            'fade',\n        ];\n        miscTabModifiers.sort();\n        // force global to the top\n        miscTabModifiers.unshift('global');\n\n        for (let item of miscTabModifiers) {\n            modifiers[item] = Number(data.modifiers[item]) || 0;\n        }\n\n        data.modifiers = modifiers;\n    }\n\n    static clearAttributeMods(data: ShadowrunActorDataData) {\n        const { attributes } = data;\n        for (const [, attribute] of Object.entries(attributes)) {\n            attribute.mod = [];\n        }\n    }\n}\n","import MovementActorData = Shadowrun.MovementActorData;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class MovementPrep {\n    static prepareMovement(data: ActorTypesData & MovementActorData) {\n        const { attributes, modifiers } = data;\n        const movement = data.movement;\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk']));\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run']));\n    }\n}\n","import CharacterActorData = Shadowrun.CharacterData;\nimport {DataDefaults} from \"../../../data/DataDefaults\";\nimport {METATYPEMODIFIER} from \"../../../constants\";\nimport {PartsList} from \"../../../parts/PartsList\";\nimport {AttributesPrep} from \"./AttributesPrep\";\n\nexport class NPCPrep {\n    static prepareNPCData(data: CharacterActorData) {\n        // Apply to NPC and none NPC to remove lingering modifiers after actor has been removed it's npc status.\n        NPCPrep.applyMetatypeModifiers(data);\n    }\n\n    /**\n     * Apply modifiers that result from an NPCs metatype.\n     * This method also should still run on any none NPC to remove eventually lingering NPC metatype modifiers.\n     */\n    static applyMetatypeModifiers(data: CharacterActorData) {\n        // Extract needed data.\n        const {attributes, metatype} = data;\n        const metatypeModifier = DataDefaults.grunt.metatype_modifiers[metatype] || {};\n\n        for (const [name, attribute] of Object.entries(attributes)) {\n            // old-style object mod transformation is happening in AttributePrep and is needed here. Order is important.\n            if (!Array.isArray(attribute.mod)) {\n                    console.error('Actor data contains wrong data type for attribute.mod', attribute, !Array.isArray(attribute.mod));\n            } else {\n\n                // Remove lingering modifiers from NPC actors that aren't anymore.\n                const parts = new PartsList(attribute.mod);\n                parts.removePart(METATYPEMODIFIER);\n\n                // Apply NPC modifiers\n                const modifyBy = metatypeModifier.attributes?.[name];\n                if (data.is_npc && modifyBy) {\n                    parts.addPart(METATYPEMODIFIER, modifyBy);\n                }\n\n                // Prepare attribute modifiers\n                attribute.mod = parts.list;\n\n                AttributesPrep.calculateAttribute(name, attribute);\n            }\n        }\n    }\n}","import { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport {SR5} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class SkillsPrep {\n    /**\n     * Prepare actor data for skills\n     */\n    static prepareSkills(data: ActorTypesData) {\n        const { language, active, knowledge } = data.skills;\n        if (language) {\n            if (!language.value) {\n                language.value = {};\n            }\n\n            // language.value is defined as an array in template.json\n            // However what we actually want here is an object, so we set it manually\n            // The same is done for the other knowledge skillgroups 'value' properties below\n            if (Array.isArray(language.value) && language.value.length == 0) {\n                language.value = {};\n            }\n\n            language.attribute = 'intuition';\n        }\n\n        // function that will set the total of a skill correctly\n        const prepareSkill = (skill) => {\n            skill.mod = [];\n            if (!skill.base) skill.base = 0;\n            if (skill.bonus?.length) {\n                for (let bonus of skill.bonus) {\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, Number(bonus.value));\n                }\n            }\n            skill.value = Helpers.calcTotal(skill);\n\n            // Older Chummer imports miss some fields.\n            _mergeWithMissingSkillFields(skill);\n        };\n\n        // setup active skills\n        for (const skill of Object.values(active)) {\n            if (!skill.hidden) {\n                prepareSkill(skill);\n            }\n        }\n\n        const entries = Object.entries(data.skills.language.value);\n        // remove entries which are deleted TODO figure out how to delete these from the data\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete data.skills.language.value[key]);\n\n        for (let skill of Object.values(language.value)) {\n            prepareSkill(skill);\n            skill.attribute = 'intuition';\n        }\n\n        // setup knowledge skills\n        for (let [, group] of Object.entries(knowledge)) {\n            const entries = Object.entries(group.value);\n            // remove entries which are deleted TODO figure out how to delete these from the data\n            group.value = entries\n                .filter(([, val]) => !val._delete)\n                .reduce((acc, [id, skill]) => {\n                    prepareSkill(skill);\n\n                    // set the attribute on the skill\n                    skill.attribute = group.attribute;\n                    acc[id] = skill;\n                    return acc;\n                }, {});\n        }\n\n        // skill labels\n        for (let [skillKey, skillValue] of Object.entries(active)) {\n            skillValue.label = SR5.activeSkills[skillKey];\n        }\n    }\n}\n\n/** Just a quick, semi hacky way of setting up a complete skill data structure, while still allowing\n *  fields to be added at need.\n *\n * @param givenSkill\n * @return merge default skill fields with fields of the given field, only adding new fields in the process.\n */\nexport const _mergeWithMissingSkillFields = (givenSkill) => {\n    // Only the absolute most necessary fields, not datatype complete to SkillField\n    const template = {\n        name: \"\",\n        base: \"\",\n        value: 0,\n        attribute: \"\",\n        mod: [],\n        specs: [],\n        hidden: false\n    };\n\n    // Use mergeObject to reserve original object instance in case replacing it\n    // causes problems down the line with active skills taken from a preexisting\n    // data structure.\n    // overwrite false to prohibit existing values to be overwritten with empty values.\n    mergeObject(givenSkill, template, {overwrite: false});\n}","import TwoTrackActorData = Shadowrun.TwoTrackActorData;\nimport WoundsActorData = Shadowrun.WoundsActorData;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class WoundsPrep {\n    static prepareWounds(data: ActorTypesData & TwoTrackActorData & WoundsActorData) {\n        const { modifiers, track } = data;\n        const count = 3 + Number(modifiers['wound_tolerance']);\n        const stunWounds = track.stun.disabled ? 0 : Math.floor(track.stun.value / count);\n        const physicalWounds = track.physical.disabled ? 0 : Math.floor(track.physical.value / count);\n\n        track.stun.wounds = stunWounds;\n        track.physical.wounds = physicalWounds;\n\n        data.wounds = {\n            value: stunWounds + physicalWounds,\n        };\n    }\n}\n","import {FLAGS, SYSTEM_NAME} from \"../constants\";\n\nexport class ChangelogApplication extends Application {\n    get template(): string {\n        return 'systems/shadowrun5e/dist/templates/apps/changelog.html';\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['shadowrun5e'];\n        options.title = game.i18n.localize('SR5.ChangelogApplication.Title');\n        options.width = 500;\n        options.height = 'auto';\n        return options;\n    }\n\n    render(force?: boolean, options?: Application.RenderOptions) {\n        ChangelogApplication.setRenderForCurrentVersion();\n        return super.render(force, options);\n    }\n\n    // Let the async operation happen in background.\n    private static setRenderForCurrentVersion() {\n        game.user?.setFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion, game.system.data.version);\n    }\n\n    static get showApplication(): boolean {\n        if (!game.user?.isGM || !game.user?.isTrusted) return false;\n\n        const shownForVersion = game.user?.getFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion);\n        return shownForVersion !== game.system.data.version;\n    }\n}","import {SYSTEM_NAME} from \"../constants\";\nimport {Helpers} from \"../helpers\";\nimport {SR5Actor} from \"../actor/SR5Actor\";\nimport EnvironmentalModifierCategories = Shadowrun.EnvironmentalModifierCategories;\nimport {Modifiers} from \"../rules/Modifiers\";\n\nexport type EnvModifiersTarget = Scene | SR5Actor;\n\n/** Helper window for easy overview and selection of environmental modifiers and their calculated total.\n *\n */\nexport class EnvModifiersApplication extends Application {\n    target: EnvModifiersTarget;\n    modifiers: Modifiers;\n\n    constructor(target: EnvModifiersTarget) {\n        super();\n\n        this.target = target;\n    }\n\n    get template() {\n        return 'systems/shadowrun5e/dist/templates/apps/env-modifiers.html';\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['sr5', 'form-dialog'];\n        options.id = 'env-modifiers-application';\n        options.title = game.i18n.localize('SR5.EnvModifiersApplication.Title');\n        // @ts-ignore\n        options.width = 'auto'; // auto is important for differing i18n text length.\n        options.height = 'auto';\n        options.resizable = true;\n        return options;\n    }\n\n    async getData(options?: object): Promise<any> {\n        const data = super.getData(options) as any;\n\n        this.modifiers = await this._getModifiers();\n\n        data.active = this.modifiers.environmental.active;\n        data.total = this.modifiers.environmental.total;\n\n        data.levels = Modifiers.getEnvironmentalModifierLevels();\n\n        data.targetType = this._getTargetTypeLabel();\n        data.targetName = this.target.name;\n        data.disableForm = this._disableInputsForUser();\n\n        return data;\n    }\n\n    activateListeners(html: JQuery | HTMLElement) {\n        $(html).find('button.env-modifier').on('click', this._handleModifierChange.bind(this));\n        $(html).find('button.remove-modifiers-from-target').on('click', this._handleRemoveModifiersFromTarget.bind(this));\n    }\n\n    async _handleModifierChange(event: Event) {\n        event.preventDefault();\n\n        // Handle data retrieval from HTML datasets.\n        const element = event.currentTarget as HTMLElement;\n\n        if (!element.dataset.category || !element.dataset.value) return;\n\n        const category = element.dataset.category as keyof EnvironmentalModifierCategories;\n        const value = Number(element.dataset.value);\n\n        // Handle modifier calculation\n        this._toggleActiveModifierCategory(category, value);\n\n        await this._clearModifiersOnTargetForNoSelection();\n        await this._storeModifiersOnTarget();\n\n        this._updateTokenHUDTotalDisplay();\n\n        await this.render();\n    }\n\n    /** Updates opened tokenHUD modifier values.\n     *\n     * Doing it this way is just easier as relying on any update / hook workflow.\n     */\n    _updateTokenHUDTotalDisplay() {\n        if (this.target instanceof SR5Actor) {\n            $('.modifier-value-environmental').each((index, element) => {\n                $(element).html(this.modifiers.environmental.total.toString());\n            });\n        }\n    }\n\n    async _handleRemoveModifiersFromTarget(event: Event) {\n        event.preventDefault();\n\n        await this.clearModifiersOnTarget();\n\n        this._updateTokenHUDTotalDisplay();\n\n        await this.render();\n    }\n\n    /**\n     */\n    _toggleActiveModifierCategory(category: keyof EnvironmentalModifierCategories, level: number) {\n        this.modifiers.toggleEnvironmentalCategory(category, level);\n    }\n\n    /** Return the modifiers that best match the current target type\n     */\n    async _getModifiers(): Promise<Modifiers> {\n        // Actor targets might have no personal modifiers, but still see the scene modifiers then, and use those\n        // as a template for their local modifiers.\n        if (this.target instanceof SR5Actor) {\n            return await this.target.getModifiers();\n        }\n        // All other types are handled without special cases.\n        return await Modifiers.getModifiersFromEntity(this.target);\n    }\n\n    async _storeModifiersOnTarget() {\n        await Modifiers.setModifiersOnEntity(this.target, this.modifiers.data);\n    }\n\n    /** Cleanup unused data in Entity flag.\n     */\n    async _clearModifiersOnTargetForNoSelection() {\n        if (!this.modifiers.hasActiveEnvironmental) {\n            this.modifiers = await Modifiers.clearEnvironmentalOnEntity(this.target);\n        }\n    }\n\n    async _targetHasEnvironmentalModifiers() {\n        const modifiers = await Modifiers.getModifiersFromEntity(this.target);\n        return !!modifiers.environmental;\n    }\n\n    async clearModifiersOnTarget() {\n        await Modifiers.clearEnvironmentalOnEntity(this.target);\n        // Refresh modifiers. This can be necessary for Actor targets without modifiers when Scene modifiers are present.\n        this.modifiers = await this._getModifiers();\n    }\n\n    _getTargetTypeLabel(): string {\n        if (this.target instanceof Scene) {\n            return game.i18n.localize('ENTITY.Scene');\n        }\n        if (this.target instanceof SR5Actor) {\n            return game.i18n.localize('ENTITY.Actor');\n        }\n\n        return '';\n    }\n\n    /** Only allow interactions for user with appropriate permissions\n     *\n     */\n    _disableInputsForUser(): boolean {\n        const entity = this.target instanceof SR5Actor ? this.target : this.target;\n        return !(game.user?.isGM || entity.owner);\n    }\n\n    static async openForCurrentScene() {\n        if (!canvas || !canvas.ready || !canvas.scene) return;\n        await new EnvModifiersApplication(canvas.scene).render(true);\n    }\n\n    /** Part of the tokenHUD workflow makes it necessary to have the token id piped in\n     *\n     * @param tokenId\n     */\n    static openForTokenHUD(tokenId: string) {\n        const token = Helpers.getToken(tokenId);\n\n        // When the token hud control is activated, this inline handler will be called with it.\n        return async (event) => {\n            event.preventDefault();\n\n            if (!token || !token.actor) return;\n            // @ts-ignore // TODO: TYPE: Remove this...\n            await new EnvModifiersApplication(token.actor).render(true);\n        }\n    }\n\n    /** Left side tool window control icon / interaction\n     */\n    static getControl() {\n        return {\n            name: 'environmental-modifiers-application',\n            title: 'CONTROLS.SR5.EnvironmentalModifiers',\n            icon: 'fas fa-list',\n            onClick: EnvModifiersApplication.openForCurrentScene,\n            button: true\n        }\n    }\n\n    // TODO: Implement system wide token HUD management...\n    static async addTokenHUDFields(app: TokenHUD, html: JQuery, data) {\n        if (!data._id) return;\n\n        console.log(`${SYSTEM_NAME} | Environmental Modifier HUD on renderTokenHUD`);\n\n        const token = Helpers.getToken(data._id);\n        if (!token) return;\n\n        const actor = token.actor as SR5Actor;\n        const modifiers = await actor.getModifiers();\n\n        // Setup and connect tokenHUD elements.\n        const container = $('<div class=\"col far-right sr-modifier-container\"></div>');\n        const column = $('<div class=\"col modifier-column\"></div>');\n        const modifier = $('<div class=\"modifier-row\"></div>');\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-environmental\">${modifiers.environmental.total}</div>`);\n        const modifierDescription = $(`<div class=\"modifier-description open-environmental-modifier\">${game.i18n.localize(\"SR5.EnvironmentModifier\")}</div>`);\n        modifierDescription.on('click', EnvModifiersApplication.openForTokenHUD(data._id));\n\n        container.append(column);\n        column.append(modifier);\n        modifier.append(modifierValue);\n        modifier.append(modifierDescription);\n\n        // Connect SR-FoundryVTT tokenHUD elements to FoundryVTT tokenHUD column structure.\n        html.find('.col.right').after(container);\n    }\n}","import { parseDescription, getArray, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\n\nexport class ArmorParser {\n   \n    parseArmors(chummerChar) {\n        const armors = getArray(chummerChar.armors.armor);\n        const parsedArmors = [];\n        armors.forEach((chummerArmor) => {\n            try {\n                const itemData = this.parseArmor(chummerArmor);\n                parsedArmors.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedArmors;\n    }\n\n    parseArmor(chummerArmor) {\n        const data = {};\n        const armor = {};\n        data.armor = armor;\n\n        let desc = '';\n        armor.mod = chummerArmor.armor.includes('+');\n        armor.value = parseInt(chummerArmor.armor.replace('+', ''));\n        if (chummerArmor.description)\n            desc = chummerArmor.description;\n\n        console.log(chummerArmor);\n        if (chummerArmor.armormods && chummerArmor.armormods.armormod) {\n            armor.fire = 0;\n            armor.electricity = 0;\n            armor.cold = 0;\n            armor.acid = 0;\n            armor.radiation = 0;\n\n            const modDesc = [];\n            const mods = getArray(chummerArmor.armormods.armormod);\n            mods.forEach((mod) => {\n                if (mod.name.toLowerCase().includes('fire resistance')) {\n                    armor.fire += parseInt(mod.rating);\n                } else if (mod.name.toLowerCase().includes('nonconductivity')) {\n                    armor.electricity += parseInt(mod.rating);\n                } else if (mod.name.toLowerCase().includes('insulation')) {\n                    armor.cold += parseInt(mod.rating);\n                } else if (mod.name.toLowerCase().includes('radiation shielding')) {\n                    armor.radiation += parseInt(mod.rating);\n                }\n                if (mod.rating !== '') {\n                    modDesc.push(`${mod.name} R${mod.rating}`);\n                } else {\n                    modDesc.push(mod.name);\n                }\n            });\n            if (modDesc.length > 0) {\n                // add desc to beginning\n                desc = `${modDesc.join(',')}\\n\\n${desc}`;\n            }\n        }\n\n        data.technology = parseTechnology(chummerArmor);\n        data.description = parseDescription(chummerArmor);\n        \n        return createItemData(chummerArmor.name, 'armor', data);\n    }\n}","import { DefaultValues } from \"../../data/DataDefaults\";\n\nexport const getValues = (val) => {\n    const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\n    const l = val.match(regex);\n    return l || ['0'];\n};\n\nexport const getArray = (value) => {\n    return Array.isArray(value) ? value : [value];\n};\n\n/**\n *  Creates the description data from the chummer entry\n *  @param chummerEntry The chummer entry (the item)\n */\nexport const parseDescription = (chummerEntry) => {\n    const parsedDescription = DefaultValues.descriptionData();\n\n    if (chummerEntry.source && chummerEntry.page) {\n        parsedDescription.source = `${chummerEntry.source} ${chummerEntry.page}`\n    }\n\n    if (chummerEntry.description) {\n        parsedDescription.value = TextEditor.enrichHTML(chummerEntry.description);\n    }\n\n    return parsedDescription\n}\n\n/**\n *  Creates the technology data from the chummer entry\n *  @param chummerEntry The chummer entry (the item)\n */\nexport const parseTechnology = (chummerEntry) => {\n    const parsedTechnology = DefaultValues.technologyData();\n\n    if (chummerEntry.rating) {\n        parsedTechnology.rating = chummerEntry.rating;\n    }\n\n    if (chummerEntry.avail) {\n        parsedTechnology.availability = chummerEntry.avail;\n    }\n\n    if (chummerEntry.qty) {\n        parsedTechnology.quantity = chummerEntry.qty;\n    }\n\n    if (chummerEntry.cost) {\n        parsedTechnology.cost = parseFloat(chummerEntry.cost.replace(/[^\\d\\.\\-]/g, \"\"));\n    }\n\n    if (chummerEntry.equipped && chummerEntry.equipped.toLowerCase() === 'true') {\n        parsedTechnology.equipped = true;\n    }\n\n    if (chummerEntry.conditionmonitor) {\n        parsedTechnology.condition_monitor.max = Number(chummerEntry.conditionmonitor);\n    }\n\n    if (chummerEntry.conceal) {\n        parsedTechnology.conceal.base = Number(chummerEntry.conceal);\n    }\n\n    return parsedTechnology\n}\n\nexport const createItemData = (name, type, data) => {\n    return {\n        name: name,\n        _id: '',\n        folder: '',\n        flags: {},\n        img: 'icons/svg/mystery-man.svg',\n        type: type,\n        data,\n        permission: {\n            default: 2,\n        },\n    };\n}\n\n\n","import {CharacterInfoUpdater} from \"./CharacterInfoUpdater\"\nimport {ItemsParser} from \"./ItemsParser\"\n\n/**\n * Imports characters from other tools into an existing foundry actor.\n */\nexport class CharacterImporter {\n\n    /**\n     * Imports a chummer character into an existing actor. The actor will be updated. This might lead to duplicate items.\n     * @param {*} actor The actor that will be updated with the chummer character.\n     * @param {*} chummerFile The complete chummer file as json object. The first character will be selected for import.\n     * @param {*} importOptions Additional import option that specify what parts of the chummer file will be imported.\n     */\n    async importChummerCharacter(actor, chummerFile, importOptions) {\n        console.log('Importing the following character file content:');\n        console.log(chummerFile);\n\n        console.log('Using the following import options:')\n        console.log(importOptions);\n\n        if (!chummerFile.characters || !chummerFile.characters.character) {\n            console.log('Did not find a valid character to import  - aborting import');\n            return;\n        }\n\n        const chummerCharacter = chummerFile.characters.character;\n        const updatedActorData = new CharacterInfoUpdater().update(actor.data, chummerCharacter);\n        const items = new ItemsParser().parse(chummerCharacter, importOptions);\n\n\n        await actor.update(updatedActorData);\n        await actor.createEmbeddedDocuments('Item', items);\n    }\n}","import {_mergeWithMissingSkillFields} from \"../../actor/prep/functions/SkillsPrep\";\n\n/**\n * Parses all non-item character information from a chummer character object.\n */\nexport class CharacterInfoUpdater {\n\n    /**\n     *  Maps the chummer attribute name to our sr5-foundry attribute name\n     *  @param attName name of the chummer attribute\n     */\n    parseAttName = (attName) =>  {\n        if (attName.toLowerCase() === 'bod') {\n            return 'body';\n        }\n        if (attName.toLowerCase() === 'agi') {\n            return 'agility';\n        }\n        if (attName.toLowerCase() === 'rea') {\n            return 'reaction';\n        }\n        if (attName.toLowerCase() === 'str') {\n            return 'strength';\n        }\n        if (attName.toLowerCase() === 'cha') {\n            return 'charisma';\n        }\n        if (attName.toLowerCase() === 'int') {\n            return 'intuition';\n        }\n        if (attName.toLowerCase() === 'log') {\n            return 'logic';\n        }\n        if (attName.toLowerCase() === 'wil') {\n            return 'willpower';\n        }\n        if (attName.toLowerCase() === 'edg') {\n            return 'edge';\n        }\n        if (attName.toLowerCase() === 'mag') {\n            return 'magic';\n        }\n        if (attName.toLowerCase() === 'res') {\n            return 'resonance';\n        }\n    };\n\n    getArray = (value) => {\n        return Array.isArray(value) ? value : [value];\n    };\n\n\n    /**\n     *  Converts the chummer attribute value to our sr5-foundry attribute value\n     *  @param att the chummer attribute\n     */\n    parseAttBaseValue = (att) => {\n        if (att.name.toLowerCase() === 'edg') {\n            // The edge attribute value is stored in the \"base\" field instead of the total field\n            // In chummer, the \"total\" field is used for the amount of edge remaining to a character\n            return parseInt(att.base);\n        }\n        else {\n            return parseInt(att.total);\n        }\n    }\n\n    /**\n     * Parses the actor data from the chummer file and returns an updated clone of the actor data.\n     * @param {*} actorData The actor data (actor.data not actor.data.data) that is used as the basis for the import. Will not be changed.\n     * @param {*} chummerChar The chummer character to parse.\n     */\n    update(actorData, chummerChar) {\n\n        const clonedActorData = duplicate(actorData);\n\n        // Name is required, so we need to always set something (even if the chummer field is empty)\n        if (chummerChar.alias) {\n            clonedActorData.name = chummerChar.alias;\n        }\n        else {\n            clonedActorData.name = chummerChar.name ? chummerChar.name : '[Name not found]';\n        }\n\n        this.importBasicData(clonedActorData.data, chummerChar);\n        this.importBio(clonedActorData.data, chummerChar);\n        this.importAttributes(clonedActorData.data, chummerChar)\n        this.importInitiative(clonedActorData.data, chummerChar);\n        this.importSkills(clonedActorData.data, chummerChar);\n\n        return clonedActorData;\n    }\n\n    importBasicData(actorDataData, chummerChar) {\n\n        try {\n            if (chummerChar.playername) {\n                actorDataData.player_name = chummerChar.playername;\n            }\n            if (chummerChar.alias) {\n                actorDataData.name = chummerChar.alias;\n            }\n            if (chummerChar.metatype) {\n                actorDataData.metatype = chummerChar.metatype;\n            }\n            if (chummerChar.sex) {\n                actorDataData.sex = chummerChar.sex;\n            }\n            if (chummerChar.age) {\n                actorDataData.age = chummerChar.age;\n            }\n            if (chummerChar.height) {\n                actorDataData.height = chummerChar.height;\n            }\n            if (chummerChar.weight) {\n                actorDataData.weight = chummerChar.weight;\n            }\n            if (chummerChar.calculatedstreetcred) {\n                actorDataData.street_cred = chummerChar.calculatedstreetcred;\n            }\n            if (chummerChar.calculatednotoriety) {\n                actorDataData.notoriety = chummerChar.calculatednotoriety;\n            }\n            if (chummerChar.calculatedpublicawareness) {\n                actorDataData.public_awareness = chummerChar.calculatedpublicawareness;\n            }\n            if (chummerChar.karma) {\n                actorDataData.karma.value = chummerChar.karma;\n            }\n            if (chummerChar.totalkarma) {\n                actorDataData.karma.max = chummerChar.totalkarma;\n            }\n            if (chummerChar.technomancer && chummerChar.technomancer.toLowerCase() === 'true') {\n                actorDataData.special = 'resonance';\n            }\n            if (\n                (chummerChar.magician && chummerChar.magician.toLowerCase() === 'true') ||\n                (chummerChar.adept && chummerChar.adept.toLowerCase() === 'true')\n            ) {\n                actorDataData.special = 'magic';\n                let attr = [];\n                if (\n                    chummerChar.tradition &&\n                    chummerChar.tradition.drainattribute &&\n                    chummerChar.tradition.drainattribute.attr\n                ) {\n                    attr = chummerChar.tradition.drainattribute.attr;\n                } else if (chummerChar.tradition && chummerChar.tradition.drainattributes) {\n                    attr = chummerChar.tradition.drainattributes\n                        .split('+')\n                        .map((item) => item.trim());\n                }\n                attr.forEach((att) => {\n                    const attName = this.parseAttName(att);\n                    if (attName !== 'willpower') actorDataData.magic.attribute = att;\n                });\n            }\n            if (chummerChar.totaless) {\n                actorDataData.attributes.essence.value = chummerChar.totaless;\n            }\n            if (chummerChar.nuyen) {\n                actorDataData.nuyen = parseInt(chummerChar.nuyen.replace(',', ''));\n            }\n        } catch (e) {\n            console.error(`Error while parsing character information ${e}`);\n        }\n    }\n\n    importBio(actorDataData, chummerChar) {\n        actorDataData.description.value = '';\n\n        // Chummer outputs html and wraps every section in <p> tags,\n        // so we just concat everything with an additional linebreak in between\n        if (chummerChar.description) {\n            actorDataData.description.value += TextEditor.enrichHTML(chummerChar.description + '<br/>');\n        }\n\n        if (chummerChar.background) {\n            actorDataData.description.value += TextEditor.enrichHTML(chummerChar.background + '<br/>');\n        }\n\n        if (chummerChar.concept) {\n            actorDataData.description.value += TextEditor.enrichHTML(chummerChar.concept + '<br/>');\n        }\n\n        if (chummerChar.notes) {\n            actorDataData.description.value += TextEditor.enrichHTML(chummerChar.notes + '<br/>');\n        }\n    }\n\n    importAttributes(actorDataData, chummerChar) {\n        const atts = chummerChar.attributes[1].attribute;\n        atts.forEach((att) => {\n            try {\n                const attName = this.parseAttName(att.name);\n                if (attName) {\n                    actorDataData.attributes[attName].base = this.parseAttBaseValue(att);\n                }\n\n            } catch (e) {\n                console.error(`Error while parsing attributes ${e}`);\n            }\n        });\n    }\n\n    // TODO: These modifiers are very unclear in how they're used here and where they come from.\n    importInitiative(actorDataData, chummerChar) {\n        try {\n            actorDataData.modifiers.meat_initiative = chummerChar.initbonus;\n\n            // 'initdice' contains the total amount of initiative dice, not just the bonus.\n            actorDataData.modifiers.meat_initiative_dice = chummerChar.initdice - 1;\n        } catch (e) {\n            console.error(`Error while parsing initiative ${e}`);\n        }\n    }\n\n    importSkills(actorDataData, chummerChar) {\n        const chummerSkills = chummerChar.skills.skill;\n        for (let i = 0; i < chummerSkills.length; i++) {\n            try {\n                const chummerSkill = chummerSkills[i];\n                // NOTE: taMiF here: I have no idea what the general islanguage check has been added for.\n                //                   it MIGHT be in order to exclude skill groups or some such, but I haven't found a reason\n                //                   for it. Since it's working with it, I'll leave it to the pile. Warm your hands.\n                if (chummerSkill.rating > 0 && chummerSkill.islanguage) {\n                    let determinedGroup = 'active';\n                    let parsedSkill = null;\n\n                    // Either find an active skill are prepare knowledge skills.\n                    if (chummerSkill.islanguage && chummerSkill.islanguage.toLowerCase() === 'true') {\n                        const id = randomID(16);\n                        parsedSkill = {};\n                        actorDataData.skills.language.value[id] = parsedSkill;\n                        determinedGroup = 'language';\n                    }\n                    else if (chummerSkill.knowledge && chummerSkill.knowledge.toLowerCase() === 'true') {\n                        const id = randomID(16);\n                        const category = chummerSkill.skillcategory_english;\n                        parsedSkill = {};\n\n                        // Determine the correct knowledge skill category and assign the skill to it\n                        let skillCategory;\n                        if (category) {\n                            const cat = category.toLowerCase();\n                            if (cat === 'street')\n                                skillCategory = actorDataData.skills.knowledge.street.value;\n                            if (cat === 'academic')\n                                skillCategory = actorDataData.skills.knowledge.academic.value;\n                            if (cat === 'professional')\n                                skillCategory = actorDataData.skills.knowledge.professional.value;\n                            if (cat === 'interest')\n                                skillCategory = actorDataData.skills.knowledge.interests.value;\n                            if (skillCategory)\n                                skillCategory[id] = parsedSkill;\n                        }\n                        else {\n                            if (chummerSkill.attribute.toLowerCase() === 'int') {\n                                actorDataData.skills.knowledge.street.value[id] = parsedSkill;\n                            }\n                            if (chummerSkill.attribute.toLowerCase() === 'log') {\n                                actorDataData.skills.knowledge.professional.value[id] = parsedSkill;\n                            }\n                        }\n                        determinedGroup = 'knowledge';\n                    }\n                    else {\n                        let name = chummerSkill.name\n                            .toLowerCase()\n                            .trim()\n                            .replace(/\\s/g, '_')\n                            .replace(/-/g, '_');\n                        if (name.includes('exotic') && name.includes('_weapon'))\n                            name = name.replace('_weapon', '');\n                        if (name === 'pilot_watercraft')\n                            name = 'pilot_water_craft';\n                        parsedSkill = actorDataData.skills.active[name];\n                    }\n\n                    // Fill the found skill with a base rating.\n                    if (!parsedSkill) {\n                        console.error(`Couldn't parse skill ${chummerSkill.name}`);\n\n                    } else {\n                        if (determinedGroup !== 'active')\n                            parsedSkill.name = chummerSkill.name;\n                        parsedSkill.base = parseInt(chummerSkill.rating);\n\n                        if (chummerSkill.skillspecializations) {\n                            parsedSkill.specs = this.getArray(\n                                chummerSkill.skillspecializations.skillspecialization.name\n                            );\n                        }\n\n                        // Precaution to later only deal with complete SkillField data models.\n                        _mergeWithMissingSkillFields(parsedSkill);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n\n\n}\n\n","import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\n\nexport class ContactParser {\n    parseContacts(chummerChar) {\n        \n        const chummerContacts = getArray(chummerChar.contacts.contact);\n        const parsedContacts = [];\n\n        chummerContacts.forEach((chummerContact) => {\n            try {\n                const itemData = this.parseContact(chummerContact);\n                parsedContacts.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedContacts;\n    }\n\n    parseContact(chummerContact) {\n        const data = {};\n        data.type = chummerContact.role;\n\n        // Group contacts are stored in chummer as 'Group(connectionRating)', e.g. 'Group(5)'\n        // We handle group contacts as normal contacts until they are supported in the codebase.\n        if (chummerContact.connection.toLowerCase().includes('group')) {\n            data.connection = chummerContact.connection\n                .toLowerCase()\n                .replace('group(', '')\n                .replace(')', '');\n        }\n        else {\n            data.connection = chummerContact.connection;\n        }\n\n        data.loyalty = chummerContact.loyalty;\n        data.family = (chummerContact.family.toLowerCase() === 'true');\n        data.blackmail = (chummerContact.blackmail.toLowerCase() === 'true');\n        data.description = parseDescription(chummerContact);\n\n        const itemName = chummerContact.name ? chummerContact.name : '[Unnamed connection]';\n        const itemData = createItemData(itemName, 'contact', data);\n        return itemData;\n    }\n}","import { parseDescription, getArray, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\n\nexport class CyberwareParser {\n   \n    parseCyberwares(chummerChar) {\n        const chummerCyberwares = getArray(chummerChar.cyberwares.cyberware);\n        const parsedCyberware = [];\n        chummerCyberwares.forEach((chummerCyber) => {\n            try {\n                const itemData = this.parseCyberware(chummerCyber);\n                parsedCyberware.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedCyberware;\n    }\n\n    parseCyberware(chummerCyber) {\n        const data = {};\n        data.description = parseDescription(chummerCyber);\n        data.technology = parseTechnology(chummerCyber);\n        \n        // Cyberware has no equipped flag in chummer so it cannot be parsed - we consider it as always equipped\n        data.technology.equipped = true;\n        data.essence = chummerCyber.ess;\n        data.grade = chummerCyber.grade;\n\n        return createItemData(chummerCyber.name, 'cyberware', data);\n    }\n}","import { getArray } from \"./BaseParserFunctions.js\"\nimport { GearsParser } from \"./gearImport/GearsParser\"\nimport { ArmorParser } from \"./ArmorParser\";\nimport { CyberwareParser } from \"./CyberwareParser\";\nimport { QualityParser } from \"./QualityParser\";\nimport { PowerParser } from \"./PowerParser\";\nimport { SpellParser } from \"./SpellParser\";\nimport { WeaponParser } from \"./WeaponParser\";\nimport { LifestyleParser } from \"./LifestyleParser\";\nimport { ContactParser } from \"./ContactParser\";\n\n/**\n * Parses all items (qualities, weapons, gear, ...) from a chummer character.\n */\nexport class ItemsParser {\n\n    /**\n     * Parses all items from a chummer char and returns an array of the corresponding foundry items.\n     * @param {*} chummerChar The chummer char holding the items\n     * @param {*} importOptions Additional import option that specify what items will be imported.\n     */\n    parse(chummerChar, importOptions) {\n        const parsedItems = [];\n\n        if (importOptions.qualities && chummerChar.qualities && chummerChar.qualities.quality) {\n            const parsedQualities = new QualityParser().parseQualities(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedQualities);\n        }\n\n        if (importOptions.weapons && chummerChar.weapons != null && chummerChar.weapons.weapon != null) {\n            const parsedWeapons = new WeaponParser().parseWeapons(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedWeapons);\n        }\n\n        if (importOptions.armor && chummerChar.armors && chummerChar.armors.armor) {\n            const parsedArmors = new ArmorParser().parseArmors(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedArmors);\n        }\n\n        if (importOptions.cyberware && chummerChar.cyberwares && chummerChar.cyberwares.cyberware) {\n            const parsedCyberware = new CyberwareParser().parseCyberwares(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedCyberware);\n        }\n\n        if (importOptions.powers && chummerChar.powers && chummerChar.powers.power) {\n            const parsedPowers = new PowerParser().parsePowers(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedPowers);\n        }\n\n        if (importOptions.equipment && chummerChar.gears && chummerChar.gears.gear) {\n            const gears = getArray(chummerChar.gears.gear);\n            const allGearData = new GearsParser().parseGears(gears);\n            Array.prototype.push.apply(parsedItems, allGearData);\n        }\n\n        if (importOptions.spells && chummerChar.spells && chummerChar.spells.spell) {\n            const parsedSpells = new SpellParser().parseSpells(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedSpells);\n        }\n\n        if (importOptions.contacts && chummerChar.contacts && chummerChar.contacts.contact) {\n            const parsedContacts = new ContactParser().parseContacts(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedContacts);\n        }\n\n        if (importOptions.lifestyles && chummerChar.lifestyles && chummerChar.lifestyles.lifestyle) {\n            const parsedLifestyles = new LifestyleParser().parseLifestyles(chummerChar);\n            Array.prototype.push.apply(parsedItems, parsedLifestyles);\n        }\n\n        return parsedItems;\n    }\n}\n","import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\nimport {SR5} from \"../../config\"\n\nexport class LifestyleParser {\n    parseLifestyles(chummerChar) {\n        \n        const chummerLifestyle = getArray(chummerChar.lifestyles.lifestyle);\n        const parsedLifestyle = [];\n\n        chummerLifestyle.forEach((chummerLifestyle) => {\n            try {\n                const itemData = this.parseLifestyle(chummerLifestyle);\n                parsedLifestyle.push(itemData);\n            }\n             catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedLifestyle;\n    }\n\n    parseLifestyle(chummerLifestyle) {\n        const data = {};\n\n        // Advanced lifestyles and lifestyle qualities are not supported at the moment\n        // Map the chummer lifestyle type to our sr5 foundry type. \n        const chummerLifestyleType = chummerLifestyle.baselifestyle.toLowerCase();\n        if ((chummerLifestyleType in SR5.lifestyleTypes)) {\n            data.type = chummerLifestyleType;\n        }\n        else {\n            // This is necessary because of a typo in SR5 config.\n            if (chummerLifestyleType === 'luxury') {\n                data.type = 'luxory';\n            }\n            else {\n                data.type = 'other';\n            }\n        }\n\n        data.cost = chummerLifestyle.totalmonthlycost;\n        data.permanent = chummerLifestyle.purchased;\n        data.description = parseDescription(chummerLifestyle);\n\n        // The name of the lifestyle is optional, so we use a fallback here.\n        const itemName = chummerLifestyle.name ? chummerLifestyle.name : chummerLifestyle.baselifestyle;\n        const itemData = createItemData(itemName, 'lifestyle', data);\n        return itemData;\n    }\n}","import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\n\nexport class PowerParser {\n\n    parsePowers(chummerChar) {\n        const powers = getArray(chummerChar.powers.power);\n        const parsedPowers = [];\n\n        powers.forEach((chummerPower) => {\n            const itemData = this.parsePower(chummerPower);\n            parsedPowers.push(itemData);\n        });\n\n        return parsedPowers;\n    }\n\n    parsePower(chummerPower) {\n        const data = {};\n        data.description = parseDescription(chummerPower);\n\n        data.level = parseInt(chummerPower.rating);\n        data.pp = parseFloat(chummerPower.totalpoints);\n        const itemData = createItemData(chummerPower.fullname, 'adept_power', data);\n        return itemData;\n    }\n}","import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\nimport { DefaultValues } from \"../../data/DataDefaults\";\n\nexport class QualityParser {\n\n    parseQualities(chummerChar) {\n        const qualities = getArray(chummerChar.qualities.quality);\n        const parsedQualities = [];\n\n        qualities.forEach((chummerQuality) => {\n            try {\n                const itemData = this.parseQuality(chummerQuality);\n                parsedQualities.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedQualities;\n    }\n\n    parseQuality(chummerQuality) {\n        const data = DefaultValues.qualityData();\n        data.type = chummerQuality.qualitytype.toLowerCase();\n        data.description = parseDescription(chummerQuality);\n\n        const itemData = createItemData(chummerQuality.name, 'quality', data);\n        return itemData;\n    }\n}","import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\nimport { DefaultValues } from \"../../data/DataDefaults\";\n\nexport class SpellParser {\n    parseSpells(chummerChar) {\n        const spells = getArray(chummerChar.spells.spell);\n        const parsedSpells = [];\n        spells.forEach((chummerSpell) => {\n            try {\n                if (chummerSpell.alchemy.toLowerCase() !== 'true') {\n                    const itemData = this.parseSpell(chummerSpell);\n                    parsedSpells.push(itemData);\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedSpells;\n    }\n\n    parseSpell(chummerSpell) {\n        const action = {};\n        const data = {};\n        data.action = action;\n        data.category = chummerSpell.category.toLowerCase().replace(/\\s/g, '_');\n        data.name = chummerSpell.name;\n        data.type = chummerSpell.type === 'M' ? 'mana' : 'physical';\n        data.range =\n            chummerSpell.range === 'T'\n                ? 'touch'\n                : chummerSpell.range\n                        .toLowerCase()\n                        .replace(/\\s/g, '_')\n                        .replace('(', '')\n                        .replace(')', '');\n        data.drain = parseInt(chummerSpell.dv.replace('F', ''));\n        data.description = parseDescription(chummerSpell);\n\n        let description = '';\n        if (chummerSpell.descriptors) description = chummerSpell.descriptors;\n        if (chummerSpell.description) description += `\\n${chummerSpell.description}`;\n        data.description.value = TextEditor.enrichHTML(description);\n\n        if (chummerSpell.duration.toLowerCase() === 's') data.duration = 'sustained';\n        else if (chummerSpell.duration.toLowerCase() === 'i')\n            data.duration = 'instant';\n        else if (chummerSpell.duration.toLowerCase() === 'p')\n            data.duration = 'permanent';\n\n        action.type = 'varies';\n        action.skill = 'spellcasting';\n        action.attribute = 'magic';\n        action.damage = DefaultValues.damageData();\n        action.damage.type.base = '';\n        action.damage.type.value = '';\n\n        if (chummerSpell.descriptors) {\n            const desc = chummerSpell.descriptors.toLowerCase();\n            if (chummerSpell.category.toLowerCase() === 'combat') {\n                data.combat = {};\n                if (desc.includes('indirect')) {\n                    data.combat.type = 'indirect';\n                    action.opposed = {\n                        type: 'defense',\n                    };\n                } else {\n                    data.combat.type = 'direct';\n                    if (data.type === 'mana') {\n                        action.damage.type.base = 'stun';\n                        action.damage.type.value = 'stun';\n                        action.opposed = {\n                            type: 'soak',\n                            attribute: 'willpower',\n                        };\n                    } else if (data.type === 'physical') {\n                        action.damage.type.base = 'physical';\n                        action.damage.type.value = 'physical';\n                        action.opposed = {\n                            type: 'soak',\n                            attribute: 'body',\n                        };\n                    }\n                }\n            }\n            if (chummerSpell.category.toLowerCase() === 'detection') {\n                data.detection = {};\n                const split = desc.split(',');\n                split.forEach((token) => {\n                    token = token || '';\n                    token = token.replace(' detection spell', '');\n                    if (!token) return;\n                    if (token.includes('area')) return;\n\n                    if (token.includes('passive'))\n                        data.detection.passive = true;\n                    else if (token.includes('active'))\n                        data.detection.passive = false;\n                    else if (token)\n                        data.detection.type = token.toLowerCase();\n                });\n                if (!data.detection.passive) {\n                    action.opposed = {\n                        type: 'custom',\n                        attribute: 'willpower',\n                        attribute2: 'logic',\n                    };\n                }\n            }\n            if (chummerSpell.category.toLowerCase() === 'illusion') {\n                data.illusion = {};\n                const split = desc.split(',');\n                split.forEach((token) => {\n                    token = token || '';\n                    token = token.replace(' illusion spell', '');\n                    if (!token) return;\n                    if (token.includes('area')) return;\n\n                    if (token.includes('sense'))\n                        data.illusion.sense = token.toLowerCase();\n                    else if (token)\n                        data.illusion.type = token.toLowerCase();\n                });\n                if (data.type === 'mana') {\n                    action.opposed = {\n                        type: 'custom',\n                        attribute: 'willpower',\n                        attribute2: 'logic',\n                    };\n                } else {\n                    action.opposed = {\n                        type: 'custom',\n                        attribute: 'intuition',\n                        attribute2: 'logic',\n                    };\n                }\n            }\n            if (chummerSpell.category.toLowerCase() === 'manipulation') {\n                data.manipulation = {};\n                if (desc.includes('environmental'))\n                    data.manipulation.environmental = true;\n                if (desc.includes('physical'))\n                    data.manipulation.physical = true;\n                if (desc.includes('mental'))\n                    data.manipulation.mental = true;\n                // TODO figure out how to parse damaging\n\n                if (data.manipulation.mental) {\n                    action.opposed = {\n                        type: 'custom',\n                        attribute: 'willpower',\n                        attribute2: 'logic',\n                    };\n                }\n                if (data.manipulation.physical) {\n                    action.opposed = {\n                        type: 'custom',\n                        attribute: 'body',\n                        attribute2: 'strength',\n                    };\n                }\n            }\n        }\n\n        return createItemData(chummerSpell.name, 'spell', data);\n    }\n}","import { parseDescription, getArray, getValues, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\n\nexport class WeaponParser {\n    parseDamage = (val) => {\n        const damage = {\n            damage: 0,\n            type: 'physical',\n            radius: 0,\n            dropoff: 0,\n        };\n        const split = val.split(',');\n        if (split.length > 0) {\n            const l = split[0].match(/(\\d+)(\\w+)/);\n            if (l && l[1]) damage.damage = parseInt(l[1]);\n            if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\n        }\n        for (let i = 1; i < split.length; i++) {\n            const l = split[i].match(/(-?\\d+)(.*)/);\n            if (l && l[2]) {\n                if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\n                else damage.radius = parseInt(l[1]);\n            }\n        }\n        return damage;\n    };\n\n    parseWeapons(chummerChar) {\n        const weapons = getArray(chummerChar.weapons.weapon);\n        const parsedWeapons = [];\n\n        weapons.forEach((chummerWeapon) => {\n            try {\n                const itemData = this.parseWeapon(chummerWeapon);\n                parsedWeapons.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n    \n        return parsedWeapons;\n    }\n\n    parseWeapon(chummerWeapon) {\n        const data = {};\n        const action = {};\n        const damage = {};\n        action.damage = damage;\n        data.action = action;\n\n        data.description = parseDescription(chummerWeapon);\n        data.technology = parseTechnology(chummerWeapon);\n\n        damage.ap = {\n            base: parseInt(getValues(chummerWeapon.ap)[0])\n        };\n        action.type = 'varies';\n        if (chummerWeapon.skill)\n            action.skill = chummerWeapon.skill.toLowerCase().replace(/\\s/g, '_');\n        else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('exotic'))\n            action.skill = chummerWeapon.category\n                .toLowerCase()\n                .replace(' weapons', '')\n                .replace(/\\s/g, '_');\n        if (action.skill.includes('exotic'))\n            action.skill = action.skill.replace('_weapon', '');\n        action.attribute = 'agility';\n        action.limit = {\n            base: parseInt(getValues(chummerWeapon.accuracy)[0])\n        };\n        action.opposed = {\n            type: 'defense',\n        };\n\n        if (chummerWeapon.type.toLowerCase() === 'melee') {\n            action.type = 'complex';\n            data.category = 'melee';\n            const melee = {};\n            data.melee = melee;\n            melee.reach = parseInt(chummerWeapon.reach);\n        } else if (chummerWeapon.type.toLowerCase() === 'ranged') {\n            data.category = 'range';\n            if (chummerWeapon.skill.toLowerCase().includes('throw')) {\n                data.category = 'thrown'; // TODO clean this up\n            }\n            const range = {};\n            data.range = range;\n            range.rc = {\n                base: parseInt(getValues(chummerWeapon.rc)[0]),\n            };\n            if (chummerWeapon.mode) {\n                // HeroLab export doesn't have mode\n                const lower = chummerWeapon.mode.toLowerCase();\n                range.modes = {\n                    single_shot: lower.includes('ss'),\n                    semi_auto: lower.includes('sa'),\n                    burst_fire: lower.includes('bf'),\n                    full_auto: lower.includes('fa'),\n                };\n            }\n            if (chummerWeapon.clips != null && chummerWeapon.clips.clip != null) {\n                // HeroLab export doesn't have clips\n                const clips = Array.isArray(chummerWeapon.clips.clip)\n                    ? chummerWeapon.clips.clip\n                    : [chummerWeapon.clips.clip];\n                clips.forEach((clip) => {\n                    console.log(clip);\n                });\n            }\n            if (chummerWeapon.ranges &&\n                chummerWeapon.ranges.short &&\n                chummerWeapon.ranges.medium &&\n                chummerWeapon.ranges.long &&\n                chummerWeapon.ranges.extreme) {\n                console.log(chummerWeapon.ranges);\n                range.ranges = {\n                    short: parseInt(chummerWeapon.ranges.short.split('-')[1]),\n                    medium: parseInt(chummerWeapon.ranges.medium.split('-')[1]),\n                    long: parseInt(chummerWeapon.ranges.long.split('-')[1]),\n                    extreme: parseInt(chummerWeapon.ranges.extreme.split('-')[1]),\n                };\n            }\n            // TODO figure out how to add mods to weapons\n            // if (w.accessories && w.accessories.accessory) {\n            //     range.mods = [];\n            //     const accessories = getArray(w.accessories.accessory);\n            //     accessories.forEach((a) => {\n            //         if (a) {\n            //             range.mods.push({\n            //                 name: a.name,\n            //             });\n            //         }\n            //     });\n            // }\n        } else if (chummerWeapon.type.toLowerCase() === 'thrown') {\n            data.category = 'thrown';\n        }\n        {\n            // TODO handle raw damage if present\n            const d = this.parseDamage(chummerWeapon.damage_english);\n            damage.base = d.damage;\n            damage.type = {};\n            damage.type.base = d.type;\n            if (d.dropoff || d.radius) {\n                const thrown = {};\n                data.thrown = thrown;\n                thrown.blast = {\n                    radius: d.radius,\n                    dropoff: d.dropoff,\n                };\n            }\n        }\n\n        const itemData = createItemData(chummerWeapon.name, 'weapon', data);\n        return itemData;\n    }\n}","import { BaseGearParser } from \"./BaseGearParser\"\n\n/**\n * Parses ammunition\n */\nexport class AmmoParser extends BaseGearParser {\n   \n    parse(chummerGear : any) : any {\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = 'ammo';\n\n        if (chummerGear.weaponbonusap) {\n            parsedGear.data.ap = parseInt(chummerGear.weaponbonusap);\n        }\n\n        if (chummerGear.weaponbonusdamage) {\n            parsedGear.data.damage = parseInt(chummerGear.weaponbonusdamage);\n\n            if (chummerGear.weaponbonusdamage.includes('P')) {\n                parsedGear.data.damageType = 'physical';\n            } else if (chummerGear.weaponbonusdamage.includes('S')) {\n                parsedGear.data.damageType = 'stun';\n            } else if (chummerGear.weaponbonusdamage.includes('M')) {\n                parsedGear.data.damageType = 'matrix';\n            }\n            else {\n                parsedGear.data.damageType = 'physical';\n            }\n        }\n\n        return parsedGear;\n    }\n}","import { parseDescription, parseTechnology } from \"../BaseParserFunctions.js\"\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\nimport {DefaultValues} from \"../../../data/DataDefaults\";\n\n\n/**\n * Parses a certain class of gear (depending on the implementation).\n */\nexport interface GearParser {\n    /**\n     * Parses a gear entry and returns the corresponding foundry sr item data.\n     * @param chummerGear A chummer gear entry\n     */\n    parse(chummerGear : any) : any\n}\n\n/**\n * Base class for all gear parsers. Parses common information across all gear.\n */\nexport class BaseGearParser implements GearParser {\n    parse(chummerGear : any) : any {\n        const parsedGear = this.getDefaultData();\n        parsedGear.name = chummerGear.name;\n        if (chummerGear.extra)\n        {\n            parsedGear.name += ` (${chummerGear.extra})`;\n        }\n\n        parsedGear.data.technology = parseTechnology(chummerGear);\n        parsedGear.data.description = parseDescription(chummerGear);\n\n        return parsedGear;\n    }\n\n    private getDefaultData() : EquipmentItemData {\n        return {\n            name: '',\n            _id: '',\n            folder: '',\n            flags: {},\n            img: 'icons/svg/mystery-man.svg',\n            type: 'equipment',\n            data: DefaultValues.equipmentData(),\n            permission: {\n                default: 2,\n            },\n            effects: [],\n            sort: 0\n        };\n    }\n}\n\n","import { BaseGearParser } from \"./BaseGearParser\"\n\n/**\n * Parses devices (commlinks and decks)\n */\nexport class DeviceParser extends BaseGearParser {\n   \n    parse(chummerGear : any) : any {\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = 'device';\n        parsedGear.data.technology.rating = chummerGear.devicerating;\n\n        parsedGear.data.atts = {\n            att1:\n            {\n                value: chummerGear.attack,\n                att: 'attack'\n            },\n\n            att2:\n            {\n                value: chummerGear.sleaze,\n                att: 'sleaze'\n            },\n\n            att3:\n            {\n                value: chummerGear.dataprocessing,\n                att: 'data_processing'\n            },\n\n            att4:\n            {\n                value: chummerGear.firewall,\n                att: 'firewall'\n            } \n        };\n\n        if (chummerGear.category === 'Cyberdecks')\n        {\n            parsedGear.data.category = 'cyberdeck';\n        }\n\n        if (chummerGear.category === 'Commlinks')\n        {\n            parsedGear.data.category = 'commlink';\n        }\n\n        if (chummerGear.category === 'Rigger Command Consoles')\n        {\n            // We are handling rccs as commlinks for the moment since we have no support for rigger command consoles yet.\n            parsedGear.data.category = 'commlink'; \n        }\n\n        return parsedGear;\n    }\n}","import { ParserSelector } from \"./ParserSelector\";\n\n/**\n * Parses all gear from a chummer character file and turns them into foundry sr item data objects\n */\nexport class GearsParser {\n\n    /**\n     * Parses all chummer gear entries\n     * @param chummerGears Array of chummer gear entries\n     */\n    parseGears(chummerGears : any) : any {\n        let items : any[] = [];\n\n        chummerGears.forEach((chummerGear) => {\n            try {\n                // First filter out gear entries, that we do not want to handle.\n                if (!this.gearShouldBeParsed(chummerGear)) {\n                    return;\n                }\n\n                const itemsData = this.parseGearEntry(chummerGear);\n                items.push(itemsData);\n            }\n\n            catch (e) {\n                console.error(e);\n            }\n        });\n\n        return items;\n    }\n\n    private parseGearEntry(chummerGear : any) : any {\n        const parserSelector = new ParserSelector();\n        const parser = parserSelector.select(chummerGear);\n        return parser.parse(chummerGear);\n    }\n\n    private gearShouldBeParsed(chummerGear : any) : boolean {\n        // We do not handle grenades and rockets here since they are also in the weapons section with more info.\n        const englishGearName = (chummerGear.name_english as string).toLowerCase();\n        if (englishGearName.startsWith('grenade') || \n            englishGearName.startsWith('minigrenade') || \n            englishGearName.startsWith('rocket'))\n        {\n            return false;\n        }\n\n        return true;\n    }\n}\n","import { GearParser, BaseGearParser } from \"./BaseGearParser\";\nimport { SinParser } from \"./SinParser\";\nimport { DeviceParser } from \"./DeviceParser\";\nimport { ProgramParser } from \"./ProgramParser\";\nimport { AmmoParser } from \"./AmmoParser\";\n\n/**\n * Responsible for selecting the correct GearParser depending on the gear.\n */\nexport class ParserSelector {\n\n    /**\n     * Selects the correct GearParser depending on the gear.\n     * @param chummerGear The gear that needs to be parsed\n     * The correct GearParser for this gear entry.\n     */ \n    select(chummerGear : any) : GearParser {\n        if (chummerGear.issin === 'True')\n        {\n            return new SinParser();\n        }\n\n        if (chummerGear.iscommlink === 'True')\n        {\n            return new DeviceParser();\n        }\n\n        if (chummerGear.isammo === 'True')\n        {\n            return new AmmoParser();\n        }\n\n        if (chummerGear.category === 'Common Programs' || \n            chummerGear.category === 'Hacking Programs' || \n            chummerGear.category === 'Software')\n        {\n            return new ProgramParser();\n        }\n\n        return new BaseGearParser();\n    }\n}","import { BaseGearParser } from \"./BaseGearParser\"\n\n/**\n * Parses common, hacking and agent programs.\n */\nexport class ProgramParser extends BaseGearParser {\n    parse(chummerGear : any) : any {\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = 'program';\n\n        if (chummerGear.category === 'Common Programs')\n        {\n            parsedGear.data.type = 'common_program'\n        }\n        else if (chummerGear.category === 'Hacking Programs')\n        {\n            parsedGear.data.type = 'hacking_program'\n        } \n        else if (chummerGear.category === 'Software')\n        {\n            parsedGear.data.type = 'agent'\n        }\n\n        return parsedGear;\n    }\n}","import { BaseGearParser } from \"./BaseGearParser\"\n\n/**\n * Parses SINs and the attached licenses.\n * Licenses that are not attached to a SIN are not handled.\n */\nexport class SinParser extends BaseGearParser {\n    parse(chummerGear : any) : any {\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = 'sin';\n\n        // Create licenses if there are any\n        if (chummerGear.children) {\n\n            // \"gear\" is either  a single gear entry or an array of gear entries depending on the number of licenses\n            const chummerLicenses : any[] = [];\n            if (!Array.isArray(chummerGear.children.gear)) {\n                chummerLicenses.push(chummerGear.children.gear)\n            }\n            else {\n                chummerLicenses.push(...chummerGear.children.gear);\n            }\n\n            parsedGear.data.licenses = this.parseLicenses(chummerLicenses);\n        }\n        return parsedGear;\n    }\n\n    private parseLicenses(chummerLicenses : any) : any[] {\n        const parsedLicenses : any[] = []; \n\n        chummerLicenses.forEach(chummerLicense => {\n            if (chummerLicense.category === 'ID/Credsticks')\n            {\n                parsedLicenses.push(\n                    {\n                        name: chummerLicense.extra, // 'extra' holds the type of license from chummer\n                        rtg: chummerLicense.rating,\n                        description: ''\n                    }\n                );\n            }\n        });\n\n        return parsedLicenses;\n    }\n}\n","import {_mergeWithMissingSkillFields} from \"../actor/prep/functions/SkillsPrep\";\nimport {CharacterImporter} from \"./characterImport/CharacterImporter\"\n\nexport class ChummerImportForm extends FormApplication {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'chummer-import';\n        options.classes = ['shadowrun5e'];\n        options.title = 'Chummer/Hero Lab Import';\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    getData() {\n        return {};\n    }\n\n    activateListeners(html) {\n        html.find('.submit-chummer-import').click(async (event) => {\n            event.preventDefault();\n\n            const chummerFile = JSON.parse($('.chummer-text').val());\n            const importOptions = {\n                weapons: $('.weapons').is(':checked'),\n                armor: $('.armor').is(':checked'),\n                cyberware: $('.cyberware').is(':checked'),\n                equipment: $('.gear').is(':checked'),\n                qualities: $('.qualities').is(':checked'),\n                powers: $('.powers').is(':checked'),\n                spells: $('.spells').is(':checked'),\n                contacts: $('.contacts').is(':checked'),\n                lifestyles: $('.lifestyles').is(':checked'),\n            }\n\n            const importer = new CharacterImporter();\n            await importer.importChummerCharacter(this.object, chummerFile, importOptions);\n\n            ui.notifications?.info(\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\n            );\n            this.close();\n        });\n    }\n}\n","import {FormDialog, FormDialogData} from \"./FormDialog\";\nimport DamageData = Shadowrun.DamageData;\nimport {SR5Actor} from \"../../actor/SR5Actor\";\n\nexport class DamageApplicationDialog extends FormDialog {\n\n    constructor(actors : SR5Actor[], damage: DamageData, options?: Application.Options) {\n        const dialogData = DamageApplicationDialog.getDialogData(actors, damage);\n        super(dialogData, options);\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'damage-application';\n        // TODO: Class Dialog here is needed for dialog button styling.\n        options.classes = ['sr5', 'form-dialog'];\n        options.resizable = true;\n        options.height = 'auto';\n        return options; \n    }\n\n    static getDialogData(actors : SR5Actor[], damage: DamageData): FormDialogData {\n        const title = game.i18n.localize('SR5.DamageApplication.Title');\n        const templatePath = 'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html';\n\n        // Simplify / refactor this\n        const actorDamage : any = actors.map(a => { return {actor:a} }) ;\n        const templateData = {\n            damage,\n            actorDamage,\n        };\n\n        const buttons = {\n            damage: {\n                label: game.i18n.localize('SR5.DamageApplication.ApplyDamage')\n            }\n        }\n\n        const onAfterClose = () => actorDamage;\n\n        return {\n            title,\n            templatePath,\n            templateData,\n            onAfterClose,\n            buttons,\n            default: 'damage'\n        }\n    }\n}","import {FormDialog} from \"./FormDialog\";\n\nexport class DeleteConfirmationDialog extends FormDialog {\n    constructor(options?: Application.Options) {\n        const dialogData = DeleteConfirmationDialog.getDialogData();\n\n        super(dialogData, options)\n    }\n\n    static getDialogData() {\n        return {\n            title: game.i18n.localize(\"SR5.DeleteConfirmationApplication.Title\"),\n            buttons: {\n                delete: {\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Delete')\n                },\n                cancel: {\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Cancel')\n                }\n            },\n            default: 'cancel',\n            templateData: {},\n            templatePath: 'systems/shadowrun5e/dist/templates/apps/dialogs/delete-confirmation-dialog.html'\n        }\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'delete-confirmation-application';\n        // Class Dialog here is needed for dialog button styling.\n        options.classes = ['sr5', 'form-dialog'];\n        options.resizable = true;\n        options.height = 'auto';\n        return options;\n    }\n}","export interface FormDialogData {\n    title?: string;\n\tbuttons: Record<string, DialogButton>;\n\tdefault?: string;\n\ttemplateData: object;\n\ttemplatePath: string;\n\tonAfterClose?: Function;\n}\n\n/** TODO: Documentation with usage example\n *  TODO: Rework getDialogData approach with the general getData Application style,\n *        to allow rerender from within the Dialog instance without external data\n *        reinitialization.\n *        This would for things like updating a dialog based on currently selected tokens\n *        without reopening.\n */\nexport class FormDialog extends Dialog {\n    selection: object;\n    selectedButton: string;\n\n    _onAfterClose: Function;\n    _selectionPromise: Promise<object>;\n    _selectionResolve: Function;\n    _selectionReject: Function;\n    _templateData: object;\n    _templatePath: string;\n\n    constructor(dialogData: FormDialogData, options?: Application.Options) {\n        // @ts-ignore\n        super(dialogData, options);\n\n        const {templateData, templatePath} = dialogData;\n        this._templateData = templateData;\n        this._templatePath = templatePath;\n\n        this._onAfterClose = dialogData.onAfterClose ? dialogData.onAfterClose : () => {};\n\n        this.selection = this._emptySelection();\n\n        this._selectionPromise = new Promise((resolve, reject) => {\n            this._selectionResolve = resolve;\n            // Reject is stored, but never used in favor of FormDialog.canceled\n            this._selectionReject = reject;\n        });\n\n        this._amendButtonsWithName();\n    }\n\n    async close() {\n        await super.close();\n\n        if (this.canceled) {\n            this._selectionResolve(this.selection);\n        }\n    }\n\n    async submit(button) {\n        this.selectedButton = button.name ?? button.label;\n\n        super.submit(button);\n        // @ts-ignore\n        await this.afterSubmit(\"jQuery\" in this.options ? this.element : this.element [0]);\n    }\n\n    async afterSubmit(html: JQuery) {\n        // Await in case of a possible async handler.\n        this.selection = await this._onAfterClose(html, this.selectedButton);\n        this._selectionResolve(this.selection);\n    }\n\n    // @ts-ignore\n    async getData() {\n        const content = await renderTemplate(this._templatePath, this._templateData);\n        // @ts-ignore\n        return mergeObject(super.getData(), {\n            content\n        });\n    }\n\n    async select(): Promise<any> {\n        await this.render(true);\n\n        if (this._selectionPromise === undefined || this.selection === undefined) {\n            return this._emptySelection();\n        }\n        return await this._selectionPromise;\n    }\n\n    _emptySelection(): object {\n        return {};\n    }\n\n    /** Dialog has been confirmed and something has been selected.\n     */\n    get selected(): boolean {\n        return !this.canceled;\n    }\n\n    /** Dialog has been canceled and nothing has been selected\n     */\n    get canceled(): boolean {\n        return !this.selectedButton;\n    }\n\n    /** @override */\n    static getButtons(): Record<string, DialogButton> {\n        return {};\n    }\n\n    /** Allow for the selected button to be addressed by it's key, not it's localized label.\n     */\n    _amendButtonsWithName() {\n        //@ts-ignore\n        Object.keys(this.data.buttons).forEach(name => this.data.buttons[name].name = name);\n    }\n}","import {FormDialog, FormDialogData} from \"./FormDialog\";\nimport {SR5Actor} from \"../../actor/SR5Actor\";\nimport {PartsList} from \"../../parts/PartsList\";\nimport {Helpers} from \"../../helpers\";\nimport {SkillFlow} from \"../../actor/flows/SkillFlow\";\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\nimport ModList = Shadowrun.ModList;\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\nimport SkillDialogOptions = Shadowrun.SkillDialogOptions;\nimport CombatData = Shadowrun.CombatData;\nimport DamageType = Shadowrun.DamageType;\nimport {SR5} from \"../../config\";\n\nexport class ShadowrunActorDialogs {\n    static async createDefenseDialog(actor: SR5Actor, options: DefenseRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\n        const defenseDialogData = ShadowrunActorDialogs.getDefenseDialogData(actor, options, partsProps);\n\n        return new FormDialog(defenseDialogData);\n    }\n\n    static async createSoakDialog(options: SoakRollOptions, soakParts: PartsList<number>): Promise<FormDialog> {\n        const soakDialogData = ShadowrunActorDialogs.getSoakDialogData(options, soakParts);\n        return new FormDialog(soakDialogData);\n    }\n\n    static async createSkillDialog(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): Promise<FormDialog> {\n        const skillDialogData = ShadowrunActorDialogs.getSkillDialogData(actor, options, partsProps);\n\n        return new FormDialog(skillDialogData);\n    }\n\n    static getDefenseDialogData(actor: SR5Actor,  options: DefenseRollOptions, partsProps: ModList<number>): FormDialogData {\n        const title = game.i18n.localize('SR5.Defense');\n\n        const activeDefenses = {\n            full_defense: {\n                label: 'SR5.FullDefense',\n                value: actor.getFullDefenseAttribute()?.value,\n                initMod: -10,\n            },\n            dodge: {\n                label: 'SR5.Dodge',\n                value: actor.findActiveSkill('gymnastics')?.value,\n                initMod: -5,\n            },\n            block: {\n                label: 'SR5.Block',\n                value: actor.findActiveSkill('unarmed_combat')?.value,\n                initMod: -5,\n            },\n        };\n\n        const equippedMeleeWeapons = actor.getEquippedWeapons().filter((w) => w.isMeleeWeapon());\n        let defenseReach = 0;\n        equippedMeleeWeapons.forEach((weapon) => {\n            activeDefenses[`parry-${weapon.name}`] = {\n                label: 'SR5.Parry',\n                weapon: weapon.name,\n                value: actor.findActiveSkill(weapon.getActionSkill())?.value,\n                init: -5,\n            };\n            defenseReach = Math.max(defenseReach, weapon.getReach());\n        });\n\n        const parts = new PartsList(partsProps);\n        actor._addDefenseParts(parts);\n\n        // if we are defending a melee attack\n        if (options.attack?.reach) {\n            const incomingReach = options.attack.reach;\n            const netReach = defenseReach - incomingReach;\n            if (netReach !== 0) {\n                parts.addUniquePart('SR5.Reach', netReach);\n            }\n        }\n\n        const buttons = {\n            continue: {\n                label: game.i18n.localize('SR5.Continue'),\n                callback: () => {},\n            },\n        };\n\n        const onAfterClose = (html) => {\n            const cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\n            const special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\n            // Zero to indicate no initiative result change.\n            const combat: CombatData = {};\n\n            if (cover) {\n                parts.addUniquePart('SR5.Cover', cover)\n            }\n            if (special) {\n                // Defense pool modifier\n                const defense = activeDefenses[special];\n                parts.addUniquePart(defense.label, defense.value);\n\n                // Combat initiative modifier\n                combat.initiative = defense.initMod;\n            }\n\n            return {cover, special, parts, combat};\n        }\n\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\n        const templateData = {\n            parts: parts.getMessageOutput(),\n            cover: options.cover,\n            activeDefenses\n        };\n\n        return {\n            title,\n            templateData,\n            templatePath,\n            buttons,\n            onAfterClose\n        }\n    }\n\n\n    static getSoakDialogData(soakRollOptions: SoakRollOptions, soakParts : PartsList<number>): FormDialogData {\n        const title = game.i18n.localize('SR5.DamageResistanceTest');\n\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\n        const templateData = {\n            damage: soakRollOptions?.damage,\n            parts: soakParts.getMessageOutput(),\n            elementTypes: SR5.elementTypes,\n            damageTypes: SR5.damageTypes\n        };\n\n        const buttons =  {\n            continue: {\n                label: game.i18n.localize('SR5.Continue'),\n                callback: () => {},\n            },\n        };\n\n        const onAfterClose = (html: JQuery) => {\n            const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\n            const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\n            const element = Helpers.parseInputToString($(html).find('[name=element]').val());\n            const damageType = Helpers.parseInputToString($(html).find('[name=damageType]').val()) as DamageType;\n\n            return {incomingDamage, damageType, ap, element};\n        }\n\n        return {\n            title,\n            templatePath,\n            templateData,\n            buttons,\n            onAfterClose\n        }\n    }\n\n    static getSkillDialogData(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): FormDialogData {\n        const title = game.i18n.localize(options.skill.label || options.skill.name);\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/skill-roll.html';\n\n        const attributes = actor.getAttributes();\n        const attribute = actor.getAttribute(options.attribute ? options.attribute : options.skill.attribute);\n        const limits = actor.getLimits();\n\n        const templateData = {\n            attribute: options.skill.attribute,\n            attributes: Helpers.filter(attributes, ([, value]) => value.value > 0),\n            limit: attribute.limit,\n            limits\n        }\n\n\n        const buttons = {\n            roll: {\n                label: game.i18n.localize('SR5.NormalSkillButton'),\n                callback: () => {},\n            },\n        };\n        // add specializations to dialog as buttons\n        if (options.skill.specs?.length) {\n            options.skill.specs.forEach(\n                (spec) =>\n                    (buttons[spec] = {\n                        label: spec,\n                        callback: () => {},\n                    }),\n            );\n        }\n\n        const onAfterClose = (html: JQuery, selectedButton) => {\n            const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\n            const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\n            const attribute = actor.getAttribute(newAtt);\n            const limit = actor.getLimit(newLimit);\n            // Legacy skills have a label, but no name. Custom skills have a name but no label.\n            const skillLabel = game.i18n.localize(options.skill.label || options.skill.name);\n            const attributeLabel = game.i18n.localize(SR5.attributes[newAtt]);\n            const testLabel = game.i18n.localize('SR5.Test')\n\n            const skillTestTitle = `${skillLabel} + ${attributeLabel} ${testLabel}`;\n\n            partsProps.addUniquePart(attribute.label, attribute.value);\n\n            SkillFlow.handleDefaulting(options.skill, partsProps);\n\n            // Possible specialization based on button label.\n            const isSpecialization = options.skill.specs.includes(selectedButton);\n            if (isSpecialization) {\n                partsProps.addUniquePart('SR5.Specialization', 2);\n            }\n\n            return {\n                title: skillTestTitle,\n                attribute,\n                limit,\n                skill: options.skill,\n                parts: partsProps\n            }\n        }\n\n        return {\n            title,\n            templatePath,\n            templateData,\n            buttons,\n            onAfterClose\n        }\n    }\n}","import {SR5Item} from '../../item/SR5Item';\nimport {Helpers} from '../../helpers';\nimport {LENGTH_UNIT, SR} from \"../../constants\";\nimport {SR5Actor} from \"../../actor/SR5Actor\";\nimport FireModeData = Shadowrun.FireModeData;\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\nimport RangeData = Shadowrun.RangeData;\nimport {FormDialog} from \"./FormDialog\";\nimport WeaponData = Shadowrun.WeaponData;\nimport {SR5} from \"../../config\";\n\ntype ItemDialogData = {\n    dialogData: Dialog.Data | undefined,\n    getActionTestData: Function | undefined,\n    itemHasNoDialog: boolean\n};\n\nexport type RangedWeaponActionTestData = {\n    environmental: {\n        range?: number\n    },\n    fireMode: FireModeData,\n}\n\nexport type SpellActionTestData = {\n    force: number,\n    reckless: boolean,\n}\n\nexport type ComplexFormTestData = {\n    level: number\n}\n\nexport type ActionTestData = {\n    rangedWeapon?: RangedWeaponActionTestData,\n    spell?: SpellActionTestData,\n    complexForm?: ComplexFormTestData,\n    targetId?: string\n}\n\n\nexport class ShadowrunItemDialog {\n    static async create(item: SR5Item, event?: MouseEvent): Promise<FormDialog|undefined> {\n\n        if (item.isRangedWeapon()) {\n            return ShadowrunItemDialog.createRangedWeaponDialog(item, event);\n        }\n\n        if (item.isSpell()) {\n            return ShadowrunItemDialog.createSpellDialog(item, event);\n        }\n\n        if (item.isComplexForm()) {\n            return ShadowrunItemDialog.createComplexFormDialog(item, event);\n        }\n    }\n\n    static async createRangedWeaponDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\n        const dialogData = {title: item.name,\n                            event,\n        } as unknown as Dialog.Data;\n\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/range-weapon-roll.html';\n\n        // Prepare template data for display.\n        const modifiers = await item.actor.getModifiers();\n\n        // Disable manual range selection when a overwrite is set.\n        const targetRange = modifiers.environmental.active.range;\n        const disableTargetRange = modifiers.hasActiveEnvironmentalOverwrite;\n\n        const templateData = {\n            targetRange,\n            disableTargetRange\n        };\n        const onAfterClose = ShadowrunItemDialog.addRangedWeaponData(templateData, dialogData, item);\n\n        dialogData['templateData'] = templateData;\n        dialogData['templatePath'] = templatePath;\n        dialogData['onAfterClose'] = onAfterClose;\n\n        //@ts-ignore\n        return new FormDialog(dialogData);\n    }\n\n    static async createSpellDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\n        const dialogData = {title: item.name,\n                            event,\n        } as unknown as Dialog.Data;\n\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-spell.html';\n        const templateData = {};\n        const onAfterClose = ShadowrunItemDialog.addSpellData(templateData, dialogData, item);\n\n        dialogData['templateData'] = templateData;\n        dialogData['templatePath'] = templatePath;\n        dialogData['onAfterClose'] = onAfterClose;\n\n        //@ts-ignore\n        return new FormDialog(dialogData);\n    }\n\n    static async createComplexFormDialog(item: SR5Item, event?: MouseEvent): Promise<FormDialog> {\n        const dialogData = {title: item.name,\n                            event,\n        } as unknown as Dialog.Data;\n\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-complex-form.html';\n        const templateData = {};\n        const onAfterClose = ShadowrunItemDialog.addComplexFormData(templateData, dialogData, item);\n\n        dialogData['templateData'] = templateData;\n        dialogData['templatePath'] = templatePath;\n        dialogData['onAfterClose'] = onAfterClose;\n\n        //@ts-ignore\n        return new FormDialog(dialogData);\n    }\n\n    static addComplexFormData(templateData: object, dialogData: Dialog.Data, item: SR5Item): Function {\n        const fade = item.getFade();\n        const title = `${Helpers.label(item.name)} Level`;\n\n        const level = item.getLastComplexFormLevel()?.value || 2 - fade;\n\n        templateData['fade'] = fade >= 0 ? `+${fade}` : fade;\n        templateData['level'] = level;\n        templateData['title'] = title;\n\n        let cancel = true;\n        dialogData.buttons = {\n            roll: {\n                label: 'Continue',\n                icon: '<i class=\"fas fa-dice-six\"></i>',\n                callback: () => (cancel = false),\n            },\n        };\n\n        return async (html: JQuery): Promise<ActionTestData|undefined> => {\n            if (cancel) return;\n\n            const actionTestData = {} as ComplexFormTestData;\n\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedComplexFormLevel(html))\n\n            // TODO: Remnants of old style data flow. Look into RangedWeapon for newer style.\n            await item.setLastComplexFormLevel({value: actionTestData.level});\n\n            return {complexForm: actionTestData};\n        };\n    }\n\n    static _getSelectedComplexFormLevel(html: JQuery): object {\n        const level = Helpers.parseInputToNumber($(html).find('[name=level]').val());\n        return {level};\n    }\n\n    static addSpellData(templateData: object, dialogData: Dialog.Data, item: SR5Item): Function {\n        const title = `${Helpers.label(item.name)} Force`;\n        const drain = item.getDrain();\n\n        const force = item.getLastSpellForce()?.value || 2 - drain;\n\n        templateData['drain'] = drain >= 0 ? `+${drain}` : `${drain}`;\n        templateData['force'] = force;\n        templateData['title'] = title;\n\n        dialogData.title = title;\n        let cancel = true;\n        let reckless = false;\n        dialogData.buttons = {\n            normal: {\n                label: game.i18n.localize('SR5.NormalSpellButton'),\n                callback: () => (cancel = false),\n            },\n            reckless: {\n                label: game.i18n.localize('SR5.RecklessSpellButton'),\n                callback: () => {\n                    reckless = true;\n                    cancel = false;\n                },\n            },\n        };\n        dialogData.default = 'normal';\n\n        return async (html: JQuery): Promise<ActionTestData|undefined> => {\n            if (cancel) return;\n\n            const actionTestData = {} as SpellActionTestData;\n\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedSpellForce(html));\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedSpellReckless(reckless));\n\n            await item.setLastSpellForce({value: actionTestData.force, reckless: actionTestData.reckless});\n\n            return {spell: actionTestData};\n        };\n    }\n\n    static _getSelectedSpellForce(html: JQuery): object {\n        const force = Helpers.parseInputToNumber($(html).find('[name=force]').val());\n        return {force}\n    }\n\n    static _getSelectedSpellReckless(reckless: boolean): object {\n        return {reckless}\n    }\n\n    static addRangedWeaponData(templateData: object, dialogData: Dialog.Data, item: SR5Item): Function {\n        let title = dialogData.title || item.name;\n\n        const itemData = item.data.data as WeaponData;\n        const fireModes = {};\n\n        const {modes, ranges} = itemData.range;\n        const {ammo} = itemData;\n        // TODO: This should be moved into constants or some kind of 'rulesData'\n        if (modes.single_shot) {\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSingleShotShort\");\n        }\n        if (modes.semi_auto) {\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoShort\");\n            fireModes['3'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\");\n        }\n        if (modes.burst_fire) {\n            fireModes['3'] = `${modes.semi_auto ? `${game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\")}/` : ''}${game.i18n.localize(\"SR5.WeaponModeBurstFireShort\")}`;\n            fireModes['6'] = game.i18n.localize(\"SR5.WeaponModeBurstFireLong\");\n        }\n        if (modes.full_auto) {\n            fireModes['6'] = `${modes.burst_fire ? 'LB/' : ''}${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(s)`;\n            fireModes['10'] = `${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(c)`;\n            fireModes['20'] = game.i18n.localize('SR5.Suppressing');\n        }\n\n        const templateRanges = this._getRangeWeaponTemplateData(ranges);\n        const fireMode = item.getLastFireMode();\n        const rc = item.getRecoilCompensation(true);\n        templateData['fireModes'] = fireModes;\n        templateData['fireMode'] = fireMode?.value;\n        templateData['rc'] = rc;\n        templateData['ammo'] = ammo;\n        templateData['title'] = title;\n        templateData['ranges'] = templateRanges;\n\n        if (item.actor.getToken() && Helpers.userHasTargets()) {\n            templateData['targetsSelected'] = Helpers.userHasTargets();\n            templateData['targets'] = ShadowrunItemDialog._getTargetRangeTemplateData(item.actor, templateRanges);\n        } else if (!item.actor.getToken() && Helpers.userHasTargets()) {\n            // Inform user about usage of actors without tokens!\n            ui.notifications?.warn(game.i18n.localize('SR5.TargetingNeedsActorWithToken'));\n        }\n\n        let cancel = true;\n        dialogData.buttons = {\n            continue: {\n                label: game.i18n.localize('SR5.Continue'),\n                callback: () => (cancel = false),\n            },\n        };\n\n        // TODO: Move this selection handler to an appropriate place. Maybe split ShadowrunItemDialog into subclasses.\n        return async (html): Promise<ActionTestData|undefined> => {\n            if (cancel) {\n                return;\n            }\n\n            const actionTestData = {} as RangedWeaponActionTestData;\n\n            if (Helpers.userHasTargets()) {\n                mergeObject(actionTestData, ShadowrunItemDialog._getSelectedTargetRangeModifier(html));\n            } else {\n                mergeObject(actionTestData, ShadowrunItemDialog._getSelectedRangeModifier(html));\n                // Store lastFireRange for generic range selection.\n            }\n\n            mergeObject(actionTestData, ShadowrunItemDialog._getSelectedFireMode(html, fireModes))\n\n            const {targetId} = ShadowrunItemDialog._getSelectedTargetTokenId(html);\n\n            // Store selections for next dialog.\n\n            if (actionTestData.environmental.range !== undefined) {\n                // Change environmental modifiers for the actor.\n                const modifiers = await item.actor.getModifiers();\n                if (!modifiers.hasActiveEnvironmentalOverwrite) {\n                    modifiers.activateEnvironmentalCategory('range', actionTestData.environmental.range);\n                    await item.actor.setModifiers(modifiers);\n                } else {\n                    console.error('The actor has an active environmental overwrite, yet could define a manual range selection.');\n                }\n\n                await item.setLastFireRangeMod({value: actionTestData.environmental.range});\n            }\n            if (actionTestData.fireMode) {\n                await item.setLastFireMode(actionTestData.fireMode);\n            }\n\n            return {rangedWeapon: actionTestData, targetId};\n        };\n    }\n\n    static _getRangeWeaponTemplateData(ranges: RangeData): RangesTemplateData {\n        const {range_modifiers} = SR.combat.environmental;\n        const newRanges = {} as RangesTemplateData;\n        for (const [key, value] of Object.entries(ranges)) {\n            const distance = value as number;\n            newRanges[key] = Helpers.createRangeDescription(SR5.weaponRanges[key], distance, range_modifiers[key]);\n        }\n        return newRanges;\n    }\n\n    /** Build template data for target distances and resulting range modifiers\n     *\n     * It is mandatory for an actor to have token placed,\n     * so distance measurements can be taken.\n     *\n     */\n    static _getTargetRangeTemplateData(actor: SR5Actor, ranges) {\n        const attacker = actor.getToken();\n\n        if (!attacker || !Helpers.userHasTargets()) {\n            ui.notifications?.warn(game.i18n.localize('SR5.TargetingNeedsActorWithToken'));\n            return [];\n        }\n\n        const targets = Helpers.getUserTargets();\n\n        const targetsTemplateData = targets.map(target => {\n            //@ts-ignore // undefined actor is okay\n            const distance = Helpers.measureTokenDistance(attacker, target);\n            const range = Helpers.getWeaponRange(distance, ranges);\n            return {\n                id: target.id,\n                name: target.name,\n                range: range,\n                unit: LENGTH_UNIT,\n                distance\n            };\n        });\n\n        //@ts-ignore\n        return targetsTemplateData.sort((a, b) => {\n            if (a.distance < b.distance) return -1;\n            if (a.distance > b.distance) return 1;\n            return 0;\n        });\n    }\n\n    static _getSelectedTargetRangeModifier(html: JQuery): object {\n        const selectElement = $(html).find('[name=\"selected-target\"]');\n        const range = Helpers.parseInputToNumber(selectElement.find(':selected').data('range-modifier'));\n\n        return {\n            environmental: {range}\n        };\n    }\n\n    static _getSelectedTargetTokenId(html: JQuery) {\n        const selectElement = $(html).find('[name=\"selected-target\"]');\n        const targetId = selectElement.val() as string;\n        return {targetId};\n    }\n\n    static _getSelectedRangeModifier(html: JQuery): object {\n        const range = Helpers.parseInputToNumber($(html).find('[name=\"range\"]').val());\n\n        return {environmental: {range}}\n    }\n\n    static _getSelectedFireMode(html: JQuery, fireModes): object {\n        const fireModeValue = Helpers.parseInputToNumber($(html).find('[name=\"fireMode\"]').val());\n        if (fireModeValue) {\n            const fireModeString = fireModes[fireModeValue];\n            const defenseModifier = Helpers.mapRoundsToDefenseDesc(fireModeValue);\n\n            const fireMode: FireModeData = {\n                label: fireModeString,\n                value: fireModeValue,\n                defense: defenseModifier,\n            };\n\n            return {fireMode};\n        }\n\n        return {};\n    }\n}\n","import {FormDialog, FormDialogData} from \"./FormDialog\";\nimport {RollDialogOptions} from \"../../rolls/ShadowrunRoller\";\nimport {PartsList} from \"../../parts/PartsList\";\nimport {SR5Actor} from \"../../actor/SR5Actor\";\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SYSTEM_NAME} from \"../../constants\";\nimport {Helpers} from \"../../helpers\";\nimport ModList = Shadowrun.ModList;\nimport BaseValuePair = Shadowrun.BaseValuePair;\nimport LabelField = Shadowrun.LabelField;\n\ninterface AdvancedTestRollOptions {\n    title?: string;\n    dialogOptions?: RollDialogOptions;\n    extended?: boolean;\n    limit?: BaseValuePair<number> & LabelField;\n    wounds?: boolean;\n}\n\nexport class ShadowrunTestDialog {\n    static async create(actor: SR5Actor|undefined, options: AdvancedTestRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\n        const testDialogData = ShadowrunTestDialog.getAdvancedTestData(actor, options, partsProps);\n\n        return new FormDialog(testDialogData);\n    }\n\n    static getAdvancedTestData(actor, options: AdvancedTestRollOptions, partsProps: ModList<number>): FormDialogData {\n        const title = options.title;\n        const parts = new PartsList(partsProps);\n\n        const templateData = {\n            options: options.dialogOptions,\n            extended: options.extended,\n            pool: parts.total,\n            parts: parts.getMessageOutput(),\n            limitValue: options.limit?.value,\n            wounds: options.wounds,\n            woundValue: actor?.getWoundModifier(),\n            rollMode: game.settings.get(CORE_NAME, CORE_FLAGS.RollMode),\n            rollModes: CONFIG.Dice.rollModes\n        }\n\n        let templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-dialog.html';\n\n        const rollButtonName = 'roll'\n        const buttons = {\n            [rollButtonName]: {\n                label: game.i18n.localize('SR5.Roll'),\n                icon: '<i class=\"fas fa-dice-six\"></i>',\n                callback: () => {\n                },\n            },\n        };\n        if (actor) {\n            buttons['edge'] = {\n                label: `${game.i18n.localize('SR5.PushTheLimit')} (+${actor.getEdge().value})`,\n                icon: '<i class=\"fas fa-bomb\"></i>',\n                callback: () => {\n                },\n            };\n        }\n\n        const onAfterClose = async (html: JQuery) => {\n            const dicePoolValue = Helpers.parseInputToNumber($(html).find('[name=\"pool\"]').val());\n\n            if (options.dialogOptions?.pool) {\n                parts.clear();\n                await game.user?.setFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue, dicePoolValue);\n                parts.addUniquePart('SR5.Base', dicePoolValue);\n            }\n\n            const limitValue = Helpers.parseInputToNumber($(html).find('[name=\"limitValue\"]').val());\n\n            const {limit} = options;\n            if (limit && limit.value !== limitValue) {\n                limit.value = limitValue;\n                limit.base = limitValue;\n                limit.label = 'SR5.Override';\n            }\n\n            const woundValue = Helpers.parseInputToNumber($(html).find('[name=\"wounds\"]').val());\n            const situationMod = Helpers.parseInputToNumber($(html).find('[name=\"dp_mod\"]').val());\n            const environmentMod = Helpers.parseInputToNumber($(html).find('[name=\"options.environmental\"]').val());\n\n            let {wounds} = options;\n            if (wounds && woundValue !== 0) {\n                parts.addUniquePart('SR5.Wounds', woundValue);\n                wounds = true;\n            }\n            if (situationMod) {\n                parts.addUniquePart('SR5.SituationalModifier', situationMod);\n            }\n            if (environmentMod) {\n                parts.addUniquePart('SR5.EnvironmentModifier', environmentMod);\n            }\n\n            const extendedString = Helpers.parseInputToString($(html).find('[name=\"extended\"]').val());\n            const extended = extendedString === 'true';\n\n            const rollMode = Helpers.parseInputToString($(html).find('[name=rollMode]').val());\n\n            return {\n                limit,\n                wounds,\n                parts,\n                extended,\n                rollMode\n            }\n        };\n\n        return {\n            title,\n            templateData,\n            templatePath,\n            buttons,\n            default: rollButtonName,\n            onAfterClose\n        }\n    }\n}","/**\n * A GM-Tool to keep track of all players overwatch scores\n */\nimport {Helpers} from \"../../helpers\";\n\nexport class OverwatchScoreTracker extends Application {\n    static MatrixOverwatchDiceCount = '2d6';\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'overwatch-score-tracker';\n        options.classes = ['sr5'];\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\n        options.template = 'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\n        options.width = 450;\n        options.height = 'auto';\n        options.resizable = true;\n        return options;\n    }\n\n    static addedActors = [];\n\n    getData() {\n        // get list of actors that belong to users\n        const actors = game.users.reduce((acc, user) => {\n            if (!user.isGM && user.character) {\n                acc.push(user.character.data);\n            }\n            return acc;\n        }, []);\n\n        OverwatchScoreTracker.addedActors.forEach((id) => {\n            const actor = game.actors.find((a) => a._id === id);\n            if (actor) {\n                actors.push(actor.data);\n            }\n        });\n\n        return {\n            actors,\n        };\n    }\n\n    activateListeners(html) {\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\n        html.find('.overwatch-score-roll-15-minutes').on('click', this._rollFor15Minutes.bind(this));\n        html.find('.overwatch-score-add-actor').on('click', this._onAddActor.bind(this));\n    }\n\n    // returns the actor that this event is acting on\n    _getActorFromEvent(event) {\n        const id = event.currentTarget.closest('.list-item').dataset.actorId;\n        if (id) return game.actors.find((a) => a._id === id);\n    }\n\n    _onAddActor(event) {\n        event.preventDefault();\n        const tokens = Helpers.getControlledTokens();\n        if (tokens.length === 0) {\n            ui.notifications?.warn(game.i18n.localize('SR5.OverwatchScoreTracker.NotifyNoSelectedTokens'));\n            return;\n        }\n        tokens.forEach((token) => {\n            const actorId = token.data.actorId;\n            OverwatchScoreTracker.addedActors.push(actorId);\n            this.render();\n        });\n    }\n\n    _setOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = event.currentTarget.value;\n        if (amount && actor) {\n            actor.setOverwatchScore(amount).then(() => this.render());\n        }\n    }\n\n    _addOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = parseInt(event.currentTarget.dataset.amount);\n        if (amount && actor) {\n            const os = actor.getOverwatchScore();\n            actor.setOverwatchScore(os + amount).then(() => this.render());\n        }\n    }\n\n    _resetOverwatchScore(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            actor.setOverwatchScore(0).then(() => this.render());\n        }\n    }\n\n    _rollFor15Minutes(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            //  use static value so it can be modified in modules\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\n            roll.evaluate({async: false});\n\n            // use GM Roll Mode so players don't see\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\n            // roll.toMessage({ rollMode });\n\n            if (roll.total) {\n                const os = actor.getOverwatchScore();\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\n            }\n        }\n    }\n}\n","import { LanguageSkillEditSheet } from './LanguageSkillEditSheet';\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\n\nexport class KnowledgeSkillEditSheet extends LanguageSkillEditSheet {\n    category: KnowledgeSkillCategory;\n    constructor(actor, options, skillId, category) {\n        super(actor, options, skillId);\n        this.category = category;\n    }\n    _updateString() {\n        return `data.skills.knowledge.${this.category}.value.${this.skillId}`;\n    }\n}\n","import { SkillEditSheet } from './SkillEditSheet';\nimport SkillEditFormData = Shadowrun.SkillEditFormData;\n\nexport class LanguageSkillEditSheet extends SkillEditSheet {\n    _updateString() {\n        return `data.skills.language.value.${this.skillId}`;\n    }\n\n    getData() {\n        return mergeObject(super.getData(), {\n            editable_name: true,\n            editable_canDefault: false,\n            editable_attribute: false\n        } as SkillEditFormData);\n    }\n\n    /** @override */\n    _onUpdateObject(event, formData, updateData) {\n        super._onUpdateObject(event, formData, updateData);\n        const name = formData['data.name'];\n        const currentData = updateData[this._updateString()] || {};\n        updateData[this._updateString()] = {\n            ...currentData,\n            name,\n        };\n    }\n}\n","import SkillEditFormData = Shadowrun.SkillEditFormData;\nimport {SR5Actor} from \"../../actor/SR5Actor\";\nimport {SR5} from \"../../config\";\n\n// @ts-ignore // TODO: foundry-vtt-types 0.8.2 doesn't know about DocumentSheet.\nexport class SkillEditSheet extends DocumentSheet {\n    skillId: string;\n\n    get document(): SR5Actor {\n        return super.document;\n    }\n\n    constructor(actor, options, skillId) {\n        super(actor, options);\n        this.skillId = skillId;\n    }\n\n    _updateString() {\n        return `data.skills.active.${this.skillId}`;\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        // @ts-ignore\n        return mergeObject(options, {\n            id: 'skill-editor',\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\n            width: 300,\n            submitOnClose: true,\n            submitOnChange: true,\n            closeOnSubmit: false,\n            resizable: true,\n        });\n    }\n\n    get title(): string {\n        const label = this.document.getSkillLabel(this.skillId);\n        return `${game.i18n.localize('SR5.EditSkill')} - ${game.i18n.localize(label)}`;\n    }\n\n    _onUpdateObject(event, formData, updateData) {\n        // get skill name.\n        // NOTE: This differs from the skill id, which is used to identify the skill internally.\n        const name = formData['data.name'];\n\n        // get attribute name\n        const attribute = formData['data.attribute'];\n\n        // get base value\n        const base = formData['data.base'];\n\n        // get can default\n        const canDefault = formData['data.canDefault'];\n\n        // process specializations\n        const specsRegex = /data\\.specs\\.(\\d+)/;\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\n            const found = key.match(specsRegex);\n            if (found && found[0]) {\n                running.push(val);\n            }\n            return running;\n        }, [] as any[]);\n\n        // process bonuses\n        const bonusKeyRegex = /data\\.bonus\\.(\\d+).key/;\n        const bonusValueRegex = /data\\.bonus\\.(\\d+).value/;\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\n            const foundKey = key.match(bonusKeyRegex);\n            const foundVal = key.match(bonusValueRegex);\n            if (foundKey && foundKey[0] && foundKey[1]) {\n                const index = foundKey[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].key = value;\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\n                const index = foundVal[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].value = value;\n            }\n\n            return running;\n        }, [] as any[]);\n\n        const currentData = updateData[this._updateString()] || {};\n        updateData[this._updateString()] = {\n            ...currentData,\n            base,\n            specs,\n            bonus,\n            name,\n            attribute,\n            canDefault\n        };\n    }\n\n\n    /** @override */\n    async _updateObject(event: Event, formData: object) {\n        const updateData = {};\n        this._onUpdateObject(event, formData, updateData);\n        await this.document.update(updateData);\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\n    }\n\n    async _addNewBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (!data) return;\n        const { bonus = [] } = data;\n        // add blank line for new bonus\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\n        await this.document.update(updateData);\n    }\n\n    async _removeBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.bonus) {\n            const { bonus } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                bonus.splice(index, 1);\n                updateData[`${this._updateString()}.bonus`] = bonus;\n                await this.document.update(updateData);\n            }\n        }\n    }\n\n    async _addNewSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.specs) {\n            // add a blank line to specs\n            const { specs } = data;\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\n        }\n        await this.document.update(updateData);\n    }\n\n    async _removeSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.specs) {\n            const { specs } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                specs.splice(index, 1);\n                updateData[`${this._updateString()}.specs`] = specs;\n                await this.document.update(updateData);\n            }\n        }\n    }\n\n    /** Enhance attribute selection by an empty option to allow newly created skills to have no attribute selected.\n     */\n    _getSkillAttributesForSelect() {\n        return {...SR5.attributes, '': ''};\n    }\n\n    _allowSkillNameEditing(): boolean {\n        const skill = this.document.getSkill(this.skillId);\n        // Typescript sees string here? Double negate for boolean type cast...\n        return !!((!skill?.name && !skill?.label) || (skill?.name && !skill?.label));\n    }\n\n    getData(): SkillEditFormData {\n        const data = super.getData();\n        const actor = data.data;\n\n        data['data'] = actor ? getProperty(actor, this._updateString()) : {};\n        data['editable_name'] = this._allowSkillNameEditing();\n        data['editable_canDefault'] = true;\n        data['editable_attribute'] = true;\n        data['attributes'] = this._getSkillAttributesForSelect();\n        return data as SkillEditFormData;\n    }\n}\n","// directly pulled from DND5e, just changed the\nexport const measureDistance = function (segments, options = {}) {\n    if (!game || !game.ready || !canvas || !canvas.ready) return 0;\n\n    //@ts-ignore\n    // basegrid isn't typed, options aren't really important\n    if (!options.gridSpaces) return BaseGrid.prototype.measureDistances.call(this, segments, options);\n\n    // Track the total number of diagonals\n    let nDiagonal = 0;\n    const rule = this.parent.diagonalRule;\n    const d = canvas.dimensions as Canvas.Dimensions;\n\n    // Iterate over measured segments\n    return segments.map((s) => {\n        let r = s.ray;\n\n        // Determine the total distance traveled\n        let nx = Math.abs(Math.ceil(r.dx / d.size));\n        let ny = Math.abs(Math.ceil(r.dy / d.size));\n\n        // Determine the number of straight and diagonal moves\n        let nd = Math.min(nx, ny);\n        let ns = Math.abs(ny - nx);\n        nDiagonal += nd;\n\n        // Common houserule variant\n        if (rule === '1-2-1') {\n            let nd10 = Math.floor(nDiagonal / 2) - Math.floor((nDiagonal - nd) / 2);\n            let spaces = nd10 * 2 + (nd - nd10) + ns;\n            // @ts-ignore\n            return spaces * canvas.dimensions.distance;\n        }\n\n        // Euclidean Measurement\n        else if (rule === 'EUCL') {\n            // @ts-ignore\n            return Math.round(Math.hypot(nx, ny) * canvas.scene.data.gridDistance);\n        }\n\n        // diag and straight are same space count\n        // @ts-ignore\n        else return (ns + nd) * canvas.scene.data.gridDistance;\n    });\n};\n","import {SR5Actor} from './actor/SR5Actor';\nimport {SR5Item} from './item/SR5Item';\nimport Template from './template';\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SYSTEM_NAME} from './constants';\nimport {ShadowrunRoll, Test} from \"./rolls/ShadowrunRoller\";\nimport {Helpers} from \"./helpers\";\nimport {DamageApplicationFlow} from './actor/flows/DamageApplicationFlow';\nimport AttackData = Shadowrun.AttackData;\nimport DrainData = Shadowrun.DrainData;\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport DamageType = Shadowrun.DamageType;\nimport DamageElement = Shadowrun.DamageElement;\nimport CombatData = Shadowrun.CombatData;\n\nexport interface RollTargetChatMessage {\n    actor: SR5Actor\n    target?: Token | undefined\n    targets?: Token[]\n    item: SR5Item\n    tests: Test[]\n    roll: ShadowrunRoll\n    attack?: AttackData\n    rollMode?: keyof typeof CONFIG.Dice.rollModes\n}\n\nexport interface TargetChatMessageOptions extends RollTargetChatMessage {\n    whisperTo: User\n}\n\n// Simple card text messages\nexport interface ItemChatMessageOptions {\n    actor: SR5Actor\n    item: SR5Item\n    description: object\n    tests?: Test[]\n}\n\nexport interface RollChatMessageOptions {\n    title: string\n    roll: ShadowrunRoll\n    actor?: SR5Actor\n    target?: Token\n    targets?: Token[]\n\n    item?: SR5Item\n\n    description?: object\n\n\n    // @ts-ignore // TODO: TYPE: Remove this...\n    rollMode?: keyof typeof CONFIG.dice.rollModes\n    previewTemplate?: boolean\n\n    attack?: AttackData\n    incomingAttack?: AttackData\n    incomingDrain?: DrainData\n    damage?: ModifiedDamageData\n    tests?: Test[]\n    combat?: CombatData\n    reach?: number\n}\n\ninterface ItemChatTemplateData {\n    title: string\n    actor: SR5Actor\n    tokenId?: string\n    item: SR5Item\n    description: object\n    tests?: Test[]\n}\n\ninterface RollChatTemplateData extends RollChatMessageOptions {\n    tokenId?: string\n    targetTokenId?: string\n    // @ts-ignore // TODO: TYPE: Remove this...\n    rollMode: keyof typeof CONFIG.dice.rollModes\n}\n\nasync function createChatMessage(templateData, options?: ChatDataOptions): Promise<Entity<any>|null> {\n    const chatData = await createChatData(templateData, options);\n    const message = await ChatMessage.create(chatData);\n\n    if (!message) return null;\n\n    // Support for Dice So Nice module. This is necessary due to Foundry 0.8 removing support for hidden custom content\n    // roll type chat messages, which Dice So Nice hooks into for it's rolls.\n    // TODO: This might be removed if Foundry reverses the chat message type roll behavior of custom content being always visible.\n    if (game.dice3d && options.roll) {\n        // @ts-ignore // Note: While showDiceSoNice can be called async, where not doing so here to avoid stalling.\n        Helpers.showDiceSoNice(options.roll, chatData.whisper, chatData.blind);\n    }\n\n    // Store data in chat message for later use (opposed tests)\n    if (templateData.roll) await message.setFlag(SYSTEM_NAME, FLAGS.Roll, templateData.roll);\n    if (templateData.attack) await message.setFlag(SYSTEM_NAME, FLAGS.Attack, templateData.attack);\n    // Convert targets into scene token ids.\n    if (templateData.targets) await message.setFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds, templateData.targets.map(target => getTokenSceneId(target)));\n\n    return message;\n}\n\ninterface ChatDataOptions {\n    roll?: ShadowrunRoll,\n    whisperTo?: User\n}\n\n// templateData has no datatype to pipe through whatever it's given.\n// Clean up your data within templateData creation functions!\nconst createChatData = async (templateData, options?: ChatDataOptions) => {\n    const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\n    const actor = templateData.actor;\n    const token = actor?.getToken();\n\n    //@ts-ignore\n    const enhancedTemplateData = {\n        ...templateData,\n        speaker: {\n            actor, token\n        },\n        showGlitchAnimation: game.settings.get(SYSTEM_NAME, FLAGS.ShowGlitchAnimation)\n    };\n\n    const html = await renderTemplate(template, enhancedTemplateData);\n\n    const chatData = {\n        user: game.user?.id,\n        // NOTE: Type Roll used to make a whispered message visible with it's content being invisible. That's not the case\n        //       with Foundry 0.8 anymore. Should that have changed, just uncomment this line.\n        // type: options?.roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\n        sound: options?.roll ? CONFIG.sounds.dice : undefined,\n        content: html,\n        roll: options?.roll ? JSON.stringify(options?.roll) : undefined,\n        speaker: {\n            actor: actor?.id,\n            token: token?.id,\n            alias: game.user?.name\n        },\n        flags: {\n            shadowrun5e: {\n                customRoll: true,\n            },\n        }\n    };\n\n    // Applying roll mode will set correct whisper recipients.\n    const rollMode = templateData.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\n    // @ts-ignore\n    ChatMessage.applyRollMode(chatData, rollMode);\n    // @ts-ignore\n    chatData.rollMode = rollMode;\n    // if (['gmroll', 'blindroll'].includes(rollMode as string)) chatData['whisper'] = ChatMessage.getWhisperRecipients('GM');\n    // if (rollMode === 'blindroll') chatData['blind'] = true;\n\n    // If a specific whisper recipient has been set, overwrite Foundry default.\n    if (options?.whisperTo) {\n        chatData['whisper'] = ChatMessage.getWhisperRecipients(options.whisperTo.name);\n    }\n\n\n\n    return chatData;\n};\n\n\nexport async function ifConfiguredCreateDefaultChatMessage({\n                                                               roll,\n                                                               actor,\n                                                               title,\n                                                               rollMode\n                                                           }: Partial<RollChatMessageOptions>) {\n    if (game.settings.get(SYSTEM_NAME, FLAGS.DisplayDefaultRollCard) && roll) {\n        await roll.toMessage({\n            speaker: ChatMessage.getSpeaker({actor: actor}),\n            flavor: title,\n            rollMode: rollMode,\n        });\n    }\n}\n\nexport async function createTargetChatMessage(options: TargetChatMessageOptions) {\n    const rollChatOptions = {...options};\n    const messageOptions = {whisperTo: options.whisperTo};\n    //@ts-ignore\n    const templateData = getRollChatTemplateData(rollChatOptions);\n    return await createChatMessage(templateData, messageOptions);\n}\n\nexport async function createItemChatMessage(options: ItemChatMessageOptions) {\n    const templateData = createChatTemplateData(options);\n    return await createChatMessage(templateData);\n}\n\nfunction createChatTemplateData(options: ItemChatMessageOptions): ItemChatTemplateData {\n    // field extraction is explicit to enforce visible data flow to ensure clean data.\n    // NOTE: As soon as clear data dynamic data flow can be established, this should be removed for a simple {...options}\n    let {actor, item, description, tests} = options;\n\n    const token = actor?.getToken();\n    const tokenId = getTokenSceneId(token);\n    const title = game.i18n.localize(\"SR5.Description\");\n\n    return {\n        title,\n        actor,\n        tokenId,\n        item,\n        description,\n        tests\n    }\n}\n\nexport async function createRollChatMessage(options: RollChatMessageOptions): Promise<Entity<any>|null> {\n    await ifConfiguredCreateDefaultChatMessage(options);\n\n    const templateData = getRollChatTemplateData(options);\n    const chatOptions = {roll: options.roll};\n    return await createChatMessage(templateData, chatOptions);\n}\n\n\nfunction getRollChatTemplateData(options: RollChatMessageOptions): RollChatTemplateData {\n    const token = options.actor?.getToken();\n\n    const rollMode = options.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\n    const tokenId = getTokenSceneId(token);\n\n    const targetTokenId = getTokenSceneId(options.target);\n\n    return {\n        ...options,\n        tokenId,\n        targetTokenId,\n        // @ts-ignore\n        rollMode,\n    }\n}\n\n/**\n * Return a mixed Scene and Token id data pair, separated by a dot '.'.\n *\n * This is needed for later retrieval of token related data from a chat message, should the scene have been switched after\n * the chat message has been created.\n *\n * TODO: Store the scene id in the chat message data or flag in it's OWN data property instead of a mixed special case.\n *\n * @param token What token the sceneTokenId must be created for.\n * @return '<SceneId>.<TokenId>'\n */\nfunction getTokenSceneId(token: Token | undefined): string | undefined {\n    if (!token) return;\n    const scene = token.parent;\n    // @ts-ignore // TODO: foundry-vtt-types 0.8 support not yet there.\n    return `${scene.id}.${token.id}`;\n}\n\nexport const addChatMessageContextOptions = (html, options) => {\n    const canRoll = (li) => {\n        const message = game.messages?.get(li.data().messageId);\n\n        if (!message) return;\n\n        return message.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll);\n    };\n\n    options.push(\n        {\n            name: game.i18n.localize('SR5.PushTheLimit'),\n            callback: (li) => SR5Actor.pushTheLimit(li),\n            condition: canRoll,\n            icon: '<i class=\"fas fa-meteor\"></i>',\n        },\n        {\n            name: game.i18n.localize('SR5.SecondChange'),\n            callback: (li) => SR5Actor.secondChance(li),\n            condition: canRoll,\n            icon: '<i class=\"fas fa-dice-d6\"></i>',\n        }\n    );\n    return options;\n};\n\nexport const addRollListeners = (app: ChatMessage, html) => {\n    if (!app.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) {\n        return\n    }\n\n    html.on('click', '.test', async (event) => {\n        event.preventDefault();\n        if (!game || !game.ready) return;\n\n        const messageId = html.data('messageId');\n        const message = game.messages?.get(messageId);\n        if (!message) return;\n        const attack = message.getFlag(SYSTEM_NAME, FLAGS.Attack) as AttackData;\n        const item = SR5Item.getItemFromMessage(html);\n\n        const type = event.currentTarget.dataset.action;\n        if (!item) {\n            ui.notifications?.error(game.i18n.localize('SR5.MissingItemForOpposedTest'));\n            return;\n        }\n\n        // Selection will overwrite chat specific targeting\n        const actors = Helpers.getSelectedActorsOrCharacter();\n\n        // No selection, fall back to targeting.\n        if (actors.length === 0) {\n            const targetSceneIds = message.getFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds) as string[];\n\n            for (const targetSceneId of targetSceneIds) {\n                const actor = Helpers.getSceneTokenActor(targetSceneId)\n                if (!actor) continue;\n\n                actors.push(actor);\n            }\n        }\n\n        if (!actors) return;\n\n        for (const actor of actors) {\n            await item.rollTestType(type, attack, event, actor);\n        }\n    });\n    html.on('click', '.place-template', (event) => {\n        event.preventDefault();\n        const item = SR5Item.getItemFromMessage(html);\n\n        if (item) {\n            const template = Template.fromItem(item);\n            template?.drawPreview();\n        }\n    });\n\n    html.on('click', '.card-main-content', event => {\n        event.preventDefault();\n        // NOTE: This depends on the exact card template HTML structure.\n        const card = $(event.currentTarget).closest('.chat-card');\n        card.children('.dice-rolls').toggle();\n        card.children('.card-description').toggle();\n    });\n\n\n    /** Open the sheets of different document types based on the chat card.\n     */\n    html.on('click', '.chat-document-link', event => {\n        event.preventDefault();\n        if (!game || !game.ready || !canvas || !canvas.ready) return;\n\n        const documentLink = $(event.currentTarget);\n        const id = documentLink.data('id');\n        const type = documentLink.data('entity');\n\n        if (!id) return;\n\n        if (type === 'Token') {\n            const token = canvas.tokens.get(id);\n            if (!token) return;\n            // @ts-ignore\n            token.actor.sheet.render(true, {token});\n        } else if (type === 'Actor') {\n            const actor = game.actors.get(id);\n            if (!actor) return;\n            // @ts-ignore\n            actor.sheet.render(true);\n        } else if (type === 'Item') {\n            const card = documentLink.closest('.chat-card');\n\n            // The item can either be owned by a Token actor or a Collection actor.\n            const sceneTokenId = card.data('tokenId');\n            const actorId = card.data('actorId');\n\n            const actor = sceneTokenId ?\n                Helpers.getSceneTokenActor(sceneTokenId) :\n                game.actors.get(actorId) as SR5Actor;\n            const item = actor?.items.get(id);\n            if (!item) return;\n            item.sheet.render(true);\n        }\n    });\n\n    /** Select a Token on the current scene based on the link id.\n     */\n    html.on('click', '.chat-select-link', event => {\n        event.preventDefault();\n\n        if (!game || !game.ready || !canvas || !canvas.ready) return;\n\n        const selectLink = $(event.currentTarget);\n        const tokenId = selectLink.data('tokenId');\n        const token = canvas.tokens.get(tokenId);\n\n        if (token) {\n            token.control();\n        } else {\n            ui.notifications?.warn(game.i18n.localize('SR5.NoSelectableToken'))\n        }\n    });\n\n    /** Apply damage to the actor speaking the chat card.\n     */\n    html.on('click', '.apply-damage', async event => {\n        event.stopPropagation();\n        const applyDamage = $(event.currentTarget);\n\n        const value = Number(applyDamage.data('damageValue'));\n        const type = String(applyDamage.data('damageType')) as DamageType;\n        const ap = Number(applyDamage.data('damageAp'));\n        const element = String(applyDamage.data('damageElement')) as DamageElement;\n        let damage = Helpers.createDamageData(value, type, ap, element);\n\n        let actors = Helpers.getSelectedActorsOrCharacter();\n\n        // Should no selection be available try guessing.\n        if (actors.length === 0) {\n            const messageId = html.data('messageId');\n            const message = game.messages?.get(messageId);\n            if (!message) return;\n            const targetIds = message.getFlag(SYSTEM_NAME, FLAGS.TargetsSceneTokenIds) as string[];\n\n            // If targeting is available, use that.\n            if (targetIds) {\n                targetIds.forEach(targetId => {\n                    const actor = Helpers.getSceneTokenActor(targetId);\n                    if (!actor) return;\n                    actors.push(actor);\n                });\n\n                // Otherwise apply to the actor casting the damage.\n            } else {\n                const sceneTokenId = html.find('.chat-card').data('tokenId');\n                const actor = Helpers.getSceneTokenActor(sceneTokenId)\n                if (actor) {\n                    actors.push(actor);\n                }\n            }\n\n            if (actors.length === 0) {\n                ui.notifications?.warn(game.i18n.localize(\"SR5.Warnings.TokenSelectionNeeded\"));\n                return;\n            }\n        }\n\n        await new DamageApplicationFlow().runApplyDamage(actors, damage);\n    });\n};","import {SR5Actor} from \"../actor/SR5Actor\";\nimport {FLAGS, SR, SYSTEM_NAME, SYSTEM_SOCKET} from \"../constants\";\nimport Combatant = Combat.Combatant;\nimport {CombatRules} from \"../rules/CombatRules\";\n\n/**\n * Foundry combat implementation for Shadowrun5 rules.\n *\n * TODO: Store what combatants already acted and with what initiative base and dice they did. This can be used to alter\n *       initiative score without fully rerolling and maintain propper turn order after an actor raised they ini while\n *       stepping over other actors that already had their action phase in the current initiative pass.\n *       @PDF SR5#160 'Chaning Initiative'\n */\nexport class SR5Combat extends Combat {\n    constructor(...args: any) {\n        super(...args);\n\n        this._registerSocketListeners();\n    }\n\n    get initiativePass(): number {\n        return this.getFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass) as number || SR.combat.INITIAL_INI_PASS;\n    }\n\n    static async setInitiativePass(combat: SR5Combat, pass: number) {\n        await combat.unsetFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass);\n        await combat.setFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass, pass);\n    }\n\n    /**\n     * Use the given actors token to get the combatant.\n     * NOTE: The token must be used, instead of just the actor, as unlinked tokens will all use the same actor id.\n     */\n    getActorCombatant(actor: SR5Actor): undefined | any {\n        const token = actor.getToken();\n        if (!token) return;\n        return this.getCombatantByToken(token.id);\n    }\n\n    /**\n     * Add ContextMenu options to CombatTracker Entries -- adds the basic Initiative Subtractions\n     * @param html\n     * @param options\n     */\n    static addCombatTrackerContextOptions(html, options: any[]) {\n        options.push(\n            {\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByOne'),\n                icon: '<i class=\"fas fa-caret-down\"></i>',\n                callback: async (li) => {\n                    // @ts-ignore // foundry-vtt-types doesn't have DocumentCollection.get yet.\n                    const combatant = await game.combat.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\n                        await combat.adjustInitiative(combatant, -1);\n                    }\n                },\n            },\n            {\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByFive'),\n                icon: '<i class=\"fas fa-angle-down\"></i>',\n                callback: async (li) => {\n                    // @ts-ignore // foundry-vtt-types doesn't have DocumentCollection.get yet.\n                    const combatant = await game.combat.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\n                        await combat.adjustInitiative(combatant, -5);\n                    }\n                },\n            },\n            {\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByTen'),\n                icon: '<i class=\"fas fa-angle-double-down\"></i>',\n                callback: async (li) => {\n                    // @ts-ignore // foundry-vtt-types doesn't have DocumentCollection.get yet.\n                    const combatant = await game.combat.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\n                        await combat.adjustInitiative(combatant, -10);\n                    }\n                },\n            },\n        );\n        return options;\n    }\n\n    /**\n     *\n     * @param combatant\n     * @param adjustment\n     */\n    async adjustInitiative(combatant: string | any, adjustment: number): Promise<void> {\n        combatant = typeof combatant === 'string' ? this.combatants.find((c) => c._id === combatant) : combatant;\n        if (!combatant || typeof combatant === 'string') {\n            console.error('Could not find combatant with id ', combatant);\n            return;\n        }\n        // @ts-ignore\n        await combatant.update({\n            initiative: Number(combatant.initiative) + adjustment,\n        });\n    }\n\n    /**\n     * Handle the change of an initiative pass. This needs owner permissions on the combat document.\n     * @param combatId\n     */\n    static async handleIniPass(combatId: string) {\n        const combat = game.combats?.get(combatId) as unknown as SR5Combat;\n        if (!combat) return;\n\n        const initiativePass = combat.initiativePass + 1;\n        // Start at the top!\n        const turn = 0;\n\n        for (const combatant of combat.combatants) {\n            const initiative = CombatRules.reduceIniResultAfterPass(Number(combatant.initiative));\n            // @ts-ignore\n            await combatant.update({initiative});\n        }\n\n        await SR5Combat.setInitiativePass(combat, initiativePass);\n        await combat.update({turn});\n        return;\n    }\n\n    /**\n     * Handle the change of a initiative round. This needs owner permission on the combat document.\n     * @param combatId\n     */\n    static async handleNextRound(combatId: string) {\n        const combat = game.combats?.get(combatId) as unknown as SR5Combat;\n        if (!combat) return;\n        await combat.resetAll();\n        await SR5Combat.setInitiativePass(combat, SR.combat.INITIAL_INI_PASS);\n\n        if (game.settings.get(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat)) {\n            await combat.rollNPC();\n        } else {\n            await combat.rollAll();\n        }\n\n        const turn = 0;\n        await combat.update({turn});\n    }\n\n    /**\n     * Make sure Shadowrun initiative order is applied.\n     */\n    setupTurns(): any[] {\n        const turns = super.setupTurns();\n        return turns.sort(SR5Combat.sortByRERIC);\n    }\n\n    static sortByRERIC(left, right): number {\n        // First sort by initiative value if different\n        const leftInit = Number(left.initiative);\n        const rightInit = Number(right.initiative);\n        if (isNaN(leftInit)) return 1;\n        if (isNaN(rightInit)) return -1;\n        if (leftInit > rightInit) return -1;\n        if (leftInit < rightInit) return 1;\n\n        // now we sort by ERIC\n        const genData = (actor): number[] => {\n            // There are broken scenes out there, which will try setting up a combat without valid actors.\n            if (!actor) return [0, 0, 0, 0];\n            // edge, reaction, intuition, coin flip\n            return [\n                Number(actor.getEdge().value),\n                Number(actor.findAttribute('reaction')?.value),\n                Number(actor.findAttribute('intuition')?.value),\n                // @ts-ignore\n                new Roll('1d2').evaluate({async: false}).total as number,\n            ];\n        };\n\n        const leftData = genData(left.actor);\n        const rightData = genData(right.actor);\n        // if we find a difference that isn't 0, return it\n        for (let index = 0; index < leftData.length; index++) {\n            const diff = rightData[index] - leftData[index];\n            if (diff !== 0) return diff;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Return the position in the current ini pass of the next undefeated combatant.\n     */\n    get nextUndefeatedTurnPosition(): number {\n        for (let [turnInPass, combatant] of this.turns.entries()) {\n            // Skipping is only interesting when moving forward.\n            if (turnInPass <= this.turn) continue;\n            // @ts-ignore\n            if (!combatant.defeated && combatant.initiative > 0) {\n                return turnInPass;\n            }\n        }\n        // The current turn is the last undefeated combatant. So go to the end and beeeeyooond.\n        return this.turns.length;\n    }\n\n    /**\n     * Return the position in the current ini pass of the next combatant that has an action phase left.\n     */\n    get nextViableTurnPosition(): number {\n        // Start at the next position after the current one.\n        for (let [turnInPass, combatant] of this.turns.entries()) {\n            // Skipping is only interesting when moving forward.\n            if (turnInPass <= this.turn) continue;\n            // @ts-ignore\n            if (combatant.initiative > 0) {\n                return turnInPass;\n            }\n        }\n        // The current turn is the last undefeated combatant. So go to the end and beeeeyooond.\n        return this.turns.length;\n    }\n\n    /**\n     * Determine wheter the current combat situation (current turn order) needs and can have an initiative pass applied.\n     * @return true means that an initiative pass must be applied\n     */\n    doIniPass(nextTurn: number): boolean {\n        // We're currently only stepping from combatant to combatant.\n        if (nextTurn < this.turns.length) return false;\n        // Prepare another possible initiative order.\n        const currentScores = this.combatants.map(combatant => Number(combatant.initiative));\n\n        return CombatRules.iniOrderCanDoAnotherPass(currentScores);\n    }\n\n    /**\n     * After all combatants have had their action phase (click on next 'turn') handle shadowrun rules for\n     * initiative pass and combat turn.\n     *\n     * As long as a combatant still has a positive initiative score left, go to the next pass.\n     *  Raise the Foundry turn and don't raise the Foundry round.\n     * As soons as all combatants have no initiative score left, go to the next combat round.\n     *  Reset the Foundry pass and don't raise the Foundry turn.\n     *\n     * Retrigger Initiative Rolls on each new Foundry round.\n     *\n     *\n     * * @Override\n     */\n    async nextTurn(): Promise<void> {\n        // Maybe advance to the next round/init pass\n        let nextRound = this.round;\n        let initiativePass = this.initiativePass;\n        // Get the next viable turn position.\n        let nextTurn = this.settings.skipDefeated ?\n            this.nextUndefeatedTurnPosition :\n            this.nextViableTurnPosition;\n\n        // Start of the combat Handling\n        if (nextRound === 0 && initiativePass === 0) {\n            await this.startCombat();\n            return;\n        }\n\n        // Just step from one combatant to the next!\n        if (nextTurn < this.turns.length) {\n            await this.update({turn: nextTurn});\n            return;\n        }\n\n        // Initiative Pass Handling. Owner permissions are needed to change the initiative pass.\n        if (!game.user?.isGM && this.doIniPass(nextTurn)) {\n            await this._createDoIniPassSocketMessage();\n            return;\n        }\n\n        if (game.user?.isGM && this.doIniPass(nextTurn)) {\n            await SR5Combat.handleIniPass(this.id)\n            return;\n        }\n\n        // Initiative Round Handling.\n        // NOTE: It's not checked if the next is needed. This should result int he user noticing the turn going up, when it\n        //       maybe shouldn't and reporting a unhandled combat phase flow case.\n        return this.nextRound();\n    }\n\n    async startCombat() {\n        const nextRound = SR.combat.INITIAL_INI_ROUND;\n        const initiativePass = SR.combat.INITIAL_INI_PASS;\n        // Start at the top!\n        const nextTurn = 0;\n\n        await SR5Combat.setInitiativePass(this, initiativePass);\n        await this.update({round: nextRound, turn: nextTurn});\n\n        if (game.settings.get(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat)) {\n            await this.rollNPC();\n        } else {\n            await this.rollAll();\n        }\n\n        return this;\n    }\n\n    async nextRound(): Promise<void> {\n        // Let Foundry handle time and some other things.\n        await super.nextRound();\n\n        // Owner permissions are needed to change the shadowrun initiative round.\n        if (!game.user?.isGM) {\n            await this._createDoNextRoundSocketMessage();\n        } else {\n            await SR5Combat.handleNextRound(this.id);\n        }\n    }\n\n    /**\n     * use default behaviour but ALWAYS start at the top!\n     */\n    async rollAll(): Promise<SR5Combat> {\n        const combat = await super.rollAll() as unknown as SR5Combat;\n        if (combat.turn !== 0)\n            await combat.update({turn: 0});\n        return combat;\n    }\n\n\n    /**\n     * Shadowrun starts at the top, except for subsequent initiative passes, then it depends on the new values.\n     */\n    async rollInitiative(ids, options): Promise<SR5Combat> {\n        const combat = await super.rollInitiative(ids, options) as SR5Combat;\n\n        if (this.initiativePass === SR.combat.INITIAL_INI_PASS)\n            await combat.update({turn: 0});\n\n        return combat;\n    }\n\n    /**\n     * Alter initiative formula to include initiative pass reduction.\n     *\n     * NOTE: Should this here fail or be buggy, there always is SR5Combat.updateNewCombatants which can be uncommented in SR5Combat.rollInitiative\n     * @deprecated since Foundry 0.8. Kept for possible Foundry 0.7 support. Might just be not needed anymore during 0.8 lifecycle.\n     * @param combatant\n     */\n    _getInitiativeFormula(combatant: Combatant) {\n        if (this.initiativePass === SR.combat.INITIAL_INI_PASS) { // @ts-ignore\n            return super._getInitiativeFormula(combatant);\n        }\n\n        // Reduce for initiative passes until zero.\n        return SR5Combat._getSystemInitiativeFormula(this.initiativePass);\n    }\n\n    static _getSystemInitiativeBaseFormula() {\n        // @ts-ignore\n        return String(CONFIG.Combat.initiative.formula || game.system.data.initiative);\n    }\n\n    static _getSystemInitiativeFormula(initiativePass: number): string {\n        initiativePass = initiativePass > 1 ? initiativePass : 1;\n        const baseFormula = SR5Combat._getSystemInitiativeBaseFormula();\n        const ongoingIniPassModified = (initiativePass - 1) * -SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\n        return `max(${baseFormula} - ${ongoingIniPassModified}[Pass], 0)`;\n    }\n\n    _registerSocketListeners() {\n        // @ts-ignore\n        game.socket.on(SYSTEM_SOCKET, async (message) => {\n            switch (message.type) {\n                case (FLAGS.DoNextRound):\n                    if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\n                        console.error(`SR5Combat Socket Message ${FLAGS.DoNextRound} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\n                        return;\n                    }\n\n                    return await SR5Combat.handleNextRound(message.data.id);\n                case (FLAGS.DoInitPass):\n                    if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\n                        console.error(`SR5Combat Socket Message ${FLAGS.DoInitPass} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\n                        return;\n                    }\n\n                    return await SR5Combat.handleIniPass(message.data.id);\n            }\n        })\n    }\n\n    async _createDoNextRoundSocketMessage() {\n        //@ts-ignore\n        await game.socket.emit(`${SYSTEM_SOCKET}`, {type: FLAGS.DoNextRound, data: {id: this.id}});\n    }\n\n    async _createDoIniPassSocketMessage() {\n        //@ts-ignore\n        await game.socket.emit(`${SYSTEM_SOCKET}`, {type: FLAGS.DoInitPass, data: {id: this.id}});\n    }\n}\n\n/**\n * Since Foundry 0.8 Combat._getInitiativeFormula has been moved to Combatant._getInitiativeFormula.\n *\n *  This method enhances Combatant#_getInitiativeFormula. Check hooks.ts#init for when it comes into play.\n *\n *  During initiative roll modify the initiative result depending on the current combats initiative pass.\n */\nexport function _combatantGetInitiativeFormula() {\n    const combat = this.parent;\n    return SR5Combat._getSystemInitiativeFormula(combat.initiativePass);\n}","export const SR5 = {\n    itemTypes: {\n        action: 'SR5.ItemTypes.Action',\n        adept_power: 'SR5.ItemTypes.AdeptPower',\n        ammo: 'SR5.ItemTypes.Ammo',\n        armor: 'SR5.ItemTypes.Armor',\n        complex_form: 'SR5.ItemTypes.ComplexForm',\n        contact: 'SR5.ItemTypes.Contact',\n        critter_power: 'SR5.ItemTypes.CritterPower',\n        cyberware: 'SR5.ItemTypes.Cyberware',\n        bioware: 'SR5.ItemTypes.Bioware',\n        device: 'SR5.ItemTypes.Device',\n        equipment: 'SR5.ItemTypes.Equipment',\n        lifestyle: 'SR5.ItemTypes.Lifestyle',\n        modification: 'SR5.ItemTypes.Modification',\n        quality: 'SR5.ItemTypes.Quality',\n        sin: 'SR5.ItemTypes.Sin',\n        spell: 'SR5.ItemTypes.Spell',\n        weapon: 'SR5.ItemTypes.Weapon',\n    },\n\n    attributes: {\n        body: 'SR5.AttrBody',\n        agility: 'SR5.AttrAgility',\n        reaction: 'SR5.AttrReaction',\n        strength: 'SR5.AttrStrength',\n        willpower: 'SR5.AttrWillpower',\n        logic: 'SR5.AttrLogic',\n        intuition: 'SR5.AttrIntuition',\n        charisma: 'SR5.AttrCharisma',\n        magic: 'SR5.AttrMagic',\n        resonance: 'SR5.AttrResonance',\n        edge: 'SR5.AttrEdge',\n        essence: 'SR5.AttrEssence',\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    limits: {\n        physical: 'SR5.LimitPhysical',\n        social: 'SR5.LimitSocial',\n        mental: 'SR5.LimitMental',\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    specialTypes: {\n        mundane: 'SR5.Mundane',\n        magic: 'SR5.Awakened',\n        resonance: 'SR5.Emerged',\n    },\n\n    damageTypes: {\n        physical: 'SR5.DmgTypePhysical',\n        stun: 'SR5.DmgTypeStun',\n        matrix: 'SR5.DmgTypeMatrix',\n    },\n\n    elementTypes: {\n        fire: 'SR5.ElementFire',\n        cold: 'SR5.ElementCold',\n        acid: 'SR5.ElementAcid',\n        electricity: 'SR5.ElementElectricity',\n        radiation: 'SR5.ElementRadiation',\n    },\n\n    spellCategories: {\n        combat: 'SR5.SpellCatCombat',\n        detection: 'SR5.SpellCatDetection',\n        health: 'SR5.SpellCatHealth',\n        illusion: 'SR5.SpellCatIllusion',\n        manipulation: 'SR5.SpellCatManipulation',\n    },\n\n    spellTypes: {\n        physical: 'SR5.SpellTypePhysical',\n        mana: 'SR5.SpellTypeMana',\n    },\n\n    spellRanges: {\n        touch: 'SR5.SpellRangeTouch',\n        los: 'SR5.SpellRangeLos',\n        los_a: 'SR5.SpellRangeLosA',\n    },\n\n    combatSpellTypes: {\n        direct: 'SR5.SpellCombatDirect',\n        indirect: 'SR5.SpellCombatIndirect',\n    },\n\n    detectionSpellTypes: {\n        directional: 'SR5.SpellDetectionDirectional',\n        psychic: 'SR5.SpellDetectionPsychic',\n        area: 'SR5.SpellDetectionArea',\n    },\n\n    illusionSpellTypes: {\n        obvious: 'SR5.SpellIllusionObvious',\n        realistic: 'SR5.SpellIllusionRealistic',\n    },\n\n    illusionSpellSenses: {\n        'single-sense': 'SR5.SpellIllusionSingleSense',\n        'multi-sense': 'SR5.SpellIllusionMultiSense',\n    },\n\n    attributeRolls: {\n        composure: 'SR5.RollComposure',\n        lift_carry: 'SR5.RollLiftCarry',\n        judge_intentions: 'SR5.RollJudgeIntentions',\n        memory: 'SR5.RollMemory',\n    },\n\n    matrixTargets: {\n        persona: 'SR5.TargetPersona',\n        device: 'SR5.TargetDevice',\n        file: 'SR5.TargetFile',\n        self: 'SR5.TargetSelf',\n        sprite: 'SR5.TargetSprite',\n        other: 'SR5.TargetOther',\n    },\n\n    durations: {\n        instant: 'SR5.DurationInstant',\n        sustained: 'SR5.DurationSustained',\n        permanent: 'SR5.DurationPermanent',\n    },\n\n    weaponCategories: {\n        range: 'SR5.WeaponCatRange',\n        melee: 'SR5.WeaponCatMelee',\n        thrown: 'SR5.WeaponCatThrown',\n    },\n\n    weaponRanges: {\n        short: 'SR5.WeaponRangeShort',\n        medium: 'SR5.WeaponRangeMedium',\n        long: 'SR5.WeaponRangeLong',\n        extreme: 'SR5.WeaponRangeExtreme',\n    },\n\n    qualityTypes: {\n        positive: 'SR5.QualityTypePositive',\n        negative: 'SR5.QualityTypeNegative',\n    },\n\n    adeptPower: {\n        types: {\n            active: 'SR5.AdeptPower.Types.Active',\n            passive: 'SR5.AdeptPower.Types.Passive',\n        },\n    },\n\n    deviceCategories: {\n        commlink: 'SR5.DeviceCatCommlink',\n        cyberdeck: 'SR5.DeviceCatCyberdeck',\n    },\n\n    cyberwareGrades: {\n        standard: 'SR5.CyberwareGradeStandard',\n        alpha: 'SR5.CyberwareGradeAlpha',\n        beta: 'SR5.CyberwareGradeBeta',\n        delta: 'SR5.CyberwareGradeDelta',\n        used: 'SR5.CyberwareGradeUsed',\n    },\n\n    knowledgeSkillCategories: {\n        street: 'SR5.KnowledgeSkillStreet',\n        academic: 'SR5.KnowledgeSkillAcademic',\n        professional: 'SR5.KnowledgeSkillProfessional',\n        interests: 'SR5.KnowledgeSkillInterests',\n    },\n\n    activeSkills: {\n        archery: 'SR5.SkillArchery',\n        automatics: 'SR5.SkillAutomatics',\n        blades: 'SR5.SkillBlades',\n        clubs: 'SR5.SkillClubs',\n        exotic_melee: 'SR5.SkillExoticMelee',\n        exotic_range: 'SR5.SkillExoticRange',\n        heavy_weapons: 'SR5.SkillHeavyWeapons',\n        longarms: 'SR5.SkillLongarms',\n        pistols: 'SR5.SkillPistols',\n        throwing_weapons: 'SR5.SkillThrowingWeapons',\n        unarmed_combat: 'SR5.SkillUnarmedCombat',\n        disguise: 'SR5.SkillDisguise',\n        diving: 'SR5.SkillDiving',\n        escape_artist: 'SR5.SkillEscapeArtist',\n        free_fall: 'SR5.SkillFreeFall',\n        gymnastics: 'SR5.SkillGymnastics',\n        palming: 'SR5.SkillPalming',\n        perception: 'SR5.SkillPerception',\n        running: 'SR5.SkillRunning',\n        sneaking: 'SR5.SkillSneaking',\n        survival: 'SR5.SkillSurvival',\n        swimming: 'SR5.SkillSwimming',\n        tracking: 'SR5.SkillTracking',\n        con: 'SR5.SkillCon',\n        etiquette: 'SR5.SkillEtiquette',\n        impersonation: 'SR5.SkillImpersonation',\n        instruction: 'SR5.SkillInstruction',\n        intimidation: 'SR5.SkillIntimidation',\n        leadership: 'SR5.SkillLeadership',\n        negotiation: 'SR5.SkillNegotiation',\n        performance: 'SR5.SkillPerformance',\n        alchemy: 'SR5.SkillAlchemy',\n        arcana: 'SR5.SkillArcana',\n        artificing: 'SR5.SkillArtificing',\n        assensing: 'SR5.SkillAssensing',\n        astral_combat: 'SR5.SkillAstralCombat',\n        banishing: 'SR5.SkillBanishing',\n        binding: 'SR5.SkillBinding',\n        counterspelling: 'SR5.SkillCounterspelling',\n        disenchanting: 'SR5.SkillDisenchanting',\n        ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\n        spellcasting: 'SR5.SkillSpellcasting',\n        summoning: 'SR5.SkillSummoning',\n        compiling: 'SR5.SkillCompiling',\n        decompiling: 'SR5.SkillDecompiling',\n        registering: 'SR5.SkillRegistering',\n        aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\n        automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\n        industrial_mechanic: 'SR5.SkillIndustrialMechanic',\n        nautical_mechanic: 'SR5.SkillNauticalMechanic',\n        animal_handling: 'SR5.SkillAnimalHandling',\n        armorer: 'SR5.SkillArmorer',\n        artisan: 'SR5.SkillArtisan',\n        biotechnology: 'SR5.SkillBiotechnology',\n        chemistry: 'SR5.SkillChemistry',\n        computer: 'SR5.SkillComputer',\n        cybercombat: 'SR5.SkillCybercombat',\n        cybertechnology: 'SR5.SkillCybertechnology',\n        demolitions: 'SR5.SkillDemolitions',\n        electronic_warfare: 'SR5.SkillElectronicWarfare',\n        first_aid: 'SR5.SkillFirstAid',\n        forgery: 'SR5.SkillForgery',\n        hacking: 'SR5.SkillHacking',\n        hardware: 'SR5.SkillHardware',\n        locksmith: 'SR5.SkillLocksmith',\n        medicine: 'SR5.SkillMedicine',\n        navigation: 'SR5.SkillNavigation',\n        software: 'SR5.SkillSoftware',\n        gunnery: 'SR5.SkillGunnery',\n        pilot_aerospace: 'SR5.SkillPilotAerospace',\n        pilot_aircraft: 'SR5.SkillPilotAircraft',\n        pilot_walker: 'SR5.SkillPilotWalker',\n        pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\n        pilot_water_craft: 'SR5.SkillPilotWaterCraft',\n        pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\n    },\n\n    actionTypes: {\n        none: 'SR5.ActionTypeNone',\n        free: 'SR5.ActionTypeFree',\n        simple: 'SR5.ActionTypeSimple',\n        complex: 'SR5.ActionTypeComplex',\n        varies: 'SR5.ActionTypeVaries',\n    },\n\n    // Use within action damage calculation (base <operator> attribute) => value\n    actionDamageFormulaOperators: {\n        add: '+',\n        subtract: '-',\n        multiply: '*',\n        divide: '/'\n    },\n\n    matrixAttributes: {\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    initiativeCategories: {\n        meatspace: 'SR5.InitCatMeatspace',\n        astral: 'SR5.InitCatAstral',\n        matrix: 'SR5.InitCatMatrix',\n    },\n\n    modificationTypes: {\n        weapon: 'SR5.Weapon',\n        armor: 'SR5.Armor',\n    },\n\n    mountPoints: {\n        barrel: 'SR5.Barrel',\n        under_barrel: 'SR5.UnderBarrel',\n        stock: 'SR5.Stock',\n        top: 'SR5.Top',\n        side: 'SR5.Side',\n        internal: 'SR5.Internal',\n    },\n\n    lifestyleTypes: {\n        street: 'SR5.LifestyleStreet',\n        squatter: 'SR5.LifestyleSquatter',\n        low: 'SR5.LifestyleLow',\n        medium: 'SR5.LifestyleMiddle',\n        high: 'SR5.LifestyleHigh',\n        luxory: 'SR5.LifestyleLuxory',\n        other: 'SR5.LifestyleOther',\n    },\n\n    kbmod: {\n        STANDARD: 'shiftKey',\n        EDGE: 'altKey',\n        SPEC: 'ctrlKey',\n    },\n\n    actorModifiers: {\n        soak: 'SR5.RollSoak',\n        drain: 'SR5.Drain',\n        armor: 'SR5.Armor',\n        physical_limit: 'SR5.PhysicalLimit',\n        social_limit: 'SR5.SocialLimit',\n        mental_limit: 'SR5.MentalLimit',\n        stun_track: 'SR5.StunTrack',\n        physical_track: 'SR5.PhysicalTrack',\n        meat_initiative: 'SR5.MeatSpaceInit',\n        meat_initiative_dice: 'SR5.MeatSpaceDice',\n        astral_initiative: 'SR5.AstralInit',\n        astral_initiative_dice: 'SR5.AstralDice',\n        matrix_initiative: 'SR5.MatrixInit',\n        matrix_initiative_dice: 'SR5.MatrixDice',\n        composure: 'SR5.RollComposure',\n        lift_carry: 'SR5.RollLiftCarry',\n        judge_intentions: 'SR5.RollJudgeIntentions',\n        memory: 'SR5.RollMemory',\n        walk: 'SR5.Walk',\n        run: 'SR5.Run',\n        defense: 'SR5.RollDefense',\n        wound_tolerance: 'SR5.WoundTolerance',\n        essence: 'SR5.AttrEssence',\n        fade: 'SR5.RollFade',\n        global: 'SR5.Global',\n    },\n\n    programTypes: {\n        common_program: 'SR5.CommonProgram',\n        hacking_program: 'SR5.HackingProgram',\n        agent: 'SR5.Agent',\n    },\n\n    spiritTypes: {\n        // base types\n        air: 'SR5.Spirit.Types.Air',\n        aircraft: 'SR5.Spirit.Types.Aircraft',\n        airwave: 'SR5.Spirit.Types.Airwave',\n        automotive: 'SR5.Spirit.Types.Automotive',\n        beasts: 'SR5.Spirit.Types.Beasts',\n        ceramic: 'SR5.Spirit.Types.Ceramic',\n        earth: 'SR5.Spirit.Types.Earth',\n        energy: 'SR5.Spirit.Types.Energy',\n        fire: 'SR5.Spirit.Types.Fire',\n        guardian: 'SR5.Spirit.Types.Guardian',\n        guidance: 'SR5.Spirit.Types.Guidance',\n        man: 'SR5.Spirit.Types.Man',\n        metal: 'SR5.Spirit.Types.Metal',\n        plant: 'SR5.Spirit.Types.Plant',\n        ship: 'SR5.Spirit.Types.Ship',\n        task: 'SR5.Spirit.Types.Task',\n        train: 'SR5.Spirit.Types.Train',\n        water: 'SR5.Spirit.Types.Water',\n\n        // toxic types\n        toxic_air: 'SR5.Spirit.Types.ToxicAir',\n        toxic_beasts: 'SR5.Spirit.Types.ToxicBeasts',\n        toxic_earth: 'SR5.Spirit.Types.ToxicEarth',\n        toxic_fire: 'SR5.Spirit.Types.ToxicFire',\n        toxic_man: 'SR5.Spirit.Types.ToxicMan',\n        toxic_water: 'SR5.Spirit.Types.ToxicWater',\n\n        // blood types\n        blood: 'SR5.Spirit.Types.Blood',\n\n        // shadow types\n        muse: 'SR5.Spirit.Types.Muse',\n        nightmare: 'SR5.Spirit.Types.Nightmare',\n        shade: 'SR5.Spirit.Types.Shade',\n        succubus: 'SR5.Spirit.Types.Succubus',\n        wraith: 'SR5.Spirit.Types.Wraith',\n\n        // shedim types\n        shedim: 'SR5.Spirit.Types.Shedim',\n        master_shedim: 'SR5.Spirit.Types.MasterShedim',\n\n        // insect types\n        caretaker: 'SR5.Spirit.Types.Caretaker',\n        nymph: 'SR5.Spirit.Types.Nymph',\n        scout: 'SR5.Spirit.Types.Scout',\n        soldier: 'SR5.Spirit.Types.Soldier',\n        worker: 'SR5.Spirit.Types.Worker',\n        queen: 'SR5.Spirit.Types.Queen',\n    },\n\n    critterPower: {\n        categories: {\n          mundane: 'SR5.CritterPower.Categories.Mundane',\n          paranormal: 'SR5.CritterPower.Categories.Paranormal',\n          free_spirit: 'SR5.CritterPower.Categories.FreeSpirit',\n          emergent: 'SR5.CritterPower.Categories.Emergent',\n          shapeshifter: 'SR5.CritterPower.Categories.Shapeshifter',\n          drake: 'SR5.CritterPower.Categories.Drake',\n          echoes: 'SR5.CritterPower.Categories.Echoes',\n          weakness: 'SR5.CritterPower.Categories.Weakness',\n          paranormal_infected: 'SR5.CritterPower.Categories.ParanormalInfected',\n        },\n        types: {\n            mana: 'SR5.CritterPower.Types.Mana',\n            physical: 'SR5.CritterPower.Types.Physical',\n        },\n        ranges: {\n            los: 'SR5.CritterPower.Ranges.LineOfSight',\n            self: 'SR5.CritterPower.Ranges.Self',\n            touch: 'SR5.CritterPower.Ranges.Touch',\n            los_a: 'SR5.CritterPower.Ranges.LineOfSightArea',\n            special: 'SR5.CritterPower.Ranges.Special',\n        },\n        durations: {\n            always: 'SR5.CritterPower.Durations.Always',\n            instant: 'SR5.CritterPower.Durations.Instant',\n            sustained: 'SR5.CritterPower.Durations.Sustained',\n            permanent: 'SR5.CritterPower.Durations.Permanent',\n            special: 'SR5.CritterPower.Durations.Special',\n        },\n    },\n\n    spriteTypes: {\n        courier: 'SR5.Sprite.Types.Courier',\n        crack: 'SR5.Sprite.Types.Crack',\n        data: 'SR5.Sprite.Types.Data',\n        fault: 'SR5.Sprite.Types.Fault',\n        machine: 'SR5.Sprite.Types.Machine',\n    },\n\n    vehicle: {\n        types: {\n            air: 'SR5.Vehicle.Types.Air',\n            aerospace: 'SR5.Vehicle.Types.Aerospace',\n            ground: 'SR5.Vehicle.Types.Ground',\n            water: 'SR5.Vehicle.Types.Water',\n            walker: 'SR5.Vehicle.Types.Walker',\n            exotic: 'SR5.Vehicle.Types.Exotic',\n        },\n        stats: {\n            handling: 'SR5.Vehicle.Stats.Handling',\n            off_road_handling: 'SR5.Vehicle.Stats.OffRoadHandling',\n            speed: 'SR5.Vehicle.Stats.Speed',\n            off_road_speed: 'SR5.Vehicle.Stats.OffRoadSpeed',\n            acceleration: 'SR5.Vehicle.Stats.Acceleration',\n            pilot: 'SR5.Vehicle.Stats.Pilot',\n            sensor: 'SR5.Vehicle.Stats.Sensor',\n        },\n        control_modes: {\n            manual: 'SR5.Vehicle.ControlModes.Manual',\n            remote: 'SR5.Vehicle.ControlModes.Remote',\n            rigger: 'SR5.Vehicle.ControlModes.Rigger',\n            autopilot: 'SR5.Vehicle.ControlModes.Autopilot',\n        },\n        environments: {\n            speed: 'SR5.Vehicle.Environments.Speed',\n            handling: 'SR5.Vehicle.Environments.Handling',\n        },\n    },\n\n    character: {\n        types: {\n            human: 'SR5.Character.Types.Human',\n            elf: 'SR5.Character.Types.Elf',\n            ork: 'SR5.Character.Types.Ork',\n            dwarf: 'SR5.Character.Types.Dwarf',\n            troll: 'SR5.Character.Types.Troll',\n        },\n    },\n};\n","/**\n * The constants file is a bit of a mess of stuff that doesn't change and some shadowrun specific rule values.\n * Everything should be reused by someplace else. Try to avoid any magic values withing your code.\n *\n * The SR object contains initial values and constants. Constants are written in ALL_CAPS_CONSTANTS and should never be\n * changed during runtime.\n * Regarding Shadowrun modifier values: If the rules define a negative modifier, declare it here as such. Don't use a positive\n * modifier and subtract at the place of use.\n *\n * Other than this file config.ts exists and only contains mappings between fixed names/ids and translation labels.\n *\n */\nexport const SYSTEM_NAME = 'shadowrun5e';\nexport const SYSTEM_SOCKET = `system.${SYSTEM_NAME}`;\nexport const FLAGS = {\n    ShowGlitchAnimation: 'showGlitchAnimation',\n    ShowTokenNameForChatOutput: 'showTokenNameInsteadOfActor',\n    WhisperOpposedTestsToTargetedPlayers: 'whisperOpposedTestsToTargetedPlayers',\n    OnlyAllowRollOnDefaultableSkills: 'onlyAllowRollOnDefaultableSkills',\n    ShowSkillsWithDetails: 'showSkillsWithDetails',\n    OnlyAutoRollNPCInCombat: 'onlyAutoRollNPCInCombat',\n    MessageCustomRoll: 'customRoll',\n    ApplyLimits: 'applyLimits',\n    LastRollPromptValue: 'lastRollPromptValue',\n    DisplayDefaultRollCard: 'displayDefaultRollCard',\n    CombatInitiativePass: 'combatInitiativePass',\n    EmbeddedItems: 'embeddedItems',\n    LastFireMode: 'lastFireMode',\n    LastSpellForce: 'lastSpellForce',\n    LastComplexFormLevel: 'lastComplexFormLevel',\n    LastFireRange: 'lastFireRange',\n    Attack: 'attack',\n    Roll: 'roll',\n    TargetsSceneTokenIds: 'targetsSceneTokenIds',\n    ChangelogShownForVersion: 'changelogShownForVersion',\n    Modifier: 'modifier',\n    DoInitPass: 'doInitPass',\n    DoNextRound: 'doNextRound',\n};\nexport const CORE_NAME = 'core';\nexport const CORE_FLAGS = {\n    RollMode: 'rollMode'\n}\nexport const METATYPEMODIFIER = 'SR5.Character.Modifiers.NPCMetatypeAttribute';\n\nexport const LENGTH_UNIT_TO_METERS_MULTIPLIERS = {\n    'm': 1,\n    'meter': 1,\n    'meters': 1,\n    'km': 1000,\n    'kilometers': 1000,\n    'kilometer': 1000,\n};\n\nexport const DEFAULT_ROLL_NAME = 'Roll';\nexport const LENGTH_UNIT = 'm';\nexport const SKILL_DEFAULT_NAME = '';\nexport const DEFAULT_ID_LENGTH = 16;\n\n// Contain data regarding shadowrun rules, mostly whatever is stated in some table to be looked up in other places.\nexport const SR = {\n    combat: {\n        environmental: {\n            range_modifiers: {\n                short: 0,\n                medium: -1,\n                long: -3,\n                extreme: -6,\n                // A modifier of zero will allow for users/gm to still test oor targets with their own judgement.\n                out_of_range: 0\n            },\n            levels: {\n                good: 0,\n                light: -1,\n                moderate: -3,\n                heavy: -6,\n                extreme: -10,\n            }\n        },\n\n        INI_RESULT_MOD_AFTER_INI_PASS: -10,\n        INITIAL_INI_PASS: 1,\n        INITIAL_INI_ROUND: 1\n    },\n    die: {\n        glitch: [1],\n        success: [5, 6]\n    },\n    defense: {\n        spell: {\n            direct: {\n                mana: 'willpower',\n                physical: 'body'\n            }\n        }\n    },\n    attributes: {\n        ranges: {\n            magic: {min: 0},\n            edge: {min: 0},\n            resonance: {min: 0},\n            essence: {min: 0},\n            body: {min: 1},\n            agility: {min: 1},\n            reaction: {min: 1},\n            strength: {min: 1},\n            willpower: {min: 1},\n            logic: {min: 1},\n            intuition: {min: 1},\n            charisma: {min: 1},\n            attack: {min: 0},\n            sleaze: {min: 0},\n            data_processing: {min: 0},\n            firewall: {min: 0}\n        },\n        SHORT_NAME_LENGTH: 3\n    },\n    skill: {\n        // @PDF SR5#130\n        DEFAULTING_MODIFIER: -1,\n        SPECIALIZATION_MODIFIER: 2\n    }\n}\n","import DamageData = Shadowrun.DamageData;\nimport ActorArmorData = Shadowrun.ActorArmorData;\nimport TechnologyData = Shadowrun.TechnologyData;\nimport DescriptionData = Shadowrun.DescriptionData;\nimport EquipmentData = Shadowrun.EquipmentData;\nimport QualityData = Shadowrun.QualityData;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport LimitData = Shadowrun.LimitData;\nimport OpposedTestData = Shadowrun.OpposedTestData;\nimport SkillField = Shadowrun.SkillField;\nimport {SKILL_DEFAULT_NAME} from \"../constants\";\n\n/**\n * TODO: Add unittesting to DefaultValues helper.\n */\nexport class DefaultValues {\n    /**\n     *\n     * @param partialDamageData give partial DamageData fields to overwrite default values\n     */\n    static damageData(partialDamageData: Partial<DamageData> = {}): DamageData {\n        return mergeObject({\n            type: {\n                base: 'physical',\n                value: 'physical',\n            },\n            element: {\n                base: '',\n                value: '',\n            },\n            base: 0,\n            value: 0,\n            ap: {\n                base: 0,\n                value: 0,\n                mod: [],\n            },\n            attribute: '',\n            mod: [],\n            base_formula_operator: 'add',\n            source: {\n                actorId: '',\n                itemId: '',\n                itemType: '',\n                itemName: ''\n            }\n        }, partialDamageData) as DamageData;\n    }\n\n    static actorArmorData(partialActorArmorData: Partial<ActorArmorData> = {}): ActorArmorData {\n        return mergeObject({\n            value: 0,\n            mod: [],\n            base: 0,\n            label: '',\n        }, partialActorArmorData) as ActorArmorData;\n    }\n\n    static equipmentData(partialEquipmentData: Partial<EquipmentData> = {}): EquipmentData {\n        return mergeObject({\n            description: this.descriptionData(),\n            technology: this.technologyData(),\n        }, partialEquipmentData) as EquipmentData;\n    }\n\n    static qualityData(partialQualityData: Partial<QualityData> = {}): QualityData {\n        return mergeObject({\n            type: '',\n            description: this.descriptionData(),\n            action: this.actionRollData(),\n        }, partialQualityData) as QualityData;\n    }\n\n    static technologyData(partialTechnologyData: Partial<TechnologyData> = {}): TechnologyData {\n        return mergeObject({\n            rating: '',\n            availability: '',\n            quantity: 1,\n            cost: 0,\n            equipped: false,\n            conceal: {\n                base: 0,\n                value: 0,\n                mod: [],\n            },\n            condition_monitor: {\n                label: '',\n                value: 0,\n                max: 0,\n            }\n        }, partialTechnologyData) as TechnologyData;\n    }\n\n    static descriptionData(partialDescriptionData: Partial<DescriptionData> = {}): DescriptionData {\n        return mergeObject({\n            value: '',\n            chat: '',\n            source: ''\n        }, partialDescriptionData) as DescriptionData;\n    }\n\n    static actionRollData(partialActionRollData: Partial<ActionRollData> = {}): ActionRollData {\n        return mergeObject({\n            type: '',\n            category: '',\n            attribute: '',\n            attribute2: '',\n            skill: '',\n            spec: false,\n            mod: 0,\n            mod_description: '',\n            limit: this.limitData(),\n            extended: false,\n            damage: this.damageData(),\n            opposed: this.opposedTestData(),\n            alt_mod: 0,\n            dice_pool_mod: []\n        }, partialActionRollData) as ActionRollData;\n    }\n\n    static limitData(partialLimitData: Partial<LimitData> = {}): LimitData {\n        return mergeObject({\n            value: 0,\n            base: 0,\n            attribute: '',\n            mod: []\n        }, partialLimitData) as LimitData;\n    }\n\n    static opposedTestData(partialOpposedTestData: Partial<OpposedTestData> = {}): OpposedTestData {\n        return mergeObject({\n            type: '',\n            attribute: '',\n            attribute2: '',\n            skill: '',\n            mod: 0,\n            description: ''\n        }, partialOpposedTestData) as OpposedTestData;\n    }\n\n    static skillData(partialSkillData: Partial<SkillField> = {}): SkillField {\n        return mergeObject({\n            name: SKILL_DEFAULT_NAME,\n            base: 0,\n            value: 0,\n            hidden: false,\n            canDefault: false,\n            label: '',\n            bonus: [],\n            specs: [],\n            mod: [],\n            attribute: ''\n        }, partialSkillData) as SkillField;\n    }\n}\n\n// TODO: Move these into DefaultValues implementations.\nexport const DataDefaults = {\n    grunt: {\n        metatype_modifiers: {\n            elf: {\n                attributes: {\n                    agility: +1,\n                    charisma: +2,\n                    edge: -1\n                }\n            },\n            ork: {\n                attributes: {\n                    body: +3,\n                    strength: +2,\n                    logic: -1,\n                    charisma: -1,\n                    edge: -1\n                }\n            },\n            troll: {\n                attributes: {\n                    body: +4,\n                    agility: -1,\n                    strength: +4,\n                    logic: -1,\n                    intuition: -1,\n                    charisma: -2,\n                    edge: -1,\n                },\n                general: {\n                    armor: +1\n                }\n            },\n            dwarf: {\n                attributes: {\n                    body: +2,\n                    reaction: -1,\n                    strength: +2,\n                    willpower: +1,\n                    edge: -1\n                }\n            }\n        }\n    },\n    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\n}","export abstract class DataWrapper<DataType> {\n    constructor(protected data: DataType) {}\n}\n","import { DataWrapper } from './DataWrapper';\nimport ConditionData = Shadowrun.ConditionData;\nimport ModList = Shadowrun.ModList;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport SpellData = Shadowrun.SpellData;\nimport TechnologyData = Shadowrun.TechnologyData;\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\nimport SpellRange = Shadowrun.SpellRange;\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\nimport ModificationItemData = Shadowrun.ModificationItemData;\n\nexport class SR5ItemDataWrapper extends DataWrapper<ShadowrunItemData> {\n    getType() {\n        return this.data.type;\n    }\n    getData(): ShadowrunItemDataData {\n        return this.data.data as ShadowrunItemDataData;\n    }\n\n    isAreaOfEffect(): boolean {\n        return this.isGrenade() || (this.isSpell() && this.getData().range === 'los_a'); //|| this.hasExplosiveAmmo();\n    }\n\n    /** Should only be used to check for actual armor item type.\n     * NOTE: Should you only care about a possible armor value use couldHaveArmor instead.\n     */\n    isArmor(): boolean {\n        return this.data.type === 'armor';\n    }\n\n    /** Will give an indicator if an item provides an armor value, without locking into only the Armor item type.\n     * NOTE: Should you only care about the armor item type use isArmor instead.\n     */\n    couldHaveArmor(): boolean {\n        const armor = this.getData().armor;\n        return this.isArmor() || armor !== undefined;\n    }\n\n    hasArmorBase(): boolean {\n        return this.hasArmor() && !this.getData().armor?.mod;\n    }\n\n    hasArmorAccessory(): boolean {\n        return this.hasArmor() && (this.getData().armor?.mod ?? false);\n    }\n\n    hasArmor(): boolean {\n        return this.getArmorValue() > 0;\n    }\n\n    isGrenade(): boolean {\n        return this.isThrownWeapon() && (this.getData().thrown?.blast.radius ?? 0) > 0;\n    }\n\n    isThrownWeapon(): boolean {\n        return this.isWeapon() && this.getData().category === 'thrown';\n    }\n\n    isWeapon(): boolean {\n        return this.data.type === 'weapon';\n    }\n\n    isModification(): boolean {\n        return this.data.type === 'modification';\n    }\n\n    isWeaponModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.data.type === 'weapon';\n    }\n\n    isArmorModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.data.type === 'armor';\n    }\n\n    isProgram(): boolean {\n        return this.data.type === 'program';\n    }\n\n    isQuality(): boolean {\n        return this.data.type === 'quality';\n    }\n\n    isAmmo(): boolean {\n        return this.data.type === 'ammo';\n    }\n\n    isCyberware(): boolean {\n        return this.data.type === 'cyberware';\n    }\n\n    isBioware(): boolean {\n        return this.data.type === 'bioware';\n    }\n\n    isBodyware(): boolean {\n        return this.isCyberware() || this.isBioware();\n    }\n\n    isCombatSpell(): boolean {\n        return this.isSpell() && this.getData().category === 'combat';\n    }\n\n    isDirectCombatSpell(): boolean {\n        if (!this.isCombatSpell()) return false;\n        return this.getData()?.combat?.type === 'direct';\n    }\n\n    isIndirectCombatSpell(): boolean {\n        if (!this.isCombatSpell()) return false;\n        return this.getData()?.combat?.type === 'indirect';\n    }\n\n    isManaSpell(): boolean {\n        if (!this.isSpell()) return false;\n        // Cast as partial spelldata due to conflicting .type between differing item types.\n        const spellData = this.getData() as Partial<SpellData>;\n        return spellData.type === 'mana';\n    }\n\n    isPhysicalSpell(): boolean {\n        if (!this.isSpell()) return false;\n        // Cast as partial spelldata due to conflicting .type between differing item types.\n        const spellData = this.getData() as Partial<SpellData>;\n        return spellData.type === 'physical';\n    }\n\n    isRangedWeapon(): boolean {\n        return this.isWeapon() && this.getData().category === 'range';\n    }\n\n    isSpell(): boolean {\n        return this.data.type === 'spell';\n    }\n\n    isSpritePower(): boolean {\n        return this.data.type === 'sprite_power';\n    }\n\n    isComplexForm(): boolean {\n        return this.data.type === 'complex_form';\n    }\n\n    isContact(): boolean {\n        return this.data.type === 'contact';\n    }\n\n    isCritterPower(): boolean {\n        return this.data.type === 'critter_power';\n    }\n\n    isMeleeWeapon(): boolean {\n        return this.data.type === 'weapon' && this.getData().category === 'melee';\n    }\n\n    isDevice(): boolean {\n        return this.data.type === 'device';\n    }\n\n    isEquipment(): boolean {\n        return this.data.type === 'equipment';\n    }\n\n    isEquipped(): boolean {\n        return this.getData().technology?.equipped || false;\n    }\n\n    isCyberdeck(): boolean {\n        return this.isDevice() && this.getData().category === 'cyberdeck';\n    }\n\n    isSin(): boolean {\n        return this.data.type === 'sin';\n    }\n\n    isLifestyle(): boolean {\n        return this.data.type === 'lifestyle';\n    }\n\n    getId(): string {\n        return this.data._id;\n    }\n\n    getBookSource(): string {\n        return this.getData().description?.source ?? '';\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.getData().technology?.condition_monitor ?? { value: 0, max: 0, label: '' };\n    }\n\n    getRating(): number {\n        return this.getData().technology?.rating || 0;\n    }\n\n    getArmorValue(): number {\n        return this.getData()?.armor?.value ?? 0;\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        // TODO clean this up\n        const { fire, electricity, cold, acid } = this.getData().armor || {};\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\n    }\n\n    getName(): string {\n        return this.data.name;\n    }\n\n    getEssenceLoss(): number {\n        return this.getData()?.essence ?? 0;\n    }\n\n    getAmmo() {\n        return this.getData().ammo;\n    }\n\n    getASDF() {\n        if (!this.isDevice()) return undefined;\n\n        // matrix attributes are set up as an object\n        const matrix = {\n            attack: {\n                value: 0,\n                device_att: '',\n            },\n            sleaze: {\n                value: 0,\n                device_att: '',\n            },\n            data_processing: {\n                value: this.getRating(),\n                device_att: '',\n            },\n            firewall: {\n                value: this.getRating(),\n                device_att: '',\n            },\n        };\n\n        if (this.isCyberdeck()) {\n            /**\n             * {\n             *     attN: {\n             *         value: number,\n             *         att: string (the ASDF attribute)\n             *     }\n             * }\n             */\n            const atts: { [key: string]: { value: number; att: string } } | undefined = this.getData().atts;\n            if (atts) {\n                for (let [key, att] of Object.entries(atts)) {\n                    matrix[att.att].value = att.value;\n                    matrix[att.att].device_att = key;\n                }\n            }\n        }\n\n        return matrix;\n    }\n\n    getQuantity(): number | undefined {\n        return this.getData()?.technology?.quantity || 1;\n    }\n\n    isAction(): boolean {\n        return this.data.type === 'action';\n    }\n\n    getAction(): ActionRollData|undefined {\n        return this.getData().action;\n    }\n\n    getActionDicePoolMod(): number | undefined {\n        return this.getData().action?.mod;\n    }\n\n    getLimitAttribute(): string | undefined {\n        return this.getData().action?.limit?.attribute;\n    }\n\n    getActionSkill(): string | undefined {\n        return this.getData().action?.skill;\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.getData().action?.attribute;\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.getData().action?.attribute2;\n    }\n\n    getActionLimit(): number | undefined {\n        return this.getData().action?.limit?.value;\n    }\n\n    getModifierList(): ModList<number> {\n        return this.getData().action?.dice_pool_mod || [];\n    }\n\n    getActionSpecialization(): string | undefined {\n        if (this.getData().action?.spec) return 'SR5.Specialization';\n        return undefined;\n    }\n\n    getDrain(): number {\n        return this.getData().drain || 0;\n    }\n\n    getFade(): number {\n        return this.getData().fade || 0;\n    }\n\n    getRecoilCompensation(): number {\n        if (!this.isRangedWeapon()) return 0;\n        const base = this.getData()?.range?.rc.value ?? '0';\n        return Number(base);\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon()) {\n            return this.getData().melee?.reach ?? 0;\n        }\n        return 0;\n    }\n\n    getTechnology(): TechnologyData|undefined {\n        if (\"technology\" in this.data.data)\n            return this.data.data.technology;\n    }\n\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\n        if (!(\"range\" in this.data.data)) return;\n\n        if (this.data.type === 'critter_power')\n            return this.data.data.range as CritterPowerRange;\n\n        if (this.data.type === 'spell')\n            return this.data.data.range as SpellRange;\n\n        if (this.data.type === 'weapon')\n            return this.data.data.range as RangeWeaponData;\n    }\n\n    hasDefenseTest(): boolean {\n        return this.getData().action?.opposed?.type === 'defense';\n    }\n\n    hasAmmo(): boolean {\n        const ammo = this.getAmmo();\n        return !!ammo\n    }\n}\n","export const registerAppHelpers = () => {\n    // TODO: Add modifiers.env typing and add missing type\n    /** Determine if a environmental modifier of a specific category is active\n     *\n     * @param active\n     * @param category A environment modifier category (wind, range, ...)\n     * @param modifier A environmental modifier value (0, -1)\n     */\n    Handlebars.registerHelper('IsEnvModifierActive', (active, category: string, modifier: number) => {\n        return active[category] === modifier;\n    })\n}","import { Helpers } from '../helpers';\nimport {SafeString} from \"handlebars\";\nimport SkillField = Shadowrun.SkillField;\nimport {SR5} from \"../config\";\nimport {FLAGS, SR, SYSTEM_NAME} from \"../constants\";\n\nexport const registerBasicHelpers = () => {\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\n        if (obj) strId = obj[strId];\n        return game.i18n.localize(strId);\n    });\n\n    Handlebars.registerHelper('localizeSkill', function (skill: SkillField): string {\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\n        // NOTE: Below is code to append a shortened attribute name to the skill name. It's been removed for readability.\n        //       But still might useful for someone.\n        // if (!game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) || !translatedSkill || !skill.attribute)\n        //     return translatedSkill;\n        //\n        // // Try showing the first three letters, or less.\n        // const translatedAttribute = game.i18n.localize(SR5.attributes[skill.attribute]);\n        // if (!translatedAttribute) return translatedSkill;\n        //\n        // const cutToIndex = translatedAttribute.length < SR.attributes.SHORT_NAME_LENGTH ?\n        //     translatedAttribute.length -1 :\n        //     SR.attributes.SHORT_NAME_LENGTH;\n        // const translatedAttributeShorthand = translatedAttribute.substring(0, cutToIndex).toUpperCase();\n        // return `${translatedSkill} (${translatedAttributeShorthand})`;\n    });\n\n    Handlebars.registerHelper('toHeaderCase', function (str) {\n        if (str) return Helpers.label(str);\n        return '';\n    });\n\n    Handlebars.registerHelper('concatStrings', function (...args) {\n        return args.filter(a => typeof a === 'string').join('');\n    });\n\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\n        if (Array.isArray(strs)) {\n            return strs.join(c);\n        }\n        return strs;\n    });\n\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\n        let accum = '';\n        for (let i = from; i < to; i += 1) {\n            accum += options.fn(i);\n        }\n\n        return accum;\n    });\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\n        return v1 % v2;\n    });\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\n        if (v2 === 0) return 0;\n        return v1 / v2;\n    });\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\n        if (obj.hasOwnProperty(prop)) {\n            return options.fn(this);\n        } else return options.inverse(this);\n    });\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\n        if (arr.includes(val)) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if greater than\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\n        if (v1 > v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if less than\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\n        if (v1 < v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if less than or equal\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\n        if (v1 <= v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if not equal\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\n        if (v1 !== v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if equal\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\n        if (v1 === v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    Handlebars.registerHelper('not', function (v1) {\n        return !v1;\n    });\n    Handlebars.registerHelper('sum', function (v1, v2) {\n        return v1 + v2;\n    });\n\n    Handlebars.registerHelper('isDefined', function (value) {\n        return value !== undefined && value !== null;\n    });\n    /**\n     * Return a fallback value if the provided value is not defined (null or undefined)\n     * NOTE: original helper 'default' caused incompatibilities with module AFK Ready Check, as both were overwriting it.\n     */\n    Handlebars.registerHelper('fallbackValue', function (value: string, defaultValue: string) {\n        return new Handlebars.SafeString(value ?? defaultValue);\n    });\n\n    Handlebars.registerHelper('log', function (value: string) {\n        console.log(value);\n    });\n    Handlebars.registerHelper('buildName', function (options) {\n        const hash: string[] = Helpers.orderKeys(options.hash);\n        const name = Object.values(hash).reduce((retVal, current, index) => {\n            if (index > 0) retVal += '.';\n            return retVal + current;\n        }, '');\n        return new Handlebars.SafeString(name);\n    });\n    Handlebars.registerHelper('disabledHelper', function (value) {\n        const val = Boolean(value);\n        return val ? val : undefined;\n    });\n    // TODO: This helper doesn't work... Don't why, but it doesn't.\n    Handlebars.registerHelper('localizeShortened', function (label: string, length: number, options: any): SafeString {\n        return new Handlebars.SafeString(Helpers.shortenAttributeLocalization(label, length));\n    });\n};\n","import { preloadHandlebarsTemplates } from './HandlebarTemplates';\nimport { registerBasicHelpers } from './BasicHelpers';\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\nimport { registerItemLineHelpers } from './ItemLineHelpers';\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\nimport {registerAppHelpers} from \"./AppHelpers\";\n\nexport class HandlebarManager {\n    static async loadTemplates() {\n        await preloadHandlebarsTemplates();\n    }\n    static registerHelpers(): void {\n        registerBasicHelpers();\n        registerRollAndLabelHelpers();\n        registerItemLineHelpers();\n        registerSkillLineHelpers();\n        registerAppHelpers();\n    }\n}","export const preloadHandlebarsTemplates = async () => {\n    const templatePaths = [\n        // actor tabs\n        'systems/shadowrun5e/dist/templates/actor/tabs/ActionsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/BioTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/GearTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MagicTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MatrixTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MiscTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SkillsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SocialTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SpellsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/CritterPowersTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/matrix/SpriteSkillsTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleSkillsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleMatrixTab.html',\n\n        // uncategorized lists\n        'systems/shadowrun5e/dist/templates/actor/parts/Initiative.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/Movement.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ProfileImage.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/NameInput.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ActionList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ContactList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/SinAndLifestyleList.html',\n\n        // magic\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/AdeptPowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellAndAdeptPowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpiritOptions.html',\n\n        // matrix\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ProgramList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ComplexFormList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/SpritePowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/DeviceRating.html',\n\n        // attributes\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Attribute.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/AttributeList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Limits.html',\n\n        // skills\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActiveSkillList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\n\n        // vehicle\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleStatsList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleSecondStatsList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleMovement.html',\n\n        // limited actor\n        'systems/shadowrun5e/dist/templates/actor-limited/character.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/spirit.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/sprite.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/vehicle.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/critter.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/Header.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCharacter.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSpirit.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSprite.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscVehicle.html',\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCritter.html',\n\n\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\n        'systems/shadowrun5e/dist/templates/item/parts/critter_power.html',\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\n        'systems/shadowrun5e/dist/templates/rolls/parts/Damage.html',\n\n        // to wrap the bodies of tabs\n        'systems/shadowrun5e/dist/templates/common/TabWrapper.html',\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\n\n        // Useful wrapper and implemented components\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\n        'systems/shadowrun5e/dist/templates/common/ValueModifiers.html',\n\n        // useful select template for the common pattern\n        'systems/shadowrun5e/dist/templates/common/Select.html',\n\n        // to create the condition monitors and edge counter\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\n\n        // looks like a ListHeader\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\n\n        'systems/shadowrun5e/dist/templates/common/NameLineBlock.html',\n\n        // list components\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html',\n\n        // dialogs\n        'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html',\n    ];\n\n    return loadTemplates(templatePaths);\n};\n","import { SR5ItemDataWrapper } from '../data/SR5ItemDataWrapper';\nimport {SR5} from \"../config\";\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\n\nexport const registerItemLineHelpers = () => {\n    Handlebars.registerHelper('ItemHeaderIcons', function (id) {\n        const PlusIcon = 'fas fa-plus';\n        const AddText = game.i18n.localize('SR5.Add');\n        const addIcon = {\n            icon: PlusIcon,\n            text: AddText,\n            title: game.i18n.localize('SR5.CreateItem'),\n            cssClass: 'item-create',\n        };\n        switch (id) {\n            case 'lifestyle':\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\n                return [addIcon];\n            case 'contact':\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\n                return [addIcon];\n            case 'sin':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\n                return [addIcon];\n            case 'license':\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\n                return [addIcon];\n            case 'quality':\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\n                return [addIcon];\n            case 'adept_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\n                return [addIcon];\n            case 'action':\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\n                return [addIcon];\n            case 'spell':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\n                return [addIcon];\n            case 'gear':\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\n                return [addIcon];\n            case 'complex_form':\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\n                return [addIcon];\n            case 'program':\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\n                return [addIcon];\n            case 'weapon':\n                addIcon.title = game.i18n.localize('SR5.CreateItemWeapon');\n                return [addIcon];\n            case 'armor':\n                addIcon.title = game.i18n.localize('SR5.CreateItemArmor');\n                return [addIcon];\n            case 'ammo':\n                addIcon.title = game.i18n.localize('SR5.CreateItemAmmo');\n                return [addIcon];\n            case 'device':\n                addIcon.title = game.i18n.localize('SR5.CreateItemDevice');\n                return [addIcon];\n            case 'equipment':\n                addIcon.title = game.i18n.localize('SR5.CreateItemEquipment');\n                return [addIcon];\n            case 'cyberware':\n                addIcon.title = game.i18n.localize('SR5.CreateItemCyberware');\n                return [addIcon];\n            case 'bioware':\n                addIcon.title = game.i18n.localize('SR5.CreateItemBioware');\n                return [addIcon];\n            case 'critter_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemCritterPower');\n                return [addIcon];\n            case 'sprite_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpritePower');\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\n        switch (id) {\n            case 'action':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Skill'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Limit'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Modifier'),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'weapon':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n            case 'ammo':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Qty'),\n                        },\n                    },\n                ];\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Target'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Fade'),\n                        },\n                    },\n                ];\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.PowerType'),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.SpellType'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.SpellRange'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Drain'),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Type'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Range'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Duration'),\n                        },\n                    },\n                ];\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.QualityType'),\n                        },\n                    },\n                ];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemRightSide', function (item: ShadowrunItemData) {\n        const wrapper = new SR5ItemDataWrapper(item);\n        const qtyInput = {\n            input: {\n                type: 'number',\n                value: wrapper.getQuantity(),\n                cssClass: 'item-qty',\n            },\n        };\n        switch (item.type) {\n            case 'action':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.activeSkills[wrapper.getActionSkill() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.attributes[wrapper.getActionAttribute() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.attributes[wrapper.getActionAttribute2() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getLimitAttribute()\n                                ? game.i18n.localize(SR5.attributes[wrapper.getLimitAttribute() ?? ''])\n                                : wrapper.getActionLimit(),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getActionDicePoolMod(),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'armor':\n            case 'ammo':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n                return [qtyInput];\n            case 'weapon':\n                if (wrapper.isRangedWeapon()) {\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\n                    const text = count < max ? `${game.i18n.localize('SR5.WeaponReload')} (${count}/${max})` : game.i18n.localize('SR5.AmmoFull');\n                    const cssClass = 'no-break' + (count < max ? ' reload-ammo roll' : 'faded');\n                    return [\n                        {\n                            text: {\n                                title: `${game.i18n.localize('SR5.WeaponAmmoCount')}: ${count}`,\n                                text,\n                                cssClass,\n                            },\n                        },\n                        {\n                            text: {\n                                text: '',\n                            },\n                        },\n                        qtyInput,\n                    ];\n                } else {\n                    return [qtyInput];\n                }\n\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.qualityTypes[item.data.type ?? '']),\n                        },\n                    },\n                ];\n\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.adeptPower.types[item.data.type ?? '']),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.spellTypes[item.data.type ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.spellRanges[item.data.range ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.durations[item.data.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getDrain(),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.critterPower.types[item.data.powerType ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.critterPower.ranges[item.data.range ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.critterPower.durations[item.data.duration ?? '']),\n                        },\n                    },\n                ];\n\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.matrixTargets[item.data.target ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR5.durations[item.data.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: String(item.data.fade),\n                        },\n                    },\n                ];\n            case 'program':\n                return [\n                    {\n                        button: {\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\n                            short: true,\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\n                        },\n                    },\n                ];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemIcons', function (item: ShadowrunItemData) {\n        const wrapper = new SR5ItemDataWrapper(item);\n        const editIcon = {\n            icon: 'fas fa-edit item-edit',\n            title: game.i18n.localize('SR5.EditItem'),\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash item-delete',\n            title: game.i18n.localize('SR5.DeleteItem'),\n        };\n        const equipIcon = {\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\n            title: game.i18n.localize('SR5.ToggleEquip'),\n        };\n        const pdfIcon = {\n            icon: 'fas fa-file open-source-pdf',\n            title: game.i18n.localize('SR5.OpenSourcePdf'),\n        };\n\n        const icons = [editIcon, removeIcon];\n\n        if (ui['PDFoundry']) {\n            icons.unshift(pdfIcon);\n        }\n\n        switch (wrapper.getType()) {\n            case 'program':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n            case 'weapon':\n                icons.unshift(equipIcon);\n        }\n\n        return icons;\n    });\n};\n","import { PartsList } from '../parts/PartsList';\nimport ModList = Shadowrun.ModList;\nimport {SR5Actor} from \"../actor/SR5Actor\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\nimport {Helpers} from \"../helpers\";\nimport {SafeString} from \"handlebars\";\nimport DamageData = Shadowrun.DamageData;\n\nexport const registerRollAndLabelHelpers = () => {\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\n        if (damage === 'physical') return 'P';\n        if (damage === 'stun') return 'S';\n        if (damage === 'matrix') return 'M';\n        return '';\n    });\n\n    Handlebars.registerHelper('damageCode', function(damage: DamageData): SafeString {\n        const typeCode = Handlebars.helpers.damageAbbreviation(damage.type.value);\n        let code = `${damage.value}${typeCode}`;\n        return new Handlebars.SafeString(code);\n    });\n\n    Handlebars.registerHelper('diceIcon', function (side) {\n        if (side) {\n            switch (side) {\n                case 1:\n                    return 'red';\n                case 2:\n                    return 'grey';\n                case 3:\n                    return 'grey';\n                case 4:\n                    return 'grey';\n                case 5:\n                    return 'green';\n                case 6:\n                    return 'green';\n            }\n        }\n    });\n\n    Handlebars.registerHelper('elementIcon', function (element) {\n        let icon = '';\n        if (element === 'electricity') {\n            icon = 'fas fa-bolt';\n        } else if (element === 'radiation') {\n            icon = 'fas fa-radiation-alt';\n        } else if (element === 'fire') {\n            icon = 'fas fa-fire';\n        } else if (element === 'acid') {\n            icon = 'fas fa-vials';\n        } else if (element === 'cold') {\n            icon = 'fas fa-snowflake';\n        }\n        return icon;\n    });\n\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\n        const parts = new PartsList(partsList);\n        return parts.total;\n    });\n\n    Handlebars.registerHelper('signedValue', function (value: number): string {\n        if (value > 0) {\n            return `+${value}`;\n        } else {\n            return `${value}`;\n        }\n    });\n\n    Handlebars.registerHelper('speakerName', Helpers.getChatSpeakerName);\n};\n","import SkillField = Shadowrun.SkillField;\nimport { Helpers } from '../helpers';\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\nimport SkillCategories = Shadowrun.SkillCategories;\nimport {SkillRules} from \"../rules/SkillRules\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\n\nexport const registerSkillLineHelpers = () => {\n    Handlebars.registerHelper('SkillHeaderIcons', function (category: SkillCategories) {\n        const addIcon = {\n            icon: 'fas fa-plus',\n            title: game.i18n.localize('SR5.AddSkill'),\n            text: game.i18n.localize('SR5.Add'),\n            cssClass: '',\n        };\n        switch (category) {\n            case 'active':\n                addIcon.cssClass = 'add-active';\n                return [addIcon];\n            case 'language':\n                addIcon.cssClass = 'add-language';\n                return [addIcon];\n            case 'knowledge':\n                addIcon.cssClass = 'add-knowledge';\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id, filters: SR5SheetFilters) {\n        const specs = {\n            text: {\n                text: game.i18n.localize('SR5.Specialization'),\n                cssClass: 'skill-spec-item',\n            },\n        };\n\n        const rtg = {\n            // Change Rating header to show active filtering.\n            text: {\n                text: !filters || filters.showUntrainedSkills ?\n                    game.i18n.localize('SR5.Rtg') :\n                    game.i18n.localize('SR5.RtgAboveZero'),\n                cssClass: 'rtg',\n            },\n        };\n\n        switch (id) {\n            case 'active':\n            case 'knowledge':\n            case 'language':\n                return [specs, rtg];\n            default:\n                return [];\n        }\n    });\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\n        return [\n            {\n                text: {\n                    text: specs.join(', ') ?? '',\n                    cssClass: 'skill-spec-item',\n                },\n            },\n            {\n                text: {\n                    text: Helpers.calcTotal(skill),\n                    cssClass: 'rtg',\n                },\n            },\n        ];\n    });\n\n    Handlebars.registerHelper('SkillAdditionCssClass', function(skill: SkillField): string[] {\n        const classes: string[] = [];\n\n        // @PDF SR5#151 not defaultable skills should be shown as italic.\n        if (game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) && !SkillRules.allowDefaultingRoll(skill)) {\n            classes.push('skill-roll-not-defaultable');\n        }\n\n        return classes;\n    })\n\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\n        const editIcon = {\n            icon: 'fas fa-edit',\n            title: game.i18n.localize('SR5.EditSkill'),\n            cssClass: '',\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash',\n            title: game.i18n.localize('SR5.DeleteSkill'),\n            cssClass: '',\n        };\n        switch (skillType) {\n            case 'active':\n                editIcon.cssClass = 'skill-edit';\n                removeIcon.cssClass = 'remove-active'\n                return [editIcon, removeIcon];\n            case 'language':\n                editIcon.cssClass = 'language-skill-edit';\n                removeIcon.cssClass = 'remove-language';\n                return [editIcon, removeIcon];\n            case 'knowledge':\n                editIcon.cssClass = 'knowledge-skill-edit';\n                removeIcon.cssClass = 'remove-knowledge';\n                return [editIcon, removeIcon];\n            default:\n                return [editIcon];\n        }\n    });\n\n};\n","import AttributeField = Shadowrun.AttributeField;\nimport SkillField = Shadowrun.SkillField;\nimport ModifiableValue = Shadowrun.ModifiableValue;\nimport LabelField = Shadowrun.LabelField;\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\nimport DamageData = Shadowrun.DamageData;\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport DamageType = Shadowrun.DamageType;\nimport DamageElement = Shadowrun.DamageElement;\nimport {PartsList} from './parts/PartsList';\nimport {DEFAULT_ID_LENGTH, FLAGS, LENGTH_UNIT, LENGTH_UNIT_TO_METERS_MULTIPLIERS, SR, SYSTEM_NAME} from \"./constants\";\nimport {SR5Actor} from \"./actor/SR5Actor\";\nimport {DeleteConfirmationDialog} from \"./apps/dialogs/DeleteConfirmationDialog\";\nimport { SR5Item } from './item/SR5Item';\nimport Skills = Shadowrun.Skills;\nimport {ShadowrunRoll} from \"./rolls/ShadowrunRoller\";\nimport {DataDefaults} from \"./data/DataDefaults\";\n\ninterface CalcTotalOptions {\n    min?: number,\n    max?: number\n}\n\nexport class Helpers {\n    /**\n     * Calculate the total value for a data object\n     * - stores the total value and returns it\n     * @param value\n     * @param options min will a apply a minimum value, max will apply a maximum value.\n     */\n    static calcTotal(value: ModifiableValue, options?: CalcTotalOptions): number {\n        if (value.mod === undefined) value.mod = [];\n        const parts = new PartsList(value.mod);\n        // if a temp field is found, add it as a unique part\n        if (value['temp'] !== undefined) {\n            parts.addUniquePart('SR5.Temporary', value['temp']);\n        }\n\n        value.value = Helpers.roundTo(parts.total + value.base, 3);\n        value.mod = parts.list;\n\n        value.value = Helpers.applyValueRange(value.value, options);\n\n        return value.value;\n    }\n\n    /** Round a number to a given degree.\n     *\n     * @param value Number to round with.\n     * @param decimals Amount of decimals after the decimal point.\n     */\n    static roundTo(value: number, decimals): number {\n        const multiplier = Math.pow(10, decimals);\n        return Math.round(value * multiplier) / multiplier;\n    }\n\n    /** Make sure a given value is in between a range.\n     *\n     * @param value\n     * @param options Define the range the given value must be in (or none)\n     */\n    static applyValueRange(value: number, options?: CalcTotalOptions): number {\n        if (typeof options?.min === 'number') {\n            value = Math.max(options.min, value);\n        }\n        if (typeof options?.max === 'number') {\n            value = Math.min(options.max, value);\n        }\n\n        return value;\n    }\n\n    static listItemId(event) {\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\n    static onSetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\n            newData[newKey] = this.onSetFlag(value);\n        }\n        return newData;\n    }\n\n    // replace 'SR5_DOT_' with 'SR5.' on keys\n    static onGetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\n            newData[newKey] = this.onGetFlag(value);\n        }\n        return newData;\n    }\n\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\n        if (!atts) return false;\n        if (typeof atts === 'boolean') return atts;\n        // array of labels to check for on the incoming data\n        const matrixLabels = [\n            'SR5.MatrixAttrFirewall',\n            'SR5.MatrixAttrDataProcessing',\n            'SR5.MatrixAttrSleaze',\n            'SR5.MatrixAttrAttack',\n            'SR5.SkillComputer',\n            'SR5.SkillHacking',\n            'SR5.SkillCybercombat',\n            'SR5.SkillElectronicWarfare',\n            'SR5.Software',\n        ];\n        if (!Array.isArray(atts)) atts = [atts];\n        atts = atts.filter((att) => att);\n        // iterate over the attributes and return true if we find a matrix att\n        for (const att of atts) {\n            if (typeof att === 'string') {\n                if (matrixLabels.indexOf(att) >= 0) {\n                    return true;\n                }\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\n                    return true;\n                }\n            }\n        }\n        // if we don't find anything return false\n        return false;\n    }\n\n    static parseInputToString(val: number | string | string[] | undefined): string {\n        if (val === undefined) return '';\n        if (typeof val === 'number') return val.toString();\n        if (typeof val === 'string') return val;\n        if (Array.isArray(val)) {\n            return val.join(',');\n        }\n        return '';\n    }\n\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n            const ret = +val;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        if (Array.isArray(val)) {\n            const str = val.join('');\n            const ret = +str;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        return 0;\n    }\n\n    static setupCustomCheckbox(app, html) {\n        const setContent = (el) => {\n            const checkbox = $(el).children('input[type=checkbox]');\n            const checkmark = $(el).children('.checkmark');\n            if ($(checkbox).prop('checked')) {\n                $(checkmark).addClass('fa-check-circle');\n                $(checkmark).removeClass('fa-circle');\n            } else {\n                $(checkmark).addClass('fa-circle');\n                $(checkmark).removeClass('fa-check-circle');\n            }\n        };\n        html.find('label.checkbox').each(function () {\n            setContent(this);\n        });\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\n    }\n\n    static mapRoundsToDefenseMod(rounds) {\n        if (rounds === 1) return 0;\n        if (rounds === 3) return -2;\n        if (rounds === 6) return -5;\n        if (rounds === 10) return -9;\n        return 0;\n    }\n\n    static mapRoundsToDefenseDesc(rounds) {\n        if (rounds === 1) return '';\n        if (rounds === 3) return '-2';\n        if (rounds === 6) return '-5';\n        if (rounds === 10) return '-9';\n        if (rounds === 20) return 'SR5.DuckOrCover';\n        return '';\n    }\n\n    static label(str) {\n        const frags = str.split('_');\n        for (let i = 0; i < frags.length; i++) {\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\n        }\n        frags.forEach((frag, idx) => {\n            if (frag === 'Processing') frags[idx] = 'Proc.';\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\n        });\n        return frags.join(' ');\n    }\n\n    static orderKeys(obj) {\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\n            if (k1 < k2) return -1;\n            if (k1 > k2) return +1;\n            return 0;\n        });\n\n        let i;\n        const after = {};\n        for (i = 0; i < keys.length; i++) {\n            after[keys[i]] = obj[keys[i]];\n            delete obj[keys[i]];\n        }\n\n        for (i = 0; i < keys.length; i++) {\n            obj[keys[i]] = after[keys[i]];\n        }\n        return obj;\n    }\n\n    static hasModifiers(event) {\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\n    }\n\n    static filter(obj, comp) {\n        const retObj = {};\n        if (typeof obj === 'object' && obj !== null) {\n            Object.entries(obj).forEach(([key, value]) => {\n                if (comp([key, value])) retObj[key] = value;\n            });\n        }\n        return retObj;\n    }\n\n    static addLabels(obj, label) {\n        if (typeof obj === 'object' && obj !== null) {\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\n                obj.label = label;\n            }\n            Object.entries(obj)\n                .filter(([, value]) => typeof value === 'object')\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\n        }\n    }\n\n    /* Handle Shadowrun style shortened attribute names with typical three letter shortening. */\n    static shortenAttributeLocalization(label: string, length: number = 3): string {\n        const name = game.i18n.localize(label);\n\n        if (length <= 0) {\n            return name;\n        }\n\n        if (name.length < length) {\n            length = name.length;\n        }\n\n        return name.slice(0, length).toUpperCase();\n    }\n\n    // TODO: Foundry 0.9 Should TokenDocument be used instead of Token?\n    // TODO: Check canvas.scene.tokens\n    static getToken(id?: string): Token | undefined {\n        if (!canvas || !canvas.ready) return;\n\n        for (const token of canvas.tokens.placeables) {\n            if (token.id === id) {\n                return token;\n            }\n        }\n    }\n\n    /**\n     * Use this helper to get a tokens actor from any given scene id, while the sceneTokenId is a mixed ID\n     * @param sceneTokenId A mixed id with the format '<sceneId>.<tokenid>\n     */\n    static getSceneTokenActor(sceneTokenId: string): SR5Actor | undefined {\n        const [sceneId, tokenId] = sceneTokenId.split('.');\n        const scene = game.scenes.get(sceneId);\n        if (!scene) return;\n        // @ts-ignore\n        const token = scene.tokens.get(tokenId);\n        if (!token) return;\n        return token.getActor();\n    }\n\n    static getUserTargets(user?: User|null): Token[] {\n        user = user ? user : game.user;\n\n        if (!user) return []\n\n        return Array.from(user.targets);\n    }\n\n    static userHasTargets(user?: User|null): boolean {\n        user = user ? user : game.user;\n\n        if (!user) return false;\n\n        return user.targets.size > 0;\n    }\n\n    static measureTokenDistance(tokenOrigin: Token, tokenDest: Token): number {\n        if (!canvas || !canvas.ready || !canvas.scene) return 0;\n\n        if (!tokenOrigin || !tokenDest) return 0;\n\n        const origin = new PIXI.Point(...canvas.grid.getCenter(tokenOrigin.data.x, tokenOrigin.data.y));\n        const dest = new PIXI.Point(...canvas.grid.getCenter(tokenDest.data.x, tokenDest.data.y));\n\n        // TODO: Used to be const distanceInGridUnits = canvas.grid.measureDistance(origin, dest, {gridSpaces: true});\n        //       Double Check for errors.\n        const distanceInGridUnits = canvas.grid.measureDistance(origin, dest);\n        const sceneUnit = canvas.scene.data.gridUnits;\n        return Helpers.convertLengthUnit(distanceInGridUnits, sceneUnit);\n    }\n\n    static convertLengthUnit(length: number, fromUnit: string): number {\n        //@ts-ignore\n        fromUnit = fromUnit.toLowerCase();\n\n        if (!LENGTH_UNIT_TO_METERS_MULTIPLIERS.hasOwnProperty(fromUnit)) {\n            console.error(`Distance can't be converted from ${fromUnit} to ${LENGTH_UNIT}`);\n            return 0;\n        }\n\n        // Round down since X.8 will hit X and not X+1.\n        return Math.floor(length * LENGTH_UNIT_TO_METERS_MULTIPLIERS[fromUnit]);\n    }\n\n    static getWeaponRange(distance: number, ranges: RangesTemplateData): RangeTemplateData {\n        // Assume ranges to be in ASC order and to define their max range.\n        // Should no range be found, assume distance to be out of range.\n        const rangeKey = Object.keys(ranges).find(range => distance < ranges[range].distance);\n        if (rangeKey) {\n            return ranges[rangeKey];\n        } else {\n            const {extreme} = ranges;\n            return Helpers.createRangeDescription('SR5.OutOfRange', extreme.distance, SR.combat.environmental.range_modifiers.out_of_range);\n        }\n    }\n\n    static getControlledTokens(): Token[] {\n        if (!canvas || !canvas.ready) return [];\n        return canvas.tokens.controlled;\n    }\n\n    static getSelectedActorsOrCharacter(): SR5Actor[] {\n        const tokens = Helpers.getControlledTokens();\n        const actors = tokens.map(token => token.actor);\n\n        // Try to default to a users character.\n        if (actors.length === 0 && game.user?.character) {\n            actors.push(game.user?.character);\n        }\n\n        return actors as SR5Actor[];\n    }\n\n    static createRangeDescription(label: string, distance: number, modifier: number): RangeTemplateData {\n        label = game.i18n.localize(label);\n        return {label, distance, modifier}\n    }\n\n    static convertIndexedObjectToArray(indexedObject: object): object[] {\n        return Object.keys(indexedObject).map((index) => {\n            if (Number.isNaN(index)) {\n                console.warn('An object with no numerical index was given, which is likely a bug.', indexedObject);\n            }\n            return indexedObject[index];\n        });\n    }\n\n    static getChatSpeakerName(actor: SR5Actor): string {\n        if (!actor) return '';\n\n        const useTokenNameForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\n        const token = actor.getToken();\n\n        if (useTokenNameForChatOutput && token) return token.data.name;\n\n        return actor.name;\n    }\n\n    static createDamageData(value: number, type: DamageType, ap: number = 0, element: DamageElement = '', sourceItem? : SR5Item): DamageData {\n        const damage = duplicate(DataDefaults.damage) as DamageData;\n        damage.base = value;\n        damage.value = value;\n        damage.type.base = type;\n        damage.type.value = type;\n        damage.ap.base = ap;\n        damage.ap.value = ap;\n        damage.element.base = element;\n        damage.element.value = element;\n\n        if (sourceItem && sourceItem.actor) {\n            damage.source = {\n                actorId: sourceItem.actor.id,\n                itemType: sourceItem.type,\n                itemId: sourceItem.id,\n                itemName: sourceItem.name\n            };\n        }\n\n        return damage;\n    }\n\n    /**\n     * Retrieves the item causing the damage, if there is any.\n     * This only works for embedded items at the moment\n     */\n    static findDamageSource(damageData : DamageData) : SR5Item | undefined{\n        if (!damageData.source) {\n            return;\n        }\n\n        const actorId = damageData.source.actorId;\n        const actorSource = game.actors.find(\n            actor => actor.id === actorId\n            );\n\n        if (!actorSource) {\n            return;\n        }\n\n        // First search the actor itself for the item\n        const itemId = damageData.source.itemId;\n        const actorItem = actorSource.items.get(itemId) as unknown as SR5Item;\n        if (actorItem)\n        {\n            return actorItem;\n        }\n\n        // If we did not find anything on the actor, search the active tokens (the item might only exist on a non linked token)\n        // This will not work if we are on a different scene or the token got deleted, which is expected when you put an\n        // item on a token without linking it.\n        const tokens = actorSource.getActiveTokens();\n        let tokenItem : SR5Item | undefined;\n        tokens.forEach(token => {\n            const foundItem = token.actor.items.find(i => i.id === itemId);\n            if (foundItem) {\n                tokenItem = foundItem as unknown as SR5Item;\n            }\n        });\n\n        return tokenItem;\n    }\n\n    /** Modifies given damage value and returns both original and modified damage\n     *\n     * For better readability reduceDamageByHits wraps this method to avoid negative params in the call signature.\n     * so instead of\n     * > modifyDamageByHits(incoming, -hits, label)\n     * do this instead\n     * > reduceDamageByHits(incoming, hits, label)\n     *\n     * @param incoming A DamageData value to be modified from\n     * @param hits Positive or negative hits to change the damage value with.\n     * @param modificationLabel The translatable label for the modification\n     */\n    static modifyDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\n        const modified = duplicate(incoming) as DamageData;\n        modified.mod = PartsList.AddUniquePart(modified.mod, modificationLabel, hits);\n        modified.value = Helpers.calcTotal(modified, {min: 0});\n\n        return {incoming, modified};\n    }\n\n    /** Reduces given damage value and returns both original and modified damage.\n     *\n     * Should you want RAISE the damage value, use modifyDamageByHits directly.\n     *\n     * @param incoming A DamageData value to be modified from\n     * @param hits Positive hits to reduce the damage value with! Should the hits amount be negative, use modifyDamageByHits.\n     * @param modificationLabel The translatable label for the modification\n     */\n    static reduceDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\n        if (hits < 0) {\n            console.warn('Helpers.reduceDamageByHits should only be called with positive hits values to avoid confusion');\n        }\n        return Helpers.modifyDamageByHits(incoming, -hits, modificationLabel);\n    }\n\n    static async confirmDeletion(): Promise<boolean> {\n        const dialog = new DeleteConfirmationDialog();\n        await dialog.select();\n        return !dialog.canceled && dialog.selectedButton === 'delete';\n    }\n\n    /**\n     * This can be used to create an SkillField into the Skills data path during the Skill creation process.\n     *\n     * @param skillDataPath Could be 'data.skills.active' or 'data.skill.language.value' or more\n     * @param skillField A SkillField with whatever values. You could use DefaultValues.skillData to create one.\n     * @param idLength How long should the id (GUID) be?\n     */\n    static getRandomIdSkillFieldDataEntry(skillDataPath: string, skillField: SkillField, idLength: number = DEFAULT_ID_LENGTH): { id: string, updateSkillData: { [skillDataPath: string]: { [id: string]: SkillField } } } | undefined {\n        if (!skillDataPath || skillDataPath.length === 0) return;\n\n        const id = randomID(idLength);\n        const updateSkillData = {\n            [skillDataPath]: {[id]: skillField}\n        };\n\n        return {\n            id,\n            updateSkillData\n        }\n    }\n\n    /**\n     * A simple helper to get an data entry for updating with Entity.update\n     *\n     * @param path The main data path as a doted string relative from the type data (not document data).\n     * @param value Whatever needs to be stored.\n     *\n     */\n    static getUpdateDataEntry(path: string, value: any): {[path: string]: any} {\n        return {[path]: value};\n    }\n    /**\n     * A simple helper to delete existing document data keys with Entity.update\n     *\n     * @param path The main data path as doted string relative from the item type data (not document data). data.skills.active\n     * @param key The single sub property within the path that's meant to be deleted. 'test'\n     *\n     * @return An expected return object could look like this: {'data.skills.active': {'-=Pistols': null}} and would\n     *         remove the Pistols key from the 'data.skills.active' path within Entity.data.data.skills.active.\n     */\n    static getDeleteDataEntry(path: string, key: string): {[path: string]: {[key: string]: null}} {\n        // Entity.update utilizes the mergeObject function within Foundry.\n        // That functions documentation allows property deletion using the -= prefix before property key.\n        return {[path]: {[`-=${key}`]: null}};\n    }\n\n    static localizeSkill(skill: SkillField): string {\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\n    }\n\n    /**\n     * Alphabetically sort skills either by their translated label. Should a skill not have one, use the name as a\n     * fallback.\n     *\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\n     *\n     * @param skills\n     * @param asc Set to true for ascending sorting order and to false for descending order.\n     * @return Sorted Skills given by the skills parameter\n     */\n    static sortSkills(skills: Skills, asc: boolean=true): Skills {\n        // Filter entries instead of values to have a store of ids for easy rebuild.\n        const sortedEntries = Object.entries(skills).sort(([aId, a], [bId, b]) => {\n            const comparatorA = Helpers.localizeSkill(a) || aId;\n            const comparatorB = Helpers.localizeSkill(b) || bId;\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\n            if (asc)\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\n            else\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\n        });\n\n        // Rebuild the Skills type using the earlier entries.\n        const sortedAsObject = {};\n        for (const [id, skill] of sortedEntries) {\n            sortedAsObject[id] = skill;\n        }\n\n        return sortedAsObject;\n    }\n\n    /**\n     * Alphabetically sort any SR5 config object with a key to label structure.\n     *\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\n     *\n     * @param configValues The config value to be sorted\n     * @param asc Set to true for ascending sorting order and to false for descending order.\n     * @return Sorted config values given by the configValues parameter\n     */\n    static sortConfigValuesByTranslation(configValues: Record<string, string>, asc: boolean=true): Record<string, string> {\n        // Filter entries instead of values to have a store of ids for easy rebuild.\n        const sortedEntries = Object.entries(configValues).sort(([aId, a], [bId, b]) => {\n            const comparatorA = game.i18n.localize(a);\n            const comparatorB = game.i18n.localize(b);\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\n            if (asc)\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\n            else\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\n        });\n\n        // Rebuild the skills type using the earlier entries.\n        const sortedAsObject = {};\n        for (const [key, translated] of sortedEntries) {\n            sortedAsObject[key] = translated;\n        }\n        return sortedAsObject;\n    }\n\n    /**\n     * Return a list of users with the given permission for the given document.\n     *\n     * @param document A foundry Document implementation.\n     * @param permission A foundry access permission\n     * @param active If true, will only return users that are also currently active.\n     */\n    static getPlayersWithPermission(document: Entity, permission: string, active: boolean = true): User[] {\n        return game.users.filter(user => {\n            if (user.isGM) return false;\n            // Check for permissions.\n            // @ts-ignore // TODO: foundry-vtt-types 0.8 missing testUserPermission for Documents (it's not DocumentClientMixin)\n            if (!document.testUserPermission(user, permission)) return false;\n            // Check for active state.\n            if (active && !user.active) return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Handle the special skill cases with id equals name and possible i18n\n     *\n     * @param skill\n     * @returns Either a translation or a name.\n     */\n    static getSkillLabelOrName(skill: SkillField): string {\n        // Custom skills don't have labels, use their name instead.\n        return skill.label ? game.i18n.localize(skill.label) : skill.name || '';\n    }\n\n\n    /**\n     * Support for the Dice So Nice module\n     *\n     * Dice So Nice Roll API: https://gitlab.com/riccisi/foundryvtt-dice-so-nice/-/wikis/API/Roll\n     *\n     * @param roll The roll thrown.\n     * @param whisper The user ids the roll should be shown to. Null for show all.\n     * @param blind Is the roll blind to current user?\n     *\n     */\n    static async showDiceSoNice(roll: ShadowrunRoll, whisper: string[] = null, blind: boolean = false) {\n        if (!game.dice3d) return;\n        // @ts-ignore\n        const synchronize = whisper?.length === 0 || whisper === null;\n        // @ts-ignore\n        whisper = whisper?.length > 0 ? whisper : null;\n        // @ts-ignore\n        await game.dice3d.showForRoll(roll, game.user, synchronize, whisper, blind);\n    }\n}\n","import { SR5 } from './config';\nimport { Migrator } from './migrator/Migrator';\nimport { registerSystemSettings } from './settings';\nimport { SYSTEM_NAME } from './constants';\nimport { SR5Actor } from './actor/SR5Actor';\nimport { SR5ActorSheet } from './actor/SR5ActorSheet';\nimport { SR5Item } from './item/SR5Item';\nimport { SR5ItemSheet } from './item/SR5ItemSheet';\nimport { ShadowrunRoller } from './rolls/ShadowrunRoller';\nimport { Helpers } from './helpers';\nimport { HandlebarManager } from './handlebars/HandlebarManager';\nimport { measureDistance } from './canvas';\nimport * as chat from './chat';\nimport {createItemMacro, createSkillMacro, rollItemMacro, rollSkillMacro} from './macros';\n\nimport { OverwatchScoreTracker } from './apps/gmtools/OverwatchScoreTracker';\nimport {_combatantGetInitiativeFormula, SR5Combat} from './combat/SR5Combat';\nimport { Import } from './importer/apps/import-form';\nimport {ChangelogApplication} from \"./apps/ChangelogApplication\";\nimport {EnvModifiersApplication} from \"./apps/EnvModifiersApplication\";\nimport {quenchRegister} from \"../test/quench\";\n\n// Redeclare SR5config as a global as foundry-vtt-types CONFIG with SR5 property causes issues.\n// TODO: Figure out how to change global CONFIG type\nexport const SR5CONFIG = SR5;\n\nexport class HooksManager {\n    static registerHooks() {\n        // Register your highest level hook callbacks here for a quick overview of what's hooked into.\n\n        Hooks.once('init', HooksManager.init);\n\n        Hooks.on('canvasInit', HooksManager.canvasInit);\n        Hooks.on('ready', HooksManager.ready);\n        Hooks.on('renderChatMessage', HooksManager.renderChatMessage);\n        Hooks.on('getChatLogEntryContext', chat.addChatMessageContextOptions);\n        Hooks.on('hotbarDrop', HooksManager.hotbarDrop);\n        Hooks.on('renderSceneControls', HooksManager.renderSceneControls);\n        Hooks.on('getSceneControlButtons', HooksManager.getSceneControlButtons);\n        Hooks.on('getCombatTrackerEntryContext', SR5Combat.addCombatTrackerContextOptions);\n        Hooks.on('renderItemDirectory', HooksManager.renderItemDirectory);\n        Hooks.on('renderTokenHUD', EnvModifiersApplication.addTokenHUDFields);\n\n        // Foundry VTT Module 'quench': https://github.com/schultzcole/FVTT-Quench\n        Hooks.on('quenchReady', quenchRegister);\n    }\n\n    static init() {\n        console.log(`Loading Shadowrun 5e System\n___________________\n ___________ _____ \n/  ___| ___ \\\\  ___|\n\\\\ \\`--.| |_/ /___ \\\\ \n \\`--. \\\\    /    \\\\ \\\\\n/\\\\__/ / |\\\\ \\\\/\\\\__/ /\n\\\\____/\\\\_| \\\\_\\\\____/ \n===================\n`);\n        // Create a shadowrun5e namespace within the game global\n        game['shadowrun5e'] = {\n            SR5Actor,\n            ShadowrunRoller,\n            SR5Item,\n            rollItemMacro,\n            rollSkillMacro\n        };\n\n        // @ts-ignore // foundry-vtt-types is missing CONFIG.<>.documentClass\n        CONFIG.Actor.documentClass = SR5Actor;\n        // @ts-ignore // foundry-vtt-types is missing CONFIG.<>.documentClass\n        CONFIG.Item.documentClass = SR5Item;\n        // @ts-ignore // foundry-vtt-types is missing CONFIG.<>.documentClass\n        CONFIG.Combat.documentClass = SR5Combat;\n        // Register initiative directly (outside of system.json) as DnD5e does it.\n        CONFIG.Combat.initiative.formula =  \"@initiative.current.base.value[Base] + @initiative.current.dice.text[Dice] - @wounds.value[Wounds]\";\n        // @ts-ignore\n        Combatant.prototype._getInitiativeFormula = _combatantGetInitiativeFormula;\n\n\n        registerSystemSettings();\n\n        // Register sheet application classes\n        // NOTE: See dnd5e for a multi class approach for all actor types using the types array in Actors.registerSheet\n        Actors.unregisterSheet('core', ActorSheet);\n        Actors.registerSheet(SYSTEM_NAME, SR5ActorSheet, {\n            label: \"SR5.SheetActor\",\n            makeDefault: true\n        });\n        Items.unregisterSheet('core', ItemSheet);\n        Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, {\n            label: \"SR5.SheetItem\",\n            makeDefault: true\n        });\n\n        ['renderSR5ActorSheet', 'renderSR5ItemSheet'].forEach((s) => {\n            Hooks.on(s, (app, html) => Helpers.setupCustomCheckbox(app, html));\n        });\n\n        HandlebarManager.loadTemplates();\n    }\n\n    static async ready() {\n        if (game.user?.isGM) {\n            await Migrator.BeginMigration();\n\n            if (ChangelogApplication.showApplication) {\n                await new ChangelogApplication().render(true);\n            }\n\n        }\n\n        // TODO make based on foundry version\n        const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\n        $(document).on('click', diceIconSelector, () => ShadowrunRoller.promptRoll());\n        const diceIconSelectorNew = '#chat-controls .chat-control-icon .fa-dice-d20';\n        $(document).on('click', diceIconSelectorNew, () => ShadowrunRoller.promptRoll());\n    }\n\n    static canvasInit() {\n        if (!canvas?.ready) return;\n        // @ts-ignore // TODO: foundry-vtt-types 0.8 diagonaleRule doesn't exist on  anymore... does this even work anymore?\n        canvas.grid.diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\n        //@ts-ignore // TODO: TYPE SquareGrid isn't typed.\n        SquareGrid.prototype.measureDistances = measureDistance;\n    }\n\n    /**\n     * Hanlde drop events on the hotbar creating different macros\n     *\n     * @param bar\n     * @param data\n     * @param slot\n     * @return false NOTE: when the hook call propagation should be stopped.\n     */\n    static async hotbarDrop(bar, data, slot) {\n        switch (data.type) {\n            case 'Item':\n                await createItemMacro(data.data, slot);\n                return false;\n            case 'Skill':\n                await createSkillMacro(data.data, slot);\n                return false;\n            default:\n                return;\n        }\n    }\n\n    static renderSceneControls(controls, html) {\n        html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\n            event.preventDefault();\n            new OverwatchScoreTracker().render(true);\n        });\n    }\n\n    static getSceneControlButtons(controls) {\n        const tokenControls = controls.find((c) => c.name === 'token');\n\n        if (game.user?.isGM) {\n            tokenControls.tools.push({\n                name: 'overwatch-score-tracker',\n                title: 'CONTROLS.SR5.OverwatchScoreTracker',\n                icon: 'fas fa-network-wired',\n                button: true\n            });\n        }\n\n        tokenControls.tools.push(EnvModifiersApplication.getControl());\n    }\n\n    static renderChatMessage(message, html, data) {\n        chat.addRollListeners(message, html);\n    }\n\n    static renderItemDirectory(app: Application, html: JQuery) {\n        const button = $('<button>Import Chummer Data</button>');\n        html.find('footer').before(button);\n        button.on('click', (event) => {\n            new Import().render(true);\n        });\n    }\n\n}\n","import { WeaponImporter } from '../importer/WeaponImporter';\nimport { ArmorImporter } from '../importer/ArmorImporter';\nimport { DataImporter } from '../importer/DataImporter';\nimport { AmmoImporter } from '../importer/AmmoImporter';\nimport { ModImporter } from '../importer/ModImporter';\nimport { SpellImporter } from '../importer/SpellImporter';\nimport { QualityImporter } from '../importer/QualityImporter';\nimport { ComplexFormImporter } from '../importer/ComplexFormImporter';\nimport { WareImporter } from '../importer/WareImporter';\nimport { CritterPowerImporter } from '../importer/CritterPowerImporter';\nimport { ImportHelper, ImportMode } from '../helper/ImportHelper';\nimport {DeviceImporter} from \"../importer/DeviceImporter\";\nimport {EquipmentImporter} from \"../importer/EquipmentImporter\";\n\n\nexport class Import extends Application {\n    private supportedDataFiles: string[] = [];\n    private dataFiles: File[] = [];\n    private langDataFile: File;\n    private parsedFiles: string[] = [];\n    private disableImportButton: boolean = true;\n    private currentParsedFile: string;\n\n    constructor() {\n        super();\n\n        this.collectDataImporterFileSupport();\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'chummer-data-import';\n        options.classes = ['app', 'window-app', 'filepicker'];\n        options.title = 'Chummer/Data Import';\n        options.template = 'systems/shadowrun5e/dist/templates/apps/compendium-import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    getData(options?: any) {\n        // @ts-ignore // TODO: TYPE: Remove this.\n        const data = super.getData(options) as any;\n\n        data.dataFiles = {};\n        this.supportedDataFiles.forEach((supportedFileName: string) => {\n            const missing = !this.dataFiles.some((dataFile) => supportedFileName === dataFile.name);\n            const parsed = this.parsedFiles.some((parsedFileName) => supportedFileName === parsedFileName);\n            const parsing = supportedFileName === this.currentParsedFile;\n\n            data.dataFiles[supportedFileName] = {\n                name: supportedFileName,\n                missing,\n                parsed,\n                parsing\n            };\n        });\n        data.langDataFile = this.langDataFile ? this.langDataFile.name : '';\n        data.finishedOverallParsing = this.supportedDataFiles.length === this.parsedFiles.length;\n        data.disableImportButton = this.disableImportButton;\n\n        return { ...data };\n    }\n\n    private collectDataImporterFileSupport() {\n        this.supportedDataFiles = [];\n        Import.Importers.forEach(importer => {\n            if (this.supportedDataFiles.some(supported => importer.files.includes(supported))) {\n                return;\n            }\n            this.supportedDataFiles = this.supportedDataFiles.concat(importer.files);\n        });\n    }\n\n    private clearParsingStatus() {\n        this.parsedFiles = [];\n    }\n\n    //Order is important, ex. some weapons need mods to fully import\n    static Importers: DataImporter[] = [\n        new ModImporter(),\n        new WeaponImporter(),\n        new ArmorImporter(),\n        new AmmoImporter(),\n        new SpellImporter(),\n        new ComplexFormImporter(),\n        new QualityImporter(),\n        new WareImporter(),\n        new CritterPowerImporter(),\n        new DeviceImporter(),\n        new EquipmentImporter()\n    ];\n\n    async parseXML(xmlSource, fileName) {\n        let jsonSource = await DataImporter.xml2json(xmlSource);\n        ImportHelper.SetMode(ImportMode.XML);\n\n        for (const di of Import.Importers) {\n            if (di.CanParse(jsonSource)) {\n                di.ExtractTranslation(fileName);\n                await di.Parse(jsonSource);\n            }\n        }\n    }\n\n    async parseXmli18n(xmlSource) {\n        if (!xmlSource) {\n            return;\n        }\n        let jsonSource = await DataImporter.xml2json(xmlSource);\n\n        if (DataImporter.CanParseI18n(jsonSource)) {\n            DataImporter.ParseTranslation(jsonSource);\n        }\n    }\n\n    isDataFile = (file: File): boolean => {\n        return this.supportedDataFiles.some((supported) => supported === file.name);\n    };\n\n    isLangDataFile = (file: File): boolean => {\n        const pattern = /[a-zA-Z]{2}-[a-zA-Z]{2}_data\\.xml/;\n        return file.name.match(pattern) !== null;\n    };\n\n    activateListeners(html) {\n        html.find(\"button[type='submit']\").on('click', async (event) => {\n            event.preventDefault();\n\n            this.clearParsingStatus();\n            this.disableImportButton = true;\n\n            await this.render();\n\n            if (this.langDataFile) {\n                const text = await this.langDataFile.text();\n                await this.parseXmli18n(text);\n            }\n\n            // Use 'for of'-loop to allow await to actually pause.\n            // don't use .forEach as it won't await for async callbacks.\n            // iterate over supportedDataFiles to adhere to Importer order\n            for (const supportedFile of this.supportedDataFiles) {\n                // Only try supported files.\n                const dataFile = this.dataFiles.find((dataFile) => dataFile.name === supportedFile);\n                if (dataFile) {\n                    const text = await dataFile.text();\n\n                     // Show status for current parsing progression.\n                    this.currentParsedFile = dataFile.name;\n                    await this.render();\n\n\n                    await this.parseXML(text, dataFile.name);\n\n                    // Store status to show parsing progression.\n                    if (!this.parsedFiles.some((parsedFileName) => parsedFileName === dataFile.name)) {\n                        this.parsedFiles.push(dataFile.name);\n                    }\n\n                    await this.render();\n                }\n            }\n\n            this.disableImportButton = false;\n\n            await this.render();\n        });\n\n        html.find(\"input[type='file'].langDataFileDrop\").on('change', async (event) => {\n            Array.from(event.target.files).forEach((file: File) => {\n                if (this.isLangDataFile(file)) {\n                    this.langDataFile = file;\n                    this.render();\n                }\n            });\n            return true;\n        });\n\n        html.find(\"input[type='file'].filedatadrop\").on('change', async (event) => {\n            Array.from(event.target.files).forEach((file: File) => {\n                if (this.isDataFile(file)) {\n                    // Allow user to overwrite an already added file, they have their reasons.\n                    const existingIdx = this.dataFiles.findIndex((dataFile) => dataFile.name === file.name);\n                    if (existingIdx === -1) {\n                        this.dataFiles.push(file);\n                    } else {\n                        this.dataFiles[existingIdx] = file;\n                    }\n                }\n            });\n\n            if (this.dataFiles.length > 0) {\n                this.disableImportButton = false;\n            }\n\n            this.render();\n        });\n    }\n}\n","import { Constants } from '../importer/Constants';\nimport { XMLStrategy } from './XMLStrategy';\nimport { JSONStrategy } from './JSONStrategy';\nimport { ImportStrategy } from './ImportStrategy';\nimport {SR5Item} from \"../../item/SR5Item\";\n\nexport enum ImportMode {\n    XML = 1,\n    JSON = 2,\n}\nexport enum LookupMode {\n    Directory = 0,\n    Actor = 1,\n}\n\n/**\n * An import helper to standardize data extraction.\n * Mostly conceived to reduced required refactoring if Chummer changes data file layout.\n * Also contains helper methods to safely parse values to appropriate types.\n */\nexport class ImportHelper {\n    public static readonly CHAR_KEY = '_TEXT';\n\n    private static s_Strategy: ImportStrategy = new XMLStrategy();\n\n    public static SetMode(mode: ImportMode) {\n        switch (mode) {\n            case ImportMode.XML:\n                ImportHelper.s_Strategy = new XMLStrategy();\n                break;\n            case ImportMode.JSON:\n                ImportHelper.s_Strategy = new JSONStrategy();\n                break;\n        }\n    }\n\n    private constructor() {}\n\n    /**\n     * Helper method to create a new folder.\n     * @param name The name of the folder.\n     * @param parent The parent folder.\n     * @returns {Promise<Folder>} A promise that resolves with the folder object when the folder is created.\n     */\n    public static async NewFolder(name: string, parent: Folder | null = null): Promise< Folder | null> {\n        // @ts-ignore // TODO: TYPE: I'm unsure what the issue is.\n        return await Folder.create({\n            type: 'Item',\n            parent: parent === null ? null : parent.id,\n            name: name,\n        });\n    }\n\n    /**\n     * Get / create a folder at a path in the items directory.\n     *\n     * Traverse path and match folder structure to the last and current path segments.\n     *\n     * @param path The absolute path of the folder.\n     * @param mkdirs If true, will make all folders along the hierarchy if they do not exist.\n     * @returns A promise that will resolve with the found folder.\n     */\n    public static async GetFolderAtPath(path: string, mkdirs: boolean = false): Promise<Folder> {\n        let currentFolder,\n            lastFolder = undefined;\n        const pathSegments = path.split('/');\n        for (const pathSegment of pathSegments) {\n             // Check if the path structure matches the folder structure.\n            currentFolder = game.folders.find((folder) => {\n                // @ts-ignore // TODO: foundry-vtt-types 0.8 support missing.\n                return folder.parentFolder === lastFolder && folder.name === pathSegment\n            });\n\n            // Only create when allowed to. Otherwise abort with error.\n            if (!currentFolder && !mkdirs) return Promise.reject(`Unable to find folder: ${path}`);\n            // Create the missing folder for the current segment\n            if (!currentFolder) currentFolder = await ImportHelper.NewFolder(pathSegment, lastFolder);\n\n            lastFolder = currentFolder;\n        }\n\n        return Promise.resolve(currentFolder);\n    }\n\n    /**\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found\n     * or is unable to be parsed to an integer.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static IntValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        return ImportHelper.s_Strategy.intValue(jsonData, key, fallback);\n    }\n\n    /**\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static StringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        return ImportHelper.s_Strategy.stringValue(jsonData, key, fallback);\n    }\n\n    /**\n     * Get an object from the the provided jsonData, optionally returning a default value if it is not found.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static ObjectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        return ImportHelper.s_Strategy.objectValue(jsonData, key, fallback);\n    }\n\n    public static findItem(nameOrCmp: string | ItemComparer): SR5Item {\n        let result: any | null;\n        if (typeof nameOrCmp === 'string') {\n            result = game.items?.find((item) => item.name == nameOrCmp);\n        } else {\n            result = game.items?.find(nameOrCmp);\n        }\n        return result;\n    }\n\n    public static TranslateCategory(name, jsonCategoryTranslations?) {\n        if (jsonCategoryTranslations && jsonCategoryTranslations.hasOwnProperty(name)) {\n            return jsonCategoryTranslations[name];\n        }\n\n        return name;\n    }\n    public static async MakeCategoryFolders(\n        jsonData: object,\n        path: string,\n        jsonCategoryTranslations?: object | undefined,\n    ): Promise<{ [name: string]: Folder }> {\n        let folders = {};\n        let jsonCategories = jsonData['categories']['category'];\n\n        for (let i = 0; i < jsonCategories.length; i++) {\n            let categoryName = jsonCategories[i][ImportHelper.CHAR_KEY];\n            // use untranslated category name for easier mapping during DataImporter.Parse implementations.\n            let origCategoryName = categoryName;\n            categoryName = ImportHelper.TranslateCategory(categoryName, jsonCategoryTranslations);\n            folders[origCategoryName.toLowerCase()] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${path}/${categoryName}`, true);\n        }\n\n        return folders;\n    }\n\n    /** Extract the correct <chummer file=\"${dataFileName}>[...]</chummer> element from xx-xx_data.xml translations.\n     *\n     * @param jsoni18n\n     * @param dataFileName Expected translation target file name\n     */\n    public static ExtractDataFileTranslation(jsoni18n, dataFileName): object {\n        for (let i = 0; i < jsoni18n.length; i++) {\n            const translation = jsoni18n[i];\n            if (translation.$.file === dataFileName) {\n                return translation;\n            }\n        }\n        return {};\n    }\n\n    /** Extract categories translations within xx-xx_data.xml <chummer/> translation subset.\n     *\n     *  Note: Not all file translations provide categories.\n     *\n     * @param jsonChummeri18n Translations as given by ExtractDataFileTranslations\n     */\n    public static ExtractCategoriesTranslation(jsonChummeri18n) {\n        const categoryTranslations = {};\n        if (jsonChummeri18n && jsonChummeri18n.hasOwnProperty('categories')) {\n            jsonChummeri18n.categories.category.forEach((category) => {\n                const name = category[ImportHelper.CHAR_KEY];\n                const translate = category.$.translate;\n                categoryTranslations[name] = translate;\n            });\n        }\n        return categoryTranslations;\n    }\n\n    /** Extract item type translations within xx-xx_data.xml <chummer/> translation subset.\n     *\n     * @param jsonItemsi18n Translations as given by ExtractDataFileTranslations\n     * @param typeKey The item type to translate. Tends to be plural.\n     * @param listKey The item to translate. Tends to be singular.\n     */\n    public static ExtractItemTranslation(jsonItemsi18n, typeKey, listKey) {\n        const itemTranslation = {};\n        if (jsonItemsi18n && jsonItemsi18n[typeKey] && jsonItemsi18n[typeKey][listKey] && jsonItemsi18n[typeKey][listKey].length > 0) {\n            jsonItemsi18n[typeKey][listKey].forEach((item) => {\n                const name = item.name[ImportHelper.CHAR_KEY];\n                const translate = item.translate[ImportHelper.CHAR_KEY];\n                const altpage = item.altpage[ImportHelper.CHAR_KEY];\n                itemTranslation[name] = { translate, altpage };\n            });\n        }\n\n        return itemTranslation;\n    }\n\n    static MapNameToTranslationKey(translationMap, name, key, fallbackValue = ''): string {\n        if (translationMap && translationMap.hasOwnProperty(name) && translationMap[name].hasOwnProperty(key)) {\n            return translationMap[name][key];\n        }\n\n        return fallbackValue;\n    }\n\n    public static MapNameToTranslation(translationMap, name): string {\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'translate', name);\n    }\n\n    public static MapNameToPageSource(translationMap, name, fallback='?'): string {\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'altpage', fallback);\n    }\n}\nexport type ItemComparer = (item: Item) => boolean;\n","export abstract class ImportStrategy {\n    public abstract intValue(jsonData: object, key: string, fallback: number | undefined): number;\n    public abstract stringValue(jsonData: object, key: string | number, fallback: string | undefined): string;\n    public abstract objectValue(jsonData: object, key: string | number, fallback: object | null | undefined): object | null;\n}\nexport type ItemComparer = (item: Item) => boolean;\n","import { ImportStrategy } from './ImportStrategy';\n\nexport class JSONStrategy extends ImportStrategy {\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        throw new Error('Unimplemented');\n    }\n\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        throw new Error('Unimplemented');\n    }\n\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        throw new Error('Unimplemented');\n    }\n}\n","import { ImportHelper } from './ImportHelper';\nimport { ImportStrategy } from './ImportStrategy';\n\nexport class XMLStrategy extends ImportStrategy {\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        try {\n            return parseInt(jsonData[key][ImportHelper.CHAR_KEY]);\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        try {\n            return jsonData[key][ImportHelper.CHAR_KEY];\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        try {\n            return jsonData[key];\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport WeaponData = Shadowrun.WeaponData;\nimport AmmoItemData = Shadowrun.AmmoItemData;\n\nexport class AmmoImporter extends DataImporter {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    GetDefaultData(): AmmoItemData {\n        return {\n            name: '',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'ammo',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                    wireless: true\n                },\n\n                element: '',\n                ap: 0,\n                damage: 0,\n                damageType: 'physical',\n                blast: {\n                    radius: 0,\n                    dropoff: 0,\n                },\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    async Parse(jsonObject: object): Promise<Item> {\n        let ammoDatas: AmmoItemData[] = [];\n        let jsonAmmos = jsonObject['gears']['gear'];\n        for (let i = 0; i < jsonAmmos.length; i++) {\n            let jsonData = jsonAmmos[i];\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            if (ImportHelper.StringValue(jsonData, 'category', '') !== 'Ammunition') {\n                continue;\n            }\n\n            let data = this.GetDefaultData();\n            data.name = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\n\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n            data.data.technology.rating = 2;\n            data.data.technology.availability = ImportHelper.StringValue(jsonData, 'avail');\n            data.data.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\n\n            let bonusData = ImportHelper.ObjectValue(jsonData, 'weaponbonus', null);\n            if (bonusData !== undefined && bonusData !== null) {\n                data.data.ap = ImportHelper.IntValue(bonusData, 'ap', 0);\n                data.data.damage = ImportHelper.IntValue(bonusData, 'damage', 0);\n\n                let damageType = ImportHelper.StringValue(bonusData, 'damagetype', '');\n                if (damageType.length > 0) {\n                    if (damageType.includes('P')) {\n                        data.data.damageType = 'physical';\n                    } else if (damageType.includes('S')) {\n                        data.data.damageType = 'stun';\n                    } else if (damageType.includes('M')) {\n                        data.data.damageType = 'matrix';\n                    }\n                }\n            }\n\n            let shouldLookForWeapons = false;\n            let nameLower = data.name.toLowerCase();\n            ['grenade', 'rocket', 'missile'].forEach((compare) => {\n                shouldLookForWeapons = shouldLookForWeapons || nameLower.includes(compare);\n            });\n            // NOTE: Should either weapons or gear not have been imported with translation, this will fail.\n            if (shouldLookForWeapons) {\n                let foundWeapon = ImportHelper.findItem((item) => {\n                    // Filter for weapon type due to possible double naming giving other item types.\n                    return item.type === 'weapon' && item.name.toLowerCase() === nameLower;\n                });\n\n                if (foundWeapon != null && \"action\" in foundWeapon.data.data) {\n                    const weaponData = foundWeapon.data.data as WeaponData;\n                    data.data.damage = weaponData.action.damage.value;\n                    data.data.ap =weaponData.action.damage.ap.value;\n                }\n            }\n\n            // ammo doesn't have conceal rating from looking at the data\n            // data.data.technology.conceal.base = ImportHelper.intValue(jsonData, \"conceal\");\n            data.data.technology.conceal.base = 0;\n\n            ammoDatas.push(data);\n        }\n\n        for (let i = 0; i < ammoDatas.length; i++) {\n            let folderName = 'Misc';\n            let ammo = ammoDatas[i];\n\n            let splitName = ammo.name.split(':');\n            if (splitName.length > 1) {\n                folderName = splitName[0].trim();\n            }\n\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Ammo/${folderName}`, true);\n\n            ammo.folder = folder.id;\n        }\n\n        //@ts-ignore // TODO: TYPING unclear.\n        return await Item.create(ammoDatas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { ArmorParserBase } from '../parser/armor/ArmorParserBase';\nimport ArmorItemData = Shadowrun.ArmorItemData;\n\nexport class ArmorImporter extends DataImporter {\n    public armorTranslations: any;\n    public categoryTranslations: any;\n    public files = ['armor.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('armors') && jsonObject['armors'].hasOwnProperty('armor');\n    }\n\n    GetDefaultData(): ArmorItemData {\n        return {\n            name: 'Unnamed Armor',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'armor',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                    wireless: true\n                },\n                armor: {\n                    value: 0,\n                    mod: false,\n                    acid: 0,\n                    cold: 0,\n                    fire: 0,\n                    electricity: 0,\n                    radiation: 0,\n                },\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonArmori18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonArmori18n);\n        this.armorTranslations = ImportHelper.ExtractItemTranslation(jsonArmori18n, 'armors', 'armor');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Armor', this.categoryTranslations);\n\n        const parser = new ArmorParserBase();\n\n        let datas: ArmorItemData[] = [];\n        let jsonDatas = jsonObject['armors']['armor'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData());\n            const category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\n            data.name = ImportHelper.MapNameToTranslation(this.armorTranslations, data.name);\n            data.folder = folders[category].id;\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { ComplexFormParserBase } from '../parser/complex-form/ComplexFormParserBase';\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\n\nexport class ComplexFormImporter extends DataImporter {\n    public categoryTranslations: any;\n    public nameTranslations: any;\n    public files = ['complexforms.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('complexforms') && jsonObject['complexforms'].hasOwnProperty('complexform');\n    }\n\n    GetDefaultData(): ComplexFormItemData {\n        return {\n            name: 'Unnamed Form',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'complex_form',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                action: {\n                    type: 'complex',\n                    category: '',\n                    attribute: 'resonance',\n                    attribute2: '',\n                    skill: 'compiling',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData(),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: 'defense',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                target: '',\n                duration: '',\n                fade: 0,\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        // Complexforms don't provide a category translation.\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.nameTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, 'complexforms', 'complexform');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const parser = new ComplexFormParserBase();\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Complex Forms`, true);\n\n        let datas: ComplexFormItemData[] = [];\n        let jsonDatas = jsonObject['complexforms']['complexform'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.nameTranslations);\n            data.folder = folder.id;\n\n            // TODO: Follow ComplexFormParserBase approach.\n            data.name = ImportHelper.MapNameToTranslation(this.nameTranslations, data.name);\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","export class Constants {\n    public static readonly MAP_CATEGORY_TO_SKILL = {\n        'Assault Cannons': 'heavy_weapons',\n        'Assault Rifles': 'automatics',\n        'Blades': 'blades',\n        'Bows': 'archery',\n        'Carbines': 'automatics',\n        'Clubs': 'clubs',\n        'Crossbows': 'archery',\n        'Exotic Melee Weapons': 'exotic_melee',\n        'Exotic Ranged Weapons': 'exotic_ranged',\n        'Flamethrowers': 'exotic_ranged',\n        'Grenade Launchers': 'heavy_weapons',\n        'Heavy Machine Guns': 'heavy_weapons',\n        'Heavy Pistols': 'pistols',\n        'Holdouts': 'pistols',\n        'Laser Weapons': 'exotic_ranged',\n        'Light Machine Guns': 'heavy_weapons',\n        'Light Pistols': 'pistols',\n        'Machine Pistols': 'automatics',\n        'Medium Machine Guns': 'automatics',\n        'Missile Launchers': 'heavy_weapons',\n        'Shotguns': 'longarms',\n        'Sniper Rifles': 'longarms',\n        'Sporting Rifles': 'longarms',\n        'Submachine Guns': 'automatics',\n        'Tasers': 'pistols',\n        'Unarmed': 'unarmed_combat',\n    };\n    public static readonly WEAPON_RANGES = {\n        'Tasers': {\n            short: 5,\n            medium: 10,\n            long: 15,\n            extreme: 20,\n        },\n        'Holdouts': {\n            short: 5,\n            medium: 15,\n            long: 30,\n            extreme: 50,\n        },\n        'Light Pistols': {\n            short: 5,\n            medium: 15,\n            long: 30,\n            extreme: 50,\n        },\n        'Heavy Pistols': {\n            short: 5,\n            medium: 20,\n            long: 40,\n            extreme: 60,\n        },\n        'Machine Pistols': {\n            short: 5,\n            medium: 15,\n            long: 30,\n            extreme: 50,\n        },\n        'Submachine Guns': {\n            short: 10,\n            medium: 40,\n            long: 80,\n            extreme: 150,\n        },\n        'Assault Rifles': {\n            short: 25,\n            medium: 150,\n            long: 350,\n            extreme: 550,\n        },\n        'Shotguns': {\n            short: 10,\n            medium: 40,\n            long: 80,\n            extreme: 150,\n        },\n        'Shotguns (slug)': {\n            short: 10,\n            medium: 40,\n            long: 80,\n            extreme: 150,\n        },\n        'Shotguns (flechette)': {\n            short: 15,\n            medium: 30,\n            long: 45,\n            extreme: 60,\n        },\n        'Sniper Rifles': {\n            short: 50,\n            medium: 350,\n            long: 800,\n            extreme: 1500,\n        },\n        'Sporting Rifles': {\n            short: 50,\n            medium: 250,\n            long: 500,\n            extreme: 750,\n        },\n        'Light Machine Guns': {\n            short: 25,\n            medium: 200,\n            long: 400,\n            extreme: 800,\n        },\n        'Medium/Heavy Machinegun': {\n            short: 40,\n            medium: 250,\n            long: 750,\n            extreme: 1200,\n        },\n        'Assault Cannons': {\n            short: 50,\n            medium: 300,\n            long: 750,\n            extreme: 1500,\n        },\n        'Grenade Launchers': {\n            min: 5,\n            short: 50,\n            medium: 100,\n            long: 150,\n            extreme: 500,\n        },\n        'Missile Launchers': {\n            min: 20,\n            short: 70,\n            medium: 150,\n            long: 450,\n            extreme: 1500,\n        },\n        'Bows': {\n            short: 1,\n            medium: 10,\n            long: 30,\n            extreme: 60,\n            attribute: 'strength',\n        },\n        'Light Crossbows': {\n            short: 6,\n            medium: 24,\n            long: 60,\n            extreme: 120,\n        },\n        'Medium Crossbows': {\n            short: 9,\n            medium: 36,\n            long: 90,\n            extreme: 150,\n        },\n        'Heavy Crossbows': {\n            short: 15,\n            medium: 45,\n            long: 120,\n            extreme: 180,\n        },\n        'Thrown Knife': {\n            short: 1,\n            medium: 2,\n            long: 3,\n            extreme: 5,\n            attribute: 'strength',\n        },\n        'Net': {\n            short: 0.5,\n            medium: 1,\n            long: 1.5,\n            extreme: 2.5,\n            attribute: 'strength',\n        },\n        'Shuriken': {\n            short: 1,\n            medium: 2,\n            long: 5,\n            extreme: 7,\n            attribute: 'strength',\n        },\n        'Standard Grenade': {\n            short: 2,\n            medium: 4,\n            long: 6,\n            extreme: 10,\n            attribute: 'strength',\n        },\n        'Aerodynamic Grenade': {\n            min: 0,\n            short: 2,\n            medium: 4,\n            long: 8,\n            extreme: 15,\n            attribute: 'strength',\n        },\n        'Harpoon Gun': {\n            short: 5,\n            medium: 20,\n            long: 40,\n            extreme: 60,\n        },\n        'Harpoon Gun (Underwater)': {\n            short: 6,\n            medium: 24,\n            long: 60,\n            extreme: 120,\n        },\n        'Flamethrowers': {\n            short: 15,\n            medium: 20,\n            long: -1,\n            extreme: -1,\n        },\n    };\n\n    public static readonly ROOT_IMPORT_FOLDER_NAME = 'SR5e';\n}\n","import {DataImporter} from './DataImporter';\nimport {ImportHelper} from '../helper/ImportHelper';\nimport {CritterPowerParserBase} from '../parser/critter-power/CritterPowerParserBase';\nimport {Constants} from './Constants';\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\n\nexport class CritterPowerImporter extends DataImporter {\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public files = ['critterpowers.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('powers') && jsonObject['powers'].hasOwnProperty('power');\n    }\n\n    GetDefaultData(): CritterPowerItemData {\n        return {\n            name: 'Unnamed Item',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'critter_power',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                action: {\n                    type: '',\n                    category: '',\n                    attribute: '',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                armor: {\n                    value: 0,\n                    mod: false,\n                    acid: 0,\n                    cold: 0,\n                    fire: 0,\n                    electricity: 0,\n                    radiation: 0,\n                },\n                category: '',\n                powerType: '',\n                range: '',\n                duration: '',\n                karma: 0,\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonCritterPoweri18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonCritterPoweri18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonCritterPoweri18n, 'powers', 'power');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const parser = new CritterPowerParserBase();\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Critter Powers`, true);\n\n        let datas: CritterPowerItemData[] = [];\n        let jsonDatas = jsonObject['powers']['power'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\n            data.folder = folder.id;\n            data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { ImportHelper } from '../helper/ImportHelper';\n\nconst xml2js = require('xml2js');\n\nexport abstract class DataImporter {\n    public abstract files: string[];\n    public static jsoni18n: any;\n    public categoryTranslations: any;\n    public entryTranslations: any;\n    public static unsupportedBooks: string[] = ['2050'];\n\n    /**\n     * Get default data for constructing a TItem.\n     */\n    public abstract GetDefaultData(): any;\n\n    /**\n     *\n     * @param jsonObject JSON Data with all data translations for one language.\n     */\n    public static CanParseI18n(jsonObject: any): boolean {\n        return jsonObject.hasOwnProperty('chummer') && jsonObject.chummer.length > 0 && jsonObject.chummer[0].$.hasOwnProperty('file');\n    }\n\n    /**\n     * Stores translations as a whole for all implementing classes to extract from without reparsing.\n     * @param jsonObject JSON Data with all data translations for one language.\n     */\n    public static ParseTranslation(jsonObject: object) {\n        if (jsonObject && jsonObject.hasOwnProperty('chummer')) {\n            DataImporter.jsoni18n = jsonObject['chummer'];\n        }\n    }\n    /**\n     * Implementing classes can use ExtractTranslation to only extract needed translations.\n     */\n    public abstract ExtractTranslation(fileName?: string);\n\n    /**\n     * Validate if this importer is capable of parsing the provided JSON data.\n     * @param jsonObject JSON data to check import capability for.\n     * @returns boolean True if the importer is capable of parsing the provided XML data.\n     */\n    public abstract CanParse(jsonObject: object): boolean;\n\n    /**\n     * Parse the specified jsonObject and return Item representations.\n     * @param jsonObject The JSON data to parse.\n     * @returns An array of created objects.\n     */\n    public abstract Parse(jsonObject: object): Promise<Entity>;\n\n    /**\n     * Parse an XML string into a JSON object.\n     * @param xmlString The string to parse as XML.\n     * @returns A json object converted from the string.\n     */\n    public static async xml2json(xmlString: string): Promise<object> {\n        const parser = xml2js.Parser({\n            explicitArray: false,\n            explicitCharkey: true,\n            charkey: ImportHelper.CHAR_KEY,\n        });\n\n        return (await parser.parseStringPromise(xmlString))['chummer'];\n    }\n\n    public static unsupportedBookSource(jsonObject) {\n        if (!jsonObject.hasOwnProperty('source')) return false;\n        const source = ImportHelper.StringValue(jsonObject, 'source', '');\n        return DataImporter.unsupportedBooks.includes(source);\n    }\n\n    public static unsupportedEntry(jsonObject) {\n        if (DataImporter.unsupportedBookSource(jsonObject)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n","import {DataImporter} from \"./DataImporter\";\nimport {ImportHelper} from \"../helper/ImportHelper\";\nimport {Constants} from \"./Constants\";\n\nexport class DeviceImporter extends DataImporter {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    GetDefaultData() {\n        return {\n            name: '',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'device',\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                },\n                category: 'commlink',\n                \"atts\": {\n                    \"att1\": {\n                        \"value\": 0,\n                        \"att\": \"attack\"\n                    },\n                    \"att2\": {\n                        \"value\": 0,\n                        \"att\": \"sleaze\"\n                    },\n                    \"att3\": {\n                        \"value\": 0,\n                        \"att\": \"data_processing\"\n                    },\n                    \"att4\": {\n                        \"value\": 0,\n                        \"att\": \"firewall\"\n                    }\n                },\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation(fileName?: string) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    ParseCommlinkDevices(commlinks, folder) {\n        const entries = [];\n\n        for (const commlink of commlinks) {\n            if (DataImporter.unsupportedEntry(commlink)) {\n                continue;\n            }\n            const data = this.GetDefaultData();\n\n            data.name = ImportHelper.StringValue(commlink, 'name');\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\n\n            data.data.description.source = `${ImportHelper.StringValue(commlink, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(commlink, 'name'), ImportHelper.StringValue(commlink, 'page'))}`;\n            data.data.technology.rating = ImportHelper.IntValue(commlink, 'devicerating', 0);\n            data.data.technology.availability = ImportHelper.StringValue(commlink, 'avail');\n            data.data.technology.cost = ImportHelper.IntValue(commlink, 'cost', 0);\n            data.data.atts.att3.value = ImportHelper.IntValue(commlink, 'dataprocessing', 0);\n            data.data.atts.att4.value = ImportHelper.IntValue(commlink, 'firewall', 0);\n\n            //@ts-ignore\n            data.folder = folder.id;\n            //@ts-ignore\n            entries.push(data);\n        }\n\n        return entries;\n    }\n\n    ParseCyberdeckDevices(cyberdecks, folder) {\n        const entries = [];\n\n        for (const cyberdeck of cyberdecks) {\n            if (DataImporter.unsupportedEntry(cyberdeck)) {\n                continue;\n            }\n\n            const data = this.GetDefaultData();\n\n            data.data.category = 'cyberdeck';\n            data.name = ImportHelper.StringValue(cyberdeck, 'name');\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\n\n            data.data.description.source = `${ImportHelper.StringValue(cyberdeck, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(cyberdeck, 'name'), ImportHelper.StringValue(cyberdeck, 'page'))}`;\n            data.data.technology.rating = ImportHelper.IntValue(cyberdeck, 'devicerating', 0);\n            data.data.technology.availability = ImportHelper.StringValue(cyberdeck, 'avail');\n            data.data.technology.cost = ImportHelper.IntValue(cyberdeck, 'cost', 0);\n\n            // Some cyberdecks have a flexible attribute order\n            // attributearray is a ',' separated list of values. Since it's hacky, be very unforgiving.\n            if (cyberdeck.hasOwnProperty('attributearray')) {\n                const attributeOrder = ImportHelper.StringValue(cyberdeck, 'attributearray').split(',');\n                const att1 = Number(attributeOrder[0]);\n                const att2 = Number(attributeOrder[1]);\n                const att3 = Number(attributeOrder[2]);\n                const att4 = Number(attributeOrder[3]);\n                data.data.atts.att1.value = att1;\n                data.data.atts.att2.value = att2;\n                data.data.atts.att3.value = att3;\n                data.data.atts.att4.value = att4;\n\n            // Some cyberdecks have a fixed attribute order\n            } else if (cyberdeck.hasOwnProperty('attack')) {\n                data.data.atts.att1.value = ImportHelper.IntValue(cyberdeck, 'attack', 0);\n                data.data.atts.att2.value = ImportHelper.IntValue(cyberdeck, 'sleaze', 0);\n                data.data.atts.att3.value = ImportHelper.IntValue(cyberdeck, 'dataprocessing', 0);\n                data.data.atts.att4.value = ImportHelper.IntValue(cyberdeck, 'firewall', 0);\n            }\n\n            //@ts-ignore\n            data.folder = folder.id;\n            //@ts-ignore\n            entries.push(data);\n        }\n\n        return entries;\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        let entries = [];\n        const commlinks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Commlinks');\n        const cyberdecks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Cyberdecks');\n\n        let commlinksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCommlink')}`, true);\n        let cyberdecksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCyberdeck')}`, true);\n\n        entries = entries.concat(this.ParseCommlinkDevices(commlinks, commlinksFolder));\n        entries = entries.concat(this.ParseCyberdeckDevices(cyberdecks, cyberdecksFolder));\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(entries)\n    }\n\n    /* List of unsupported Commlinks, due to dynamics value calculations.\n     */\n    static unsupportedEntry(jsonData): boolean {\n        if (DataImporter.unsupportedEntry(jsonData)) {\n            return true;\n        }\n\n        const unsupportedIds = [\n            'd63eb841-7b15-4539-9026-b90a4924aeeb',  // Dynamic rating value.\n        ];\n        return unsupportedIds.includes(ImportHelper.StringValue(jsonData, 'id'));\n    }\n}","import {DataImporter} from \"./DataImporter\";\nimport {ImportHelper} from \"../helper/ImportHelper\";\nimport {Constants} from \"./Constants\";\n\nexport class EquipmentImporter extends DataImporter {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    GetDefaultData() {\n        return {\n            name: '',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'equipment',\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                }\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation(fileName?: string) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    async ParseEquipments(equipments) {\n        const entries = [];\n\n        for (const equipment of equipments) {\n            if (DataImporter.unsupportedEntry(equipment)) {\n                continue;\n            }\n\n            // Replace / as it's used as a separator in GetFolderAtPath.\n            const category = ImportHelper.TranslateCategory(ImportHelper.StringValue(equipment, 'category'), this.categoryTranslations).replace('/', ' ');\n            let categoryFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.Gear')}/${category}`, true);\n\n            const data = this.GetDefaultData();\n            data.name = ImportHelper.StringValue(equipment, 'name');\n            data.name = ImportHelper.MapNameToTranslation(this.entryTranslations, data.name);\n\n            data.data.description.source = `${ImportHelper.StringValue(equipment, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(equipment, 'name'), ImportHelper.StringValue(equipment, 'page'))}`;\n            data.data.technology.rating = ImportHelper.IntValue(equipment, 'rating', 0);\n            data.data.technology.availability = ImportHelper.StringValue(equipment, 'avail');\n            data.data.technology.cost = ImportHelper.IntValue(equipment, 'cost', 0);\n\n            //@ts-ignore\n            data.folder = categoryFolder.id;\n            //@ts-ignore\n            entries.push(data);\n        }\n\n        return entries;\n    }\n\n    FilterJsonObjects(jsonObject) {\n        const unsupportedCategories = [\n            'Ammunition',\n            'Commlinks',\n            'Cyberdecks',\n            'Hacking Programs',\n            'Rigger Command Consoles',\n            'Custom'\n        ]\n\n        return jsonObject['gears']['gear'].filter(gear => !unsupportedCategories.includes(ImportHelper.StringValue(gear, 'category', '')));\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const equipments = this.FilterJsonObjects(jsonObject);\n\n        const entries = await this.ParseEquipments(equipments);\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(entries);\n    }\n}","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { ModParserBase } from '../parser/mod/ModParserBase';\nimport ModificationItemData = Shadowrun.ModificationItemData;\n\nexport class ModImporter extends DataImporter {\n    public categoryTranslations: any;\n    public accessoryTranslations: any;\n    public files = ['weapons.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('accessories') && jsonObject['accessories'].hasOwnProperty('accessory');\n    }\n\n    GetDefaultData(): ModificationItemData {\n        return {\n            name: '',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'modification',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                    wireless: true\n                },\n                type: '',\n                mount_point: '',\n                dice_pool: 0,\n                accuracy: 0,\n                rc: 0,\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonWeaponsi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        // Parts of weapon accessory translations are within the application translation. Currently only data translation is used.\n        this.accessoryTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponsi18n, 'accessories', 'accessory');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const parser = new ModParserBase();\n\n        let datas: ModificationItemData[] = [];\n        let jsonDatas = jsonObject['accessories']['accessory'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData());\n            // TODO: Integrate into ModParserBase approach.\n            data.name = ImportHelper.MapNameToTranslation(this.accessoryTranslations, data.name);\n            //TODO: Test this\n\n            let folderName = data.data.mount_point !== undefined ? data.data.mount_point : 'Other';\n            if (folderName.includes('/')) {\n                let splitName = folderName.split('/');\n                folderName = splitName[0];\n            }\n\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Mods/${folderName}`, true);\n            data.folder = folder.id;\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { QualityParserBase } from '../parser/quality/QualityParserBase';\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport QualityItemData = Shadowrun.QualityItemData;\n\nexport class QualityImporter extends DataImporter {\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public files = ['qualities.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('qualities') && jsonObject['qualities'].hasOwnProperty('quality');\n    }\n\n    GetDefaultData(): QualityItemData {\n        return {\n            name: 'Unnamed Armor',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'quality',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                action: {\n                    type: '',\n                    category: '',\n                    attribute: '',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                type: '',\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonQualityi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonQualityi18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonQualityi18n, 'qualities', 'quality');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const jsonNameTranslations = {};\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Qualities', this.categoryTranslations);\n\n        const parser = new QualityParserBase();\n\n        let datas: QualityItemData[] = [];\n        let jsonDatas = jsonObject['qualities']['quality'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\n\n            let category = ImportHelper.StringValue(jsonData, 'category');\n            data.folder = folders[category.toLowerCase()].id;\n            data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { SpellParserBase } from '../parser/spell/SpellParserBase';\nimport { CombatSpellParser } from '../parser/spell/CombatSpellParser';\nimport { ManipulationSpellParser } from '../parser/spell/ManipulationSpellParser';\nimport { IllusionSpellParser } from '../parser/spell/IllusionSpellParser';\nimport { DetectionSpellImporter } from '../parser/spell/DetectionSpellImporter';\nimport { ParserMap } from '../parser/ParserMap';\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class SpellImporter extends DataImporter {\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public files = ['spells.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('spells') && jsonObject['spells'].hasOwnProperty('spell');\n    }\n\n    GetDefaultData(): SpellItemData {\n        return {\n            name: 'Unnamed Item',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'spell',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                action: {\n                    type: 'varies',\n                    category: '',\n                    attribute: 'magic',\n                    attribute2: '',\n                    skill: 'spellcasting',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                drain: 0,\n                category: '',\n                type: '',\n                range: '',\n                duration: '',\n                extended: false,\n                combat: {\n                    type: '',\n                },\n                detection: {\n                    passive: false,\n                    type: '',\n                    extended: false,\n                },\n                illusion: {\n                    type: '',\n                    sense: '',\n                },\n                manipulation: {\n                    damaging: false,\n                    mental: false,\n                    environmental: false,\n                    physical: false,\n                },\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonSpelli18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonSpelli18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonSpelli18n, 'spells', 'spell');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Spells', this.categoryTranslations);\n\n        const parser = new ParserMap<SpellItemData>('category', [\n            { key: 'Combat', value: new CombatSpellParser() },\n            { key: 'Manipulation', value: new ManipulationSpellParser() },\n            { key: 'Illusion', value: new IllusionSpellParser() },\n            { key: 'Detection', value: new DetectionSpellImporter() },\n            { key: 'Health', value: new SpellParserBase() },\n            { key: 'Enchantments', value: new SpellParserBase() },\n            { key: 'Rituals', value: new SpellParserBase() },\n        ]);\n\n        let datas: SpellItemData[] = [];\n        let jsonDatas = jsonObject['spells']['spell'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\n            data.folder = folders[data.data.category].id;\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { CyberwareParser } from '../parser/ware/CyberwareParser';\nimport Ware = Shadowrun.WareItemData;\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\n\nexport class WareImporter extends DataImporter {\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public files = ['cyberware.xml', 'bioware.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('cyberwares') && jsonObject['cyberwares'].hasOwnProperty('cyberware') ||\n               jsonObject.hasOwnProperty('biowares') && jsonObject['biowares'].hasOwnProperty('bioware');\n    }\n\n    GetDefaultCyberwareData(): CyberwareItemData {\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\n        return {...this.GetDefaultData(), type: 'cyberware'};\n    }\n\n    GetDefaultBiowareData(): CyberwareItemData {\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\n        return {...this.GetDefaultData(), type: 'bioware'};\n    }\n\n    GetDefaultData(): Ware {\n        return {\n            name: 'Unnamed Form',\n            type: 'cyberware',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                    wireless: true\n                },\n                armor: {\n                    value: 0,\n                    mod: false,\n                    acid: 0,\n                    cold: 0,\n                    fire: 0,\n                    electricity: 0,\n                    radiation: 0,\n                },\n                action: {\n                    type: '',\n                    category: '',\n                    attribute: '',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                grade: 'standard',\n                essence: 0,\n                capacity: 0,\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n    ExtractTranslation(fileName) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, fileName);\n         // TODO: Move ExtractTranslation phase before the parsing phase and initiate it with the filename to parse.\n            if (this.files.length !== 2) console.error('Lazily hacked code will fail for more or less than two files.');\n\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonItemi18n);\n\n        const {typeKey, listKey} = fileName === 'cyberware.xml' ?\n                {typeKey: 'cyberwares', listKey: 'cyberware'} :\n                {typeKey: 'biowares', listKey: 'bioware'};\n\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, typeKey, listKey);\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const cyberParser = new CyberwareParser();\n\n        let key = jsonObject.hasOwnProperty('cyberwares') ? 'Cyberware' : 'Bioware';\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, key);\n\n        key = key.toLowerCase();\n        let datas: Ware[] = [];\n        let jsonDatas = jsonObject[key + 's'][key];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            const defaultData = key === 'cyberware' ? this.GetDefaultCyberwareData() : this.GetDefaultBiowareData();\n            let data = cyberParser.Parse(jsonData, defaultData, this.itemTranslations);\n            const category = ImportHelper.StringValue(jsonData, 'category');\n\n            // TODO: Does this type mixture cause later issues? Will it carry over?\n            //@ts-ignore\n            data.folder = folders[category.toLowerCase()].id;\n\n            // // TODO: Follow ComplexFormParserBase approach.\n            // data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n","import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { RangedParser } from '../parser/weapon/RangedParser';\nimport { MeleeParser } from '../parser/weapon/MeleeParser';\nimport { ThrownParser } from '../parser/weapon/ThrownParser';\nimport { ParserMap } from '../parser/ParserMap';\nimport { WeaponParserBase } from '../parser/weapon/WeaponParserBase';\nimport {DefaultValues} from \"../../data/DataDefaults\";\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport class WeaponImporter extends DataImporter {\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public files = ['weapons.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('weapons') && jsonObject['weapons'].hasOwnProperty('weapon');\n    }\n\n    GetDefaultData(): WeaponItemData {\n        return {\n            name: 'Unnamed Item',\n            _id: '',\n            folder: '',\n            img: 'icons/svg/mystery-man.svg',\n            flags: {},\n            type: 'weapon',\n            effects: [],\n            sort: 0,\n            data: {\n                description: {\n                    value: '',\n                    chat: '',\n                    source: '',\n                },\n                action: {\n                    type: 'varies',\n                    category: '',\n                    attribute: 'agility',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    mod_description: '',\n                    damage: DefaultValues.damageData(),\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                        mod: [],\n                        base: 0,\n                    },\n                    extended: false,\n                    opposed: {\n                        type: 'defense',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                    alt_mod: 0,\n                    dice_pool_mod: [],\n                },\n                technology: {\n                    rating: 1,\n                    availability: '',\n                    quantity: 1,\n                    cost: 0,\n                    equipped: true,\n                    conceal: {\n                        base: 0,\n                        value: 0,\n                        mod: [],\n                    },\n                    condition_monitor: {\n                        label: '',\n                        value: 0,\n                        max: 0,\n                    },\n                    wireless: true\n                },\n                ammo: {\n                    spare_clips: {\n                        value: 0,\n                        max: 0,\n                    },\n                    current: {\n                        value: 0,\n                        max: 0,\n                    },\n                },\n                range: {\n                    category: '',\n                    ranges: {\n                        short: 0,\n                        medium: 0,\n                        long: 0,\n                        extreme: 0,\n                    },\n                    rc: {\n                        value: 0,\n                        base: 0,\n                        mod: [],\n                    },\n                    modes: {\n                        single_shot: false,\n                        semi_auto: false,\n                        burst_fire: false,\n                        full_auto: false,\n                    },\n                },\n                melee: {\n                    reach: 0,\n                },\n                thrown: {\n                    ranges: {\n                        short: 0,\n                        medium: 0,\n                        long: 0,\n                        extreme: 0,\n                        attribute: '',\n                    },\n                    blast: {\n                        radius: 0,\n                        dropoff: 0,\n                    },\n                },\n                category: 'range',\n                subcategory: '',\n            },\n            permission: {\n                default: 2,\n            },\n        };\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonWeaponi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonWeaponi18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponi18n, 'weapons', 'weapon');\n    }\n\n    async Parse(jsonObject: object): Promise<Entity> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Weapons', this.categoryTranslations);\n\n        folders['gear'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Gear`, true);\n        folders['quality'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Quality`, true);\n\n        const parser = new ParserMap<WeaponItemData>(WeaponParserBase.GetWeaponType, [\n            { key: 'range', value: new RangedParser() },\n            { key: 'melee', value: new MeleeParser() },\n            { key: 'thrown', value: new ThrownParser() },\n        ]);\n\n        let datas: WeaponItemData[] = [];\n        let jsonDatas = jsonObject['weapons']['weapon'];\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            let data = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\n            data.folder = folders[data.data.subcategory].id;\n\n            datas.push(data);\n        }\n\n        // @ts-ignore // TODO: TYPE: This should be removed after typing of SR5Item\n        return await Item.create(datas);\n    }\n}\n","export abstract class Parser<TResult> {\n    public abstract Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult;\n}\n","import { Parser } from './Parser';\nimport { ImportHelper } from '../helper/ImportHelper';\n\nexport class ParserMap<TResult> extends Parser<TResult> {\n    private readonly m_BranchKey: string | BranchFunc<TResult>;\n    private readonly m_Map: Map<string, Parser<TResult>>;\n\n    public constructor(branchKey: string | BranchFunc<TResult>, elements: CArg<TResult>[]) {\n        super();\n\n        this.m_BranchKey = branchKey;\n\n        this.m_Map = new Map();\n        for (const { key, value } of elements) {\n            this.m_Map.set(key, value);\n        }\n    }\n\n    public Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\n        let key;\n        if (typeof this.m_BranchKey === 'function') {\n            key = this.m_BranchKey(jsonData);\n        } else {\n            key = this.m_BranchKey;\n            key = ImportHelper.StringValue(jsonData, key);\n        }\n\n        const parser = this.m_Map.get(key);\n        if (parser === undefined) {\n            console.warn(`Could not find mapped parser for category ${key}.`);\n            return data;\n        }\n        return parser.Parse(jsonData, data, jsonTranslation);\n    }\n}\n\ntype CArg<TResult> = {\n    key: string;\n    value: Parser<TResult>;\n};\ntype BranchFunc<TResult> = (TResult) => string;\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport ArmorItemData = Shadowrun.ArmorItemData;\n\nexport class ArmorParserBase extends TechnologyItemParserBase<ArmorItemData> {\n    Parse(jsonData: object, data: ArmorItemData): ArmorItemData {\n        data = super.Parse(jsonData, data);\n\n        data.data.armor.value = ImportHelper.IntValue(jsonData, 'armor', 0);\n        data.data.armor.mod = ImportHelper.StringValue(jsonData, 'armor').includes('+');\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport ComplexFormTarget = Shadowrun.ComplexFormTarget;\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\n\nexport class ComplexFormParserBase extends ItemParserBase<ComplexFormItemData> {\n    Parse(jsonData: object, data: ComplexFormItemData, jsonTranslation?: object): ComplexFormItemData {\n        data.name = ImportHelper.StringValue(jsonData, 'name');\n\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        let fade = ImportHelper.StringValue(jsonData, 'fv');\n        if (fade.includes('+') || fade.includes('-')) {\n            data.data.fade = parseInt(fade.substring(1, fade.length));\n        }\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'I') {\n            data.data.duration = 'instant';\n        } else if (duration === 'S') {\n            data.data.duration = 'sustained';\n        } else if (duration === 'P') {\n            data.data.duration = 'permanent';\n        }\n\n        let target = ImportHelper.StringValue(jsonData, 'target');\n        switch (target) {\n            case 'Device':\n            case 'File':\n            case 'Host':\n            case 'Persona':\n            case 'Self':\n            case 'Sprite':\n                data.data.target = target.toLowerCase() as ComplexFormTarget;\n                break;\n            default:\n                data.data.target = 'other';\n                break;\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport CritterPowerCategory = Shadowrun.CritterPowerCategory;\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\n\nexport class CritterPowerParserBase extends ItemParserBase<CritterPowerItemData> {\n    public Parse(jsonData: object, data: CritterPowerItemData, jsonTranslation?: object): CritterPowerItemData {\n\n        data.name = ImportHelper.StringValue(jsonData, 'name');\n\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n        data.data.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as CritterPowerCategory;\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'Always') {\n            data.data.duration = 'always';\n        } else if (duration === 'Instant') {\n            data.data.duration = 'instant';\n        } else if (duration === 'Sustained') {\n            data.data.duration = 'sustained';\n        } else if (duration === 'Permanent') {\n            data.data.duration = 'permanent';\n        } else {\n              data.data.duration = 'special';\n        }\n\n        let range = ImportHelper.StringValue(jsonData, 'range');\n        if (range === 'T') {\n            data.data.range = 'touch';\n        } else if (range === 'LOS') {\n            data.data.range = 'los';\n        } else if (range === 'LOS (A)') {\n            data.data.range = 'los_a';\n        } else if (range === 'Self') {\n           data.data.range = 'self';\n        } else {\n          data.data.range = 'special';\n        }\n\n        let type = ImportHelper.StringValue(jsonData, 'type');\n        if (type === 'P') {\n            data.data.powerType = 'physical';\n        } else if (type === 'M') {\n            data.data.powerType = 'mana';\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return data;\n    }\n}\n","import { Parser } from '../Parser';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\n\nexport abstract class ItemParserBase<TResult extends ShadowrunItemData> extends Parser<TResult> {\n    Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\n        data.name = ImportHelper.StringValue(jsonData, 'name');\n\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return data;\n    }\n}\n","import { ItemParserBase } from './ItemParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport ShadowrunTechnologyItemData = Shadowrun.ShadowrunTechnologyItemData;\n\nexport abstract class TechnologyItemParserBase<TResult extends ShadowrunTechnologyItemData> extends ItemParserBase<TResult> {\n    Parse(jsonData: object, data: TResult, jsonTranslation?: object): TResult {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        data.data.technology.availability = ImportHelper.StringValue(jsonData, 'avail', '0');\n        data.data.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\n        data.data.technology.rating = ImportHelper.IntValue(jsonData, 'rating', 0);\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport MountType = Shadowrun.MountType;\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport ModificationItemData = Shadowrun.ModificationItemData;\n\nexport class ModParserBase extends TechnologyItemParserBase<ModificationItemData> {\n    Parse(jsonData: object, data: ModificationItemData): ModificationItemData {\n        data = super.Parse(jsonData, data);\n\n        data.data.type = 'weapon';\n\n        data.data.mount_point = ImportHelper.StringValue(jsonData, 'mount') as MountType;\n\n        data.data.rc = ImportHelper.IntValue(jsonData, 'rc', 0);\n        data.data.accuracy = ImportHelper.IntValue(jsonData, 'accuracy', 0);\n\n        data.data.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal', 0);\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport QualityItemData = Shadowrun.QualityItemData;\n\nexport class QualityParserBase extends ItemParserBase<QualityItemData> {\n    public Parse(jsonData: object, data: QualityItemData, jsonTranslation?): QualityItemData {\n        data.name = ImportHelper.StringValue(jsonData, 'name');\n\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        data.data.type = ImportHelper.StringValue(jsonData, 'category') === 'Positive' ? 'positive' : 'negative';\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return data;\n    }\n}\n","import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class CombatSpellParser extends SpellParserBase {\n    Parse(jsonData: object, data: SpellItemData, jsonTranslation?: object): SpellItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        // Lower case is needed for the system.\n        data.data.combat.type = descriptor.includes('Indirect') ? 'indirect' : 'direct';\n        // Set up automatic spell defense support.\n        data.data.action.opposed.type = 'defense';\n\n        return data;\n    }\n}\n","import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class DetectionSpellImporter extends SpellParserBase {\n    Parse(jsonData: object, data: SpellItemData, jsonTranslation?: object): SpellItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        data.data.detection.passive = descriptor.includes('Passive');\n        if (!data.data.detection.passive) {\n            data.data.action.opposed.type = 'custom';\n            data.data.action.opposed.attribute = 'willpower';\n            data.data.action.opposed.attribute2 = 'logic';\n        }\n\n        data.data.detection.extended = descriptor.includes('Extended');\n\n        if (descriptor.includes('Psychic')) {\n            data.data.detection.type = 'psychic';\n        } else if (descriptor.includes('Directional')) {\n            data.data.detection.type = 'directional';\n        } else if (descriptor.includes('Area')) {\n            data.data.detection.type = 'area';\n        }\n\n        return data;\n    }\n}\n","import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class IllusionSpellParser extends SpellParserBase {\n    Parse(jsonData: object, data: SpellItemData, jsonTranslation?: object): SpellItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        if (data.data.type === 'mana') {\n            data.data.action.opposed.type = 'custom';\n            data.data.action.opposed.attribute = 'logic';\n            data.data.action.opposed.attribute2 = 'willpower';\n        } else if (data.data.type === 'physical') {\n            data.data.action.opposed.type = 'custom';\n            data.data.action.opposed.attribute = 'intuition';\n            data.data.action.opposed.attribute2 = 'logic';\n        }\n\n        return data;\n    }\n}\n","import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class ManipulationSpellParser extends SpellParserBase {\n    Parse(jsonData: object, data: SpellItemData, jsonTranslation?: object): SpellItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        data.data.manipulation.environmental = descriptor.includes('Environmental');\n        // Generally no resistance roll.\n\n        data.data.manipulation.mental = descriptor.includes('Mental');\n        if (data.data.manipulation.mental) {\n            data.data.action.opposed.type = 'custom';\n            data.data.action.opposed.attribute = 'logic';\n            data.data.action.opposed.attribute2 = 'willpower';\n        }\n\n        data.data.manipulation.physical = descriptor.includes('Physical');\n        if (data.data.manipulation.physical) {\n            data.data.action.opposed.type = 'custom';\n            data.data.action.opposed.attribute = 'body';\n            data.data.action.opposed.attribute2 = 'strength';\n        }\n        data.data.manipulation.damaging = descriptor.includes('Damaging');\n        if (data.data.manipulation.damaging) {\n            data.data.action.opposed.type = 'soak';\n        }\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport SpellCateogry = Shadowrun.SpellCateogry;\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class SpellParserBase extends ItemParserBase<SpellItemData> {\n    public Parse(jsonData: object, data: SpellItemData, jsonTranslation?: object): SpellItemData {\n        data.name = ImportHelper.StringValue(jsonData, 'name');\n\n        data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n        data.data.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as SpellCateogry;\n\n        let damage = ImportHelper.StringValue(jsonData, 'damage');\n        if (damage === 'P') {\n            data.data.action.damage.type.base = 'physical';\n            data.data.action.damage.type.value = 'physical';\n        } else if (damage === 'S') {\n            data.data.action.damage.type.base = 'stun';\n            data.data.action.damage.type.value = 'stun';\n        }\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'I') {\n            data.data.duration = 'instant';\n        } else if (duration === 'S') {\n            data.data.duration = 'sustained';\n        } else if (duration === 'P') {\n            data.data.duration = 'permanent';\n        }\n\n        let drain = ImportHelper.StringValue(jsonData, 'dv');\n        if (drain.includes('+') || drain.includes('-')) {\n            data.data.drain = parseInt(drain.substring(1, drain.length));\n        }\n\n        let range = ImportHelper.StringValue(jsonData, 'range');\n        if (range === 'T') {\n            data.data.range = 'touch';\n        } else if (range === 'LOS') {\n            data.data.range = 'los';\n        } else if (range === 'LOS (A)') {\n            data.data.range = 'los_a';\n        }\n\n        let type = ImportHelper.StringValue(jsonData, 'type');\n        if (type === 'P') {\n            data.data.type = 'physical';\n        } else if (type === 'M') {\n            data.data.type = 'mana';\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            data.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            data.data.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport Ware = Shadowrun.WareItemData;\n\nexport class CyberwareParser extends TechnologyItemParserBase<Ware> {\n    Parse(jsonData: object, data: Ware, jsonTranslation?: object): Ware {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        const essence = ImportHelper.StringValue(jsonData, 'ess', '0').match(/[0-9]\\.?[0-9]*/g);\n        if (essence !== null) {\n            data.data.essence = parseFloat(essence[0]);\n        }\n\n        const capacity = ImportHelper.StringValue(jsonData, 'capacity', '0').match(/[0-9]+/g);\n        if (capacity !== null) {\n            data.data.capacity = parseInt(capacity[0]);\n        }\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport ActorAttribute = Shadowrun.ActorAttribute;\nimport DamageData = Shadowrun.DamageData;\nimport DamageType = Shadowrun.DamageType;\nimport {DefaultValues} from \"../../../data/DataDefaults\";\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport class MeleeParser extends WeaponParserBase {\n    GetDamage(jsonData: object): DamageData {\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\n        let damageCode: any = jsonDamage.match(/(STR)([+-]?)([1-9]*)\\)([PS])/g)?.[0];\n\n        if (damageCode == null) {\n            return DefaultValues.damageData();\n        }\n\n        let damageBase = 0;\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\n\n        let splitDamageCode = damageCode.split(')');\n        let damageType = splitDamageCode[1].includes('P') ? 'physical' : 'stun';\n\n        let splitBaseCode = damageCode.includes('+') ? splitDamageCode[0].split('+') : splitDamageCode[0].split('-');\n        if (splitDamageCode[0].includes('+') || splitDamageCode[0].includes('-')) {\n            damageBase = parseInt(splitBaseCode[1], 0);\n        }\n        let damageAttribute = damageCode.includes('STR') ? 'strength' : '';\n\n        const partialDamageData = {\n            type: {\n                base: damageType as DamageType,\n                value: damageType as DamageType,\n            },\n            base: damageBase,\n            value: damageBase,\n            ap: {\n                base: damageAp,\n                value: damageAp,\n                mod: [],\n            },\n            attribute: damageAttribute as ActorAttribute,\n        }\n        return DefaultValues.damageData(partialDamageData);\n    }\n\n    Parse(jsonData: object, data: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        data.data.melee.reach = ImportHelper.IntValue(jsonData, 'reach');\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport { Constants } from '../../importer/Constants';\nimport DamageData = Shadowrun.DamageData;\nimport DamageType = Shadowrun.DamageType;\nimport {DefaultValues} from \"../../../data/DataDefaults\";\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport class RangedParser extends WeaponParserBase {\n    public GetDamage(jsonData: object): DamageData {\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\n        let damageCode = jsonDamage.match(/[0-9]+[PS]/g)?.[0];\n\n        if (damageCode == null) {\n            return DefaultValues.damageData();\n        }\n\n        let damageType = damageCode.includes('P') ? 'physical' : 'stun';\n        let damageAmount = parseInt(damageCode.replace(damageType[0].toUpperCase(), ''));\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\n\n        const partialDamageData = {\n            type: {\n                base: damageType as DamageType,\n                value: damageType as DamageType,\n            },\n            base: damageAmount,\n            value: damageAmount,\n            ap: {\n                base: damageAp,\n                value: damageAp,\n                mod: []\n            }\n        }\n        return DefaultValues.damageData(partialDamageData);\n    }\n\n    protected GetAmmo(weaponJson: object) {\n        let jsonAmmo = ImportHelper.StringValue(weaponJson, 'ammo');\n        let match = jsonAmmo.match(/([0-9]+)/g)?.[0];\n        return match !== undefined ? parseInt(match) : 0;\n    }\n\n    Parse(jsonData: object, data: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        data.data.range.rc.base = ImportHelper.IntValue(jsonData, 'rc');\n        data.data.range.rc.value = ImportHelper.IntValue(jsonData, 'rc');\n\n        if (jsonData.hasOwnProperty('range')) {\n            data.data.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\n        } else {\n            data.data.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\n        }\n\n        data.data.ammo.current.value = this.GetAmmo(jsonData);\n        data.data.ammo.current.max = this.GetAmmo(jsonData);\n\n        data.data.range.modes.single_shot = ImportHelper.StringValue(jsonData, 'mode').includes('SS');\n        data.data.range.modes.semi_auto = ImportHelper.StringValue(jsonData, 'mode').includes('SA');\n        data.data.range.modes.burst_fire = ImportHelper.StringValue(jsonData, 'mode').includes('BF');\n        data.data.range.modes.full_auto = ImportHelper.StringValue(jsonData, 'mode').includes('FA');\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport { Constants } from '../../importer/Constants';\nimport BlastData = Shadowrun.BlastData;\nimport ActorAttribute = Shadowrun.ActorAttribute;\nimport DamageData = Shadowrun.DamageData;\nimport DamageType = Shadowrun.DamageType;\nimport {DefaultValues} from \"../../../data/DataDefaults\";\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport class ThrownParser extends WeaponParserBase {\n    public GetDamage(jsonData: object): DamageData {\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\n\n        let damageAmount = 0;\n        let damageType = 'physical';\n        let damageAttribute = '';\n\n        //STR scaling weapons like the boomerang\n        if (jsonDamage.includes('STR')) {\n            damageAttribute = 'strength';\n\n            let damageMatch = jsonDamage.match(/((STR)([+-])[0-9]\\)[PS])/g)?.[0];\n            if (damageMatch !== undefined) {\n                let amountMatch = damageMatch.match(/-?[0-9]+/g)?.[0];\n                damageAmount = amountMatch !== undefined ? parseInt(amountMatch) : 0;\n            }\n        } else {\n            let damageMatch = jsonDamage.match(/([0-9]+[PS])/g)?.[0];\n\n            if (damageMatch !== undefined) {\n                let amountMatch = damageMatch.match(/[0-9]+/g)?.[0];\n                if (amountMatch !== undefined) {\n                    damageAmount = parseInt(amountMatch);\n                }\n            } else {\n                const partialDamageData = {\n                    type: {\n                        base: 'physical' as DamageType,\n                        value: 'physical' as DamageType\n                    }\n                }\n                return DefaultValues.damageData(partialDamageData);\n            }\n        }\n        damageType = jsonDamage.includes('P') ? 'physical' : 'stun';\n\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\n\n        const partialDamageData = {\n            type: {\n                base: damageType as DamageType,\n                value: damageType as DamageType,\n            },\n            base: damageAmount,\n            value: damageAmount,\n            ap: {\n                base: damageAp,\n                value: damageAp,\n                mod: [],\n            },\n            attribute: damageAttribute as ActorAttribute,\n        }\n        return DefaultValues.damageData(partialDamageData);\n    }\n\n    public GetBlast(jsonData: object, data: WeaponItemData): BlastData {\n        let blastData: BlastData = {\n            radius: 0,\n            dropoff: 0,\n        };\n\n        let blastCode = ImportHelper.StringValue(jsonData, 'damage');\n\n        let radiusMatch = blastCode.match(/([0-9]+m)/)?.[0];\n        if (radiusMatch !== undefined) {\n            radiusMatch = radiusMatch.match(/[0-9]+/)?.[0];\n            if (radiusMatch !== undefined) {\n                blastData.radius = parseInt(radiusMatch);\n            }\n        }\n\n        let dropoffMatch = blastCode.match(/(-[0-9]+\\/m)/)?.[0];\n        if (dropoffMatch !== undefined) {\n            dropoffMatch = dropoffMatch.match(/-[0-9]+/)?.[0];\n            if (dropoffMatch !== undefined) {\n                blastData.dropoff = parseInt(dropoffMatch);\n            }\n        }\n\n        if (blastData.dropoff && !blastData.radius) {\n            blastData.radius = -(data.data.action.damage.base / blastData.dropoff);\n        }\n\n        return blastData;\n    }\n\n    Parse(jsonData: object, data: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        if (jsonData.hasOwnProperty('range')) {\n            data.data.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\n        } else {\n            data.data.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\n        }\n\n        data.data.thrown.blast = this.GetBlast(jsonData, data);\n\n        return data;\n    }\n}\n","import { ImportHelper } from '../../helper/ImportHelper';\nimport { Constants } from '../../importer/Constants';\nimport DamageData = Shadowrun.DamageData;\nimport WeaponCategory = Shadowrun.WeaponCategory;\nimport SkillName = Shadowrun.SkillName;\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport abstract class WeaponParserBase extends TechnologyItemParserBase<WeaponItemData> {\n    public abstract GetDamage(jsonData: object): DamageData;\n\n    protected GetSkill(weaponJson: object): SkillName {\n        if (weaponJson.hasOwnProperty('useskill')) {\n            let jsonSkill = ImportHelper.StringValue(weaponJson, 'useskill');\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(jsonSkill)) {\n                return Constants.MAP_CATEGORY_TO_SKILL[jsonSkill];\n            }\n            return jsonSkill.replace(/[\\s\\-]/g, '_').toLowerCase();\n        } else {\n            let category = ImportHelper.StringValue(weaponJson, 'category');\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(category)) {\n                return Constants.MAP_CATEGORY_TO_SKILL[category];\n            }\n\n            let type = ImportHelper.StringValue(weaponJson, 'type').toLowerCase();\n            return type === 'ranged' ? 'exotic_range' : 'exotic_melee';\n        }\n    }\n\n    public static GetWeaponType(weaponJson: object): WeaponCategory {\n        let type = ImportHelper.StringValue(weaponJson, 'type');\n        //melee is the least specific, all melee entries are accurate\n        if (type === 'Melee') {\n            return 'melee';\n        } else {\n            // skill takes priorities over category\n            if (weaponJson.hasOwnProperty('useskill')) {\n                let skill = ImportHelper.StringValue(weaponJson, 'useskill');\n                if (skill === 'Throwing Weapons') return 'thrown';\n            }\n\n            // category is the fallback\n            let category = ImportHelper.StringValue(weaponJson, 'category');\n            if (category === 'Throwing Weapons') return 'thrown';\n            // ranged is everything else\n            return 'range';\n        }\n    }\n\n    public Parse(jsonData: object, data: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        data = super.Parse(jsonData, data, jsonTranslation);\n\n        let category = ImportHelper.StringValue(jsonData, 'category');\n        // A single item does not meet normal rules, thanks Chummer!\n        // TODO: Check these rules after localization using a generic, non-english approach.\n        if (category === 'Hold-outs') {\n            category = 'Holdouts';\n        }\n\n        data.data.category = WeaponParserBase.GetWeaponType(jsonData);\n        data.data.subcategory = category.toLowerCase();\n\n        data.data.action.skill = this.GetSkill(jsonData);\n        data.data.action.damage = this.GetDamage(jsonData);\n\n        data.data.action.limit.value = ImportHelper.IntValue(jsonData, 'accuracy');\n        data.data.action.limit.base = ImportHelper.IntValue(jsonData, 'accuracy');\n\n        data.data.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal');\n\n        return data;\n    }\n}\n","import { Helpers } from '../helpers';\nimport DeviceData = Shadowrun.DeviceData;\nimport { SR5Item } from './SR5Item';\nimport AmmoData = Shadowrun.AmmoData;\nimport {SR5} from \"../config\";\n\nexport const ChatData = {\n    action: (data, labels, props) => {\n        if (data.action) {\n            const labelStringList: string[] = [];\n            if (data.action.skill) {\n                labelStringList.push(Helpers.label(data.action.skill));\n                labelStringList.push(Helpers.label(data.action.attribute));\n            } else if (data.action.attribute2) {\n                labelStringList.push(Helpers.label(data.action.attribute));\n                labelStringList.push(Helpers.label(data.action.attribute2));\n            } else if (data.action.attribute) {\n                labelStringList.push(Helpers.label(data.action.attribute));\n            }\n            if (data.action.mod) {\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${data.action.mod})`);\n                // TODO when all mods are modlists\n                // Object.entries(data.action.mod).forEach(([key, value]) =>\n                //     labelStringList.push(`${game.i18n.localize(key)} (${value})`)\n                // );\n            }\n            if (labelStringList.length) {\n                labels.roll = labelStringList.join(' + ');\n            }\n\n            if (data.action.opposed.type) {\n                const { opposed } = data.action;\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\n            }\n\n            // setup action props\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\n            if (data.action.type !== '' && data.action.type !== 'varies' && data.action.type !== 'none') {\n                props.push(`${Helpers.label(data.action.type)} Action`);\n            }\n            if (data.action.limit) {\n                const { limit } = data.action;\n                const attribute = limit.attribute ? `${game.i18n.localize(SR5.limits[limit.attribute])}` : '';\n                const limitVal = limit.value ? limit.value : '';\n                let limitStr = '';\n                if (attribute) {\n                    limitStr += attribute;\n                }\n                if (limitVal) {\n                    if (attribute) {\n                        limitStr += ' + ';\n                    }\n                    limitStr += limitVal;\n                }\n\n                if (limitStr) {\n                    props.push(`Limit ${limitStr}`);\n                }\n            }\n            if (data.action.damage.type.value) {\n                const { damage } = data.action;\n                let damageString = '';\n                let elementString = '';\n                const attribute = damage.attribute ? `${game.i18n.localize(SR5.attributes[damage.attribute])} + ` : '';\n                if (damage.value || attribute) {\n                    const type = damage.type.value ? damage.type.value.toUpperCase().charAt(0) : '';\n                    damageString = `DV ${attribute}${damage.value}${type}`;\n                }\n                if (damage.element.value) {\n                    // if we have a damage value and are electric, follow the convention of (e) after\n                    if (damage.value) {\n                        if (damage.element.value === 'electricity') {\n                            damageString += ' (e)';\n                        } else {\n                            elementString = Helpers.label(damage.element.value);\n                        }\n                    } else {\n                        elementString = Helpers.label(damage.element.value);\n                    }\n                }\n                if (damageString) props.push(damageString);\n                if (elementString) props.push(elementString);\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\n            }\n        }\n    },\n    sin: (data, labels, props) => {\n        props.push(`Rating ${data.technology.rating}`);\n        data.licenses.forEach((license) => {\n            props.push(`${license.name} R${license.rtg}`);\n        });\n    },\n\n    contact: (data, labels, props) => {\n        props.push(data.type);\n        props.push(`${game.i18n.localize('SR5.Connection')} ${data.connection}`);\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${data.loyalty}`);\n        if (data.blackmail) {\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\n        }\n        if (data.family) {\n            props.push(game.i18n.localize('SR5.Family'));\n        }\n    },\n\n    lifestyle: (data, labels, props) => {\n        props.push(Helpers.label(data.type));\n        if (data.cost) props.push(`¥${data.cost}`);\n        if (data.comforts) props.push(`Comforts ${data.comforts}`);\n        if (data.security) props.push(`Security ${data.security}`);\n        if (data.neighborhood) props.push(`Neighborhood ${data.neighborhood}`);\n        if (data.guests) props.push(`Guests ${data.guests}`);\n    },\n\n    adept_power: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(`PP ${data.pp}`);\n        props.push(Helpers.label(data.type));\n    },\n\n    armor: (data, labels, props) => {\n        if (data.armor) {\n            if (data.armor.value) props.push(`Armor ${data.armor.mod ? '+' : ''}${data.armor.value}`);\n            if (data.armor.acid) props.push(`Acid ${data.armor.acid}`);\n            if (data.armor.cold) props.push(`Cold ${data.armor.cold}`);\n            if (data.armor.fire) props.push(`Fire ${data.armor.fire}`);\n            if (data.armor.electricity) props.push(`Electricity ${data.armor.electricity}`);\n            if (data.armor.radiation) props.push(`Radiation ${data.armor.radiation}`);\n        }\n    },\n\n    ammo: (data, labels, props) => {\n        if (data.damageType) props.push(`${game.i18n.localize(\"SR5.DamageType\")} ${data.damageType}`);\n        if (data.damage) props.push(`${game.i18n.localize(\"SR5.DamageValue\")} ${data.damage}`);\n        if (data.element) props.push(`${game.i18n.localize(\"SR5.Element\")} ${data.element}`);\n        if (data.ap) props.push(`${game.i18n.localize(\"SR5.AP\")} ${data.ap}`);\n        if (data.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${data.blast.radius}m`);\n        if (data.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${data.blast.dropoff}/m`);\n    },\n\n    program: (data, labels, props) => {\n        props.push(game.i18n.localize(SR5.programTypes[data.type]));\n    },\n\n    complex_form: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(Helpers.label(data.target), Helpers.label(data.duration));\n        const { fade } = data;\n        if (fade > 0) props.push(`Fade L+${fade}`);\n        else if (fade < 0) props.push(`Fade L${fade}`);\n        else props.push('Fade L');\n    },\n\n    cyberware: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        ChatData.armor(data, labels, props);\n        if (data.essence) props.push(`Ess ${data.essence}`);\n    },\n\n    bioware: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        ChatData.armor(data, labels, props);\n        if (data.essence) props.push(`Ess ${data.essence}`);\n    },\n\n    device: (data: DeviceData, labels, props) => {\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\n        if (data.category === 'cyberdeck') {\n            for (const attN of Object.values(data.atts)) {\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\n            }\n        }\n    },\n\n    equipment: (data, labels, props) => {\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\n    },\n\n    quality: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(Helpers.label(data.type));\n    },\n\n    sprite_power: (data, labels, props) => {\n        // add action data\n        ChatData.action(data, labels, props);\n    },\n\n    critter_power: (data, labels, props) => {\n        // power type\n        props.push(game.i18n.localize(SR5.critterPower.types[data.powerType]));\n        // duration\n        props.push(game.i18n.localize(SR5.critterPower.durations[data.duration]));\n        // range\n        props.push(game.i18n.localize(SR5.critterPower.ranges[data.range]));\n\n        // add action data\n        ChatData.action(data, labels, props);\n    },\n\n    // add properties for spell data, follow order in book\n    spell: (data, labels, props) => {\n        // first category and type\n        props.push(Helpers.label(data.category), Helpers.label(data.type));\n\n        // add subtype tags\n        if (data.category === 'combat') {\n            props.push(Helpers.label(data.combat.type));\n        } else if (data.category === 'health') {\n        } else if (data.category === 'illusion') {\n            props.push(data.illusion.type);\n            props.push(data.illusion.sense);\n        } else if (data.category === 'manipulation') {\n            if (data.manipulation.damaging) props.push('Damaging');\n            if (data.manipulation.mental) props.push('Mental');\n            if (data.manipulation.environmental) props.push('Environmental');\n            if (data.manipulation.physical) props.push('Physical');\n        } else if (data.category === 'detection') {\n            props.push(data.illusion.type);\n            props.push(data.illusion.passive ? 'Passive' : 'Active');\n            if (data.illusion.extended) props.push('Extended');\n        }\n        // add range\n        props.push(Helpers.label(data.range));\n\n        // add action data\n        ChatData.action(data, labels, props);\n\n        // add duration data\n        props.push(Helpers.label(data.duration));\n\n        // add drain data\n        const { drain } = data;\n        if (drain > 0) props.push(`Drain F+${drain}`);\n        else if (drain < 0) props.push(`Drain F${drain}`);\n        else props.push('Drain F');\n\n        labels.roll = 'Cast';\n    },\n\n    weapon: (data, labels, props, item: SR5Item) => {\n        ChatData.action(data, labels, props);\n        for (let i = 0; i < props.length; i++) {\n            const prop = props[i];\n            if (prop.includes('Limit')) {\n                props[i] = prop.replace('Limit', 'Accuracy');\n            }\n        }\n\n        const equippedAmmo = item.getEquippedAmmo();\n        if (equippedAmmo && data.ammo && data.ammo.current?.max) {\n            if (equippedAmmo) {\n                const ammoData = equippedAmmo.data.data as AmmoData;\n                const { current, spare_clips } = data.ammo;\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\n                if (ammoData.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${ammoData.blast.radius}m`);\n                if (ammoData.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} $ammoData.blast.dropoff}/m`);\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\n            }\n        }\n\n        if (data.technology?.conceal?.value) {\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${data.technology.conceal.value}`);\n        }\n\n        if (data.category === 'range') {\n            if (data.range.rc) {\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${data.range.rc.value}`;\n                if (item?.actor) {\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\n                }\n                props.push(rcString);\n            }\n            if (data.range.modes) {\n                const newModes: string[] = [];\n                const { modes } = data.range;\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\n            }\n            if (data.range.ranges) props.push(Array.from(Object.values(data.range.ranges)).join('/'));\n        } else if (data.category === 'melee') {\n            if (data.melee.reach) {\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${data.melee.reach}`;\n                // find accuracy in props and insert ourselves after it\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\n                if (accIndex > -1) {\n                    props.splice(accIndex + 1, 0, reachString);\n                } else {\n                    props.push(reachString);\n                }\n            }\n        } else if (data.category === 'thrown') {\n            const { blast } = data.thrown;\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\n\n            if (data.thrown.ranges) {\n                const mult = data.thrown.ranges.attribute && item?.actor ? item.actor.data.data.attributes[data.thrown.ranges.attribute].value : 1;\n                const ranges = [data.thrown.ranges.short, data.thrown.ranges.medium, data.thrown.ranges.long, data.thrown.ranges.extreme];\n                props.push(ranges.map((v) => v * mult).join('/'));\n            }\n        }\n\n        const equippedMods = item.getEquippedMods();\n        if (equippedMods) {\n            equippedMods.forEach((mod) => {\n                props.push(`${mod.name}`);\n            });\n        }\n    },\n};\n","import {Helpers} from '../helpers';\nimport {SR5Actor} from '../actor/SR5Actor';\nimport {ActionTestData, ShadowrunItemDialog} from '../apps/dialogs/ShadowrunItemDialog';\nimport {ChatData} from './ChatData';\nimport {ShadowrunRoll, ShadowrunRoller, Test} from '../rolls/ShadowrunRoller';\nimport {createItemChatMessage} from '../chat';\nimport {DEFAULT_ROLL_NAME, FLAGS, SYSTEM_NAME} from '../constants';\nimport {SR5ItemDataWrapper} from '../data/SR5ItemDataWrapper';\nimport {PartsList} from '../parts/PartsList';\nimport ModList = Shadowrun.ModList;\nimport AttackData = Shadowrun.AttackData;\nimport AttributeField = Shadowrun.AttributeField;\nimport SkillField = Shadowrun.SkillField;\nimport LimitField = Shadowrun.LimitField;\nimport FireModeData = Shadowrun.FireModeData;\nimport SpellForceData = Shadowrun.SpellForceData;\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\nimport FireRangeData = Shadowrun.FireRangeData;\nimport BlastData = Shadowrun.BlastData;\nimport ConditionData = Shadowrun.ConditionData;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport DamageData = Shadowrun.DamageData;\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\nimport SpellDefenseOptions = Shadowrun.SpellDefenseOptions;\nimport SpellData = Shadowrun.SpellData;\nimport WeaponData = Shadowrun.WeaponData;\nimport AmmoData = Shadowrun.AmmoData;\nimport TechnologyPartData = Shadowrun.TechnologyPartData;\nimport TechnologyData = Shadowrun.TechnologyData;\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\nimport SpellRange = Shadowrun.SpellRange;\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\nimport {ActionFlow} from \"./flows/ActionFlow\";\nimport {SkillFlow} from \"../actor/flows/SkillFlow\";\nimport {SR5} from \"../config\";\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\nimport ActionItemData = Shadowrun.ActionItemData;\nimport AdeptPowerItemData = Shadowrun.AdeptPowerItemData;\nimport AmmoItemData = Shadowrun.AmmoItemData;\nimport ArmorItemData = Shadowrun.ArmorItemData;\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\nimport ContactItemData = Shadowrun.ContactItemData;\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\nimport DeviceItemData = Shadowrun.DeviceItemData;\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\nimport LifestyleItemData = Shadowrun.LifestyleItemData;\nimport ModificationItemData = Shadowrun.ModificationItemData;\nimport ProgramItemData = Shadowrun.ProgramItemData;\nimport QualityItemData = Shadowrun.QualityItemData;\nimport SinItemData = Shadowrun.SinItemData;\nimport SpellItemData = Shadowrun.SpellItemData;\nimport SpritePowerItemData = Shadowrun.SpritePowerItemData;\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\n/**\n * Implementation of Shadowrun5e items (owned, unowned and embedded).\n *\n *       tamIf here: The current legacy embedded items approach has been cleaned up a bit but is still causing some issues\n *       with typing and ease of use.\n *\n *       SR5Item.items currently overwrites foundries internal DocumentCollection mechanism of embedded documents. Partially\n *       due to legacy reasons and since Foundry 0.8 SR5Item.update can't be used for embedded items in items anymore.\n *\n *        At the moment this means, that this.actor can actually be an SR5Actor as well as an SR5Item, depending on who\n *       'owns' the embedded item as they are created using Item.createOwned during the embedded item prep phase.\n *\n *       For this reason SR5Item.actorOwner has been introduced to allow access to the actual owning actor, no matter\n *       how deep embedded into other items an item is.\n *\n *       Be wary of SR5Item.actor for this reason!\n */\nexport class SR5Item extends Item<ShadowrunItemData> {\n    // Item.items isn't the Foundry default ItemCollection but is overwritten within prepareEmbeddedEntities\n    // to allow for embedded items in items in actors.\n    items: SR5Item[];\n\n    // Item Sheet labels for quick info on an item dropdown.\n    labels: {} = {};\n\n\n    /**\n     * Return the owner of this item, which can either be\n     * - an actor instance (Foundry default)\n     * - an item instance (shadowrun custom) for embedded items\n     *\n     * If you need the actual actor owner, no matter how deep into item embedding, this current item is use SR5item.actorOwner\n     */\n    // @ts-ignore // TODO: TYPE: Check foundry-vtt-types systems for how Items and Actors type.\n    get actor(): SR5Actor {\n        return super.actor as unknown as SR5Actor;\n    }\n\n    /**\n     * Helper property to get an actual actor for an owned or embedded item. You'll need this for when you work with\n     * embeddedItems, as they have their .actor property set to the item they're embedded into.\n     *\n     * NOTE: This helper is necessary since we have setup embedded items with an item owner, due to the current embedding\n     *       workflow using item.update.isOwned condition within Item.update (foundry Item) to NOT trigger a global item\n     *       update within the ItemCollection but instead have this.actor.updateEmbeddedEntities actually trigger SR5Item.updateEmbeddedEntities\n     */\n    get actorOwner(): SR5Actor | undefined {\n        // An unowned item won't have an actor.\n        if (!this.actor) return;\n        // An owned item will have an actor.\n        if (this.actor instanceof SR5Actor) return this.actor;\n        // An embedded item will have an item as an actor, which might have an actor owner.\n        // NOTE: This is very likely wrong and should be fixed during embedded item prep / creation. this.actor will only\n        //       check what is set in the items options.actor during it's construction.\n        //@ts-ignore\n        return this.actor.actorOwner;\n    }\n\n    private get wrapper(): SR5ItemDataWrapper {\n        // we need to cast here to unknown first to make ts happy\n        return new SR5ItemDataWrapper((this.data as unknown) as ShadowrunItemData);\n    }\n\n    // Flag Functions\n    getLastFireMode(): FireModeData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireMode) || { value: 0 };\n    }\n    async setLastFireMode(fireMode: FireModeData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireMode, fireMode);\n    }\n    getLastSpellForce(): SpellForceData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastSpellForce) || { value: 0 };\n    }\n    async setLastSpellForce(force: SpellForceData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastSpellForce, force);\n    }\n    getLastComplexFormLevel(): ComplexFormLevelData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel) || { value: 0 };\n    }\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel, level);\n    }\n    getLastFireRangeMod(): FireRangeData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireRange) || { value: 0 };\n    }\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireRange, environmentalMod);\n    }\n\n    /**\n     * Return an Array of the Embedded Item Data\n     * TODO properly type this\n     */\n    getEmbeddedItems(): any[] {\n        let items = this.getFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\n\n        items = items ? items : [];\n\n        // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\n        if (items && !Array.isArray(items)) {\n            items = Helpers.convertIndexedObjectToArray(items);\n        }\n\n        // Manually map wrongly converted array fields...\n        items = items.map(item => {\n            if (item.effects && !Array.isArray(item.effects)) {\n                item.effects = Helpers.convertIndexedObjectToArray(item.effects);\n            }\n            return item;\n        });\n\n        return items;\n    }\n\n    /**\n     * Set the embedded item data\n     * @param items\n     */\n    async setEmbeddedItems(items: any[]) {\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\n        // await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\n        await this.setFlag(SYSTEM_NAME, FLAGS.EmbeddedItems, items);\n    }\n\n    async clearEmbeddedItems() {\n        await this.unsetFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\n    }\n\n    get hasOpposedRoll(): boolean {\n        const action = this.getAction();\n        if (!action) return false;\n        return !!action.opposed.type;\n    }\n\n    get hasRoll(): boolean {\n        const action = this.getAction();\n        return !!(action && action.type !== '' && (action.skill || action.attribute || action.attribute2 || action.dice_pool_mod));\n    }\n    get hasTemplate(): boolean {\n        return this.isAreaOfEffect();\n    }\n\n    /**\n     * PREPARE DATA CANNOT PULL FROM this.actor at ALL\n     * - as of foundry v0.7.4, actor data isn't prepared by the time we prepare items\n     * - this caused issues with Actions that have a Limit or Damage attribute and so those were moved\n     */\n    prepareData() {\n        super.prepareData();\n\n        // Description labels might have changed since last data prep.\n        this.labels = {};\n\n        if (this.data.type === 'sin') {\n            if (typeof this.data.data.licenses === 'object') {\n                //@ts-ignore // taMiF: This seems to be a hacky solution to some internal or Foundry issue with reading\n                //                      a object/HashMap when an array/iterable was expected\n                this.data.data.licenses = Object.values(this.data.data.licenses);\n            }\n        }\n        const equippedMods = this.getEquippedMods();\n        const equippedAmmo = this.getEquippedAmmo();\n\n        const technology = this.getTechnology();\n        if (technology) {\n            // taMiF: This migration code could be needed for items imported from an older compendium?\n            if (technology.condition_monitor === undefined) {\n                technology.condition_monitor = { value: 0, max: 0, label: '' };\n            }\n            // Rating might be a string.\n            const rating = typeof technology.rating === 'string' ? 0 : technology.rating;\n            technology.condition_monitor.max = 8 + Math.ceil(rating / 2);\n\n            // Calculate conceal data.\n            if (!technology.conceal) technology.conceal = {base: 0, value: 0, mod: []};\n\n            const concealParts = new PartsList<number>();\n            equippedMods.forEach((mod) => {\n                const technology = mod.getTechnology();\n\n                if (technology && technology.conceal.value) {\n                    concealParts.addUniquePart(mod.name, technology.conceal.value);\n                }\n            });\n\n            technology.conceal.mod = concealParts.list;\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\n        }\n\n        const action = this.getAction();\n        if (action) {\n            action.alt_mod = 0;\n            action.limit.mod = [];\n            action.damage.mod = [];\n            action.damage.ap.mod = [];\n            action.dice_pool_mod = [];\n\n            // @ts-ignore\n            // Due to faulty template value items without a set operator will have a operator literal instead since 0.7.10.\n            if (action.damage.base_formula_operator === '+') {\n                action.damage.base_formula_operator = 'add';\n            }\n\n            // Item.prepareData is called once (first) with an empty SR5Actor instance without .data and once (second) with .data.\n            if (this.actor?.data) {\n                action.damage.source = {\n                    actorId: this.actor.id,\n                    itemId: this.id,\n                    itemName: this.name,\n                    itemType: this.data.type\n                };\n            }\n\n            // handle overrides from mods\n            const limitParts = new PartsList(action.limit.mod);\n            const dpParts = new PartsList(action.dice_pool_mod);\n            equippedMods.forEach((mod) => {\n                const modification = mod.asModificationData();\n                if (!modification) return;\n\n                if (modification.data.accuracy) {\n                    limitParts.addUniquePart(mod.name, modification.data.accuracy);\n                }\n                if (modification.data.dice_pool) {\n                    dpParts.addUniquePart(mod.name, modification.data.dice_pool);\n                }\n            });\n\n\n\n            if (equippedAmmo) {\n                const ammoData = equippedAmmo.data.data as AmmoData;\n                // add mods to damage from ammo\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name, ammoData.damage);\n                // add mods to ap from ammo\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name, ammoData.ap);\n\n                // override element\n                if (ammoData.element) {\n                    action.damage.element.value = ammoData.element;\n                } else {\n                    action.damage.element.value = action.damage.element.base;\n                }\n\n                // override damage type\n                if (ammoData.damageType) {\n                    action.damage.type.value = ammoData.damageType;\n                } else {\n                    action.damage.type.value = action.damage.type.base;\n                }\n            } else {\n                // set value if we don't have item overrides\n                action.damage.element.value = action.damage.element.base;\n                action.damage.type.value = action.damage.type.base;\n            }\n\n            // once all damage mods have been accounted for, sum base and mod to value\n            action.damage.value = Helpers.calcTotal(action.damage);\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\n\n            action.limit.value = Helpers.calcTotal(action.limit);\n        }\n\n        const range = this.getWeaponRange();\n        if (range) {\n            if (range.rc) {\n                const rangeParts = new PartsList();\n                equippedMods.forEach((mod) => {\n                    //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\n                    if (mod.data.data.rc) rangeParts.addUniquePart(mod.name, mod.data.data.rc);\n                    // handle overrides from ammo\n                });\n                //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\n                range.rc.mod = rangeParts.list;\n                //@ts-ignore // TypeScript doesn't like this.data.data Item.Data<DataType> possibly being all the things.\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\n            }\n        }\n\n        const adeptPower = this.asAdeptPowerData();\n        if (adeptPower) {\n            adeptPower.data.type = adeptPower.data.action.type ? 'active' : 'passive';\n        }\n    }\n\n    async postItemCard() {\n        const tests =  this.getActionTests();\n        const options = {\n            actor: this.actor,\n            description: this.getChatData(),\n            item: this,\n            previewTemplate: this.hasTemplate,\n            tests\n        };\n        return await createItemChatMessage(options);\n    }\n\n    async castAction(event?) {\n        if (!this.actor) return;\n\n        const dontRollTest = event?.shiftKey || !this.hasRoll;\n        if (dontRollTest) return await this.postItemCard();\n\n        const dialog = await ShadowrunItemDialog.create(this, event);\n        // Some items might not have an additional dialog.\n        if (!dialog) return await this.rollTest(event);\n\n        const actionTestData = await dialog.select();\n        if (dialog.canceled) return;\n\n        return await this.rollTest(event, actionTestData);\n}\n\n    getChatData(htmlOptions?) {\n        const data = duplicate(this.data.data);\n        const { labels } = this;\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\n        //              that's not actually defined in any SR5Item typing.\n        if (!data.description) data.description = {};\n        // TextEditor.enrichHTML will return null as a string, making later handling difficult.\n        if (!data.description.value) data.description.value = '';\n\n        data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\n\n        const props = [];\n        const func = ChatData[this.data.type];\n        if (func) func(duplicate(data), labels, props, this);\n\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\n        //              that's not actually defined in any SR5Item typing.\n        data.properties = props.filter((p) => !!p);\n\n        return data;\n    }\n\n    getActionTestName(): string {\n        const testName = this.getRollName();\n        return testName ? testName :  game.i18n.localize('SR5.Action');\n    }\n\n    getOpposedTestName(): string {\n        let name = '';\n        const action = this.getAction();\n        if (action && action.opposed.type) {\n            const { opposed } = action;\n            if (opposed.type !== 'custom') {\n                name = `${Helpers.label(opposed.type)}`;\n            } else if (opposed.skill) {\n                name = `${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\n            } else if (opposed.attribute2) {\n                name = `${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\n            } else if (opposed.attribute) {\n                name = `${Helpers.label(opposed.attribute)}`;\n            }\n        }\n\n        const mod = this.getOpposedTestModifier();\n        if (mod) name += ` ${mod}`;\n        return name;\n    }\n\n    getOpposedTestMod(): PartsList<number> {\n        const parts = new PartsList<number>();\n        if (this.hasDefenseTest()) {\n            if (this.isAreaOfEffect()) {\n                parts.addUniquePart('SR5.Aoe', -2);\n            }\n            if (this.isRangedWeapon()) {\n                const fireModeData = this.getLastFireMode();\n                if (fireModeData?.defense) {\n                    if (fireModeData.defense !== 'SR5.DuckOrCover') {\n                        const fireMode = +fireModeData.defense;\n                        parts.addUniquePart('SR5.FireMode', fireMode);\n                    }\n                }\n            }\n        }\n        return parts;\n    }\n\n    getOpposedTestModifier(): string {\n        const testMod = this.getOpposedTestMod();\n        const total = testMod.total;\n        if (total) return `(${total})`;\n        else {\n            if (this.isRangedWeapon()) {\n                const fireModeData = this.getLastFireMode();\n                if (fireModeData?.defense) {\n                    if (fireModeData.defense === 'SR5.DuckOrCover') {\n                        return game.i18n.localize('SR5.DuckOrCover');\n                    }\n                }\n            }\n        }\n        return '';\n    }\n\n     getBlastData(actionTestData?: ActionTestData): BlastData | undefined {\n        if (this.isSpell() && this.isAreaOfEffect()) {\n            const data = this.data.data as SpellData;\n\n            // By default spell distance is equal to it's Force.\n            let distance = this.getLastSpellForce().value;\n\n            // Except for predefined user test selection.\n            if (actionTestData?.spell) {\n                distance = actionTestData.spell.force;\n            }\n\n            // Extended spells have a longer range.\n            if (data.extended) distance *= 10;\n            const dropoff = 0;\n\n            return {\n                radius: distance,\n                dropoff\n            }\n\n        } else if (this.isGrenade()) {\n            const data = this.data.data as WeaponData;\n\n            const distance = data.thrown.blast.radius;\n            const dropoff = data.thrown.blast.dropoff;\n\n            return {\n                radius: distance,\n                dropoff\n            }\n\n        } else if (this.hasExplosiveAmmo()) {\n            const ammo = this.getEquippedAmmo();\n            const ammoData = ammo.asAmmoData();\n            const distance = ammoData.data.blast.radius;\n            const dropoff = ammoData.data.blast.dropoff;\n\n            return {\n                radius: distance,\n                dropoff\n            };\n        }\n    }\n\n    getEquippedAmmo(): SR5Item {\n        const equippedAmmos = (this.items || []).filter((item) =>\n            item.isAmmo() &&\n            item.isEquipped());\n\n        // Cast Typing isn't a mistake, so long as isAmmo is filtered.\n        return equippedAmmos[0];\n    }\n\n    getEquippedMods(): SR5Item[] {\n        return (this.items || []).filter((item) =>\n            item.isWeaponModification() &&\n            item.isEquipped());\n    }\n\n    hasExplosiveAmmo(): boolean {\n        const ammo = this.getEquippedAmmo();\n        if (!ammo) return false;\n        const data = ammo.data.data as AmmoData;\n        return data.blast.radius > 0;\n    }\n\n    async equipWeaponMod(iid) {\n        const mod = this.getOwnedItem(iid);\n        if (mod) {\n            const dupData = duplicate(mod.data);\n            const data = dupData.data as TechnologyPartData;\n            data.technology.equipped = !data.technology.equipped;\n            await this.updateOwnedItem(dupData);\n        }\n    }\n\n    hasAmmo(): boolean {\n        return this.wrapper.hasAmmo();\n    }\n\n    /**\n     * Use the weapons ammunition with the amount of bullets fired.\n     * @param fired Amount of bullets fired.\n     */\n    async useAmmo(fired) {\n        const weapon = duplicate(this.asWeaponData());\n        if (weapon) {\n            const { ammo } = weapon.data;\n            ammo.current.value = Math.max(0, ammo.current.value - fired);\n\n            return await this.update(weapon);\n        }\n    }\n\n    async reloadAmmo() {\n        const data = duplicate(this.asWeaponData());\n\n        if (!data) return;\n\n        const { ammo } = data.data;\n        const diff = ammo.current.max - ammo.current.value;\n        ammo.current.value = ammo.current.max;\n\n        if (ammo.spare_clips) {\n            ammo.spare_clips.value = Math.max(0, ammo.spare_clips.value - 1);\n        }\n\n        await this.update(data);\n\n        const newAmmunition = (this.items || [])\n            .filter((i) => i.data.type === 'ammo')\n            .reduce((acc: Entity.Data[], item) => {\n                const ammoData = item.asAmmoData();\n\n                if (ammoData && ammoData.data.technology.equipped) {\n                    const { technology } = ammoData.data;\n                    const qty = typeof technology.quantity === 'string' ? 0 : technology.quantity;\n                    technology.quantity = Math.max(0, qty - diff);\n                    acc.push(item.data);\n                }\n                return acc;\n            }, []);\n\n        if (newAmmunition && newAmmunition.length) {\n            await this.updateOwnedItem(newAmmunition);\n        }\n    }\n\n    async equipAmmo(iid) {\n        // only allow ammo that was just clicked to be equipped\n        const ammo = this.items\n            .filter((item) => item.type === 'ammo')\n            .map((item) => {\n                const ownedItem = this.getOwnedItem(item.id);\n                const ammoData = ownedItem?.asAmmoData();\n\n                if (ownedItem && ammoData) {\n                    ammoData.data.technology.equipped = iid === item.id;\n                    return ownedItem.data;\n                }\n            });\n        await this.updateOwnedItem(ammo);\n    }\n\n    async addNewLicense() {\n        const sin = duplicate(this.asSinData());\n        if (!sin) return;\n\n        // NOTE: This might be related to Foundry data serialization sometimes returning arrays as ordered HashMaps...\n        if (typeof sin.data.licenses === 'object') {\n            // @ts-ignore\n            sin.data.licenses = Object.values(sin.data.licenses);\n        }\n\n        sin.data.licenses.push({\n            name: '',\n            rtg: '',\n            description: '',\n        });\n\n        await this.update(sin);\n    }\n\n    getRollPartsList(): ModList<number> {\n        // we only have a roll if we have an action or an actor\n        const action = this.getAction();\n        if (!action || !this.actor) return [];\n\n        // @ts-ignore\n        const parts = new PartsList(duplicate(this.getModifierList()));\n\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\n\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\n\n        // if we have a valid skill, don't look for a second attribute\n        if (skill) {\n            parts.addUniquePart(skill.label || skill.name, skill.value);\n            SkillFlow.handleDefaulting(skill, parts);\n        }\n        else if (attribute2 && attribute2.label) {\n            parts.addPart(attribute2.label, attribute2.value);\n        }\n\n        const spec = this.getActionSpecialization();\n        if (spec) parts.addUniquePart(spec, 2);\n\n        //@ts-ignore parseInt does allow for number type parameter.\n        const mod = parseInt(this.data.data.action.mod || 0);\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\n\n        const atts: (AttributeField | SkillField)[] | boolean = [];\n        if (attribute !== undefined) atts.push(attribute);\n        if (attribute2 !== undefined) atts.push(attribute2);\n        if (skill !== undefined) atts.push(skill);\n        // add global parts from actor\n        this.actor._addGlobalParts(parts);\n        this.actor._addMatrixParts(parts, atts);\n        this._addWeaponParts(parts);\n\n        return parts.list;\n    }\n\n    calculateRecoil() {\n        const lastFireMode = this.getLastFireMode();\n        if (!lastFireMode) return 0;\n        if (lastFireMode.value === 20) return 0;\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\n    }\n\n    _addWeaponParts(parts: PartsList<number>) {\n        if (this.isRangedWeapon()) {\n            const recoil = this.calculateRecoil();\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\n        }\n    }\n\n    isSin(): boolean {\n        return this.wrapper.isSin();\n    }\n\n    asSinData(): SinItemData | undefined {\n        if (this.isSin()) {\n            return this.data as SinItemData;\n        }\n    }\n\n    isLifestyle(): boolean {\n        return this.wrapper.isLifestyle();\n    }\n\n    asLifestyleData(): LifestyleItemData | undefined {\n        if (this.isLifestyle()) {\n            return this.data as LifestyleItemData;\n        }\n    }\n\n    isAmmo(): boolean {\n        return this.wrapper.isAmmo();\n    }\n\n    asAmmoData(): AmmoItemData | undefined {\n        if (this.isAmmo()) {\n            return this.data as AmmoItemData;\n        }\n    }\n\n    isModification(): boolean {\n        return this.wrapper.isModification();\n    }\n\n    asModificationData(): ModificationItemData | undefined {\n        if (this.isModification()) {\n            return this.data as ModificationItemData;\n        }\n    }\n\n    isWeaponModification(): boolean {\n        return this.wrapper.isWeaponModification();\n    }\n\n    isArmorModification(): boolean {\n        return this.wrapper.isArmorModification();\n    }\n\n    isProgram(): boolean {\n        return this.wrapper.isProgram();\n    }\n\n    asProgramData(): ProgramItemData | undefined {\n        if (this.isProgram()) {\n            return this.data as ProgramItemData;\n        }\n    }\n\n    isQuality(): boolean {\n        return this.wrapper.isQuality();\n    }\n\n    asQualityData(): QualityItemData | undefined {\n        if (this.isQuality()) {\n            return this.data as QualityItemData;\n        }\n    }\n\n    isAdeptPower(): boolean {\n        return this.data.type === 'adept_power';\n    }\n\n    asAdeptPowerData(): AdeptPowerItemData|undefined {\n        if (this.isAdeptPower())\n            return this.data as AdeptPowerItemData;\n    }\n\n    async removeLicense(index) {\n        const data = duplicate(this.asSinData());\n        if (data) {\n            data.data.licenses.splice(index, 1);\n            await this.update(data);\n        }\n    }\n\n    isAction(): boolean {\n        return this.wrapper.isAction();\n    }\n\n    asActionData(): ActionItemData | undefined {\n        if (this.isAction()) {\n            return this.data as ActionItemData;\n        }\n    }\n\n\n\n    async rollOpposedTest(target: SR5Actor, attack: AttackData, event):  Promise<ShadowrunRoll | undefined> {\n        const options = {\n            event,\n            fireModeDefense: 0,\n            cover: false,\n            attack\n        };\n\n        const parts = this.getOpposedTestMod();\n        const action = this.getAction();\n        if (!action) return;\n\n        const { opposed } = action;\n\n        if (opposed.type === 'defense') {\n            return await this.rollDefense(target, options);\n\n        } else if (opposed.type === 'soak') {\n            options['damage'] = attack?.damage;\n            options['attackerHits'] = attack?.hits;\n            return await target.rollSoak(options, parts.list);\n\n        } else if (opposed.type === 'armor') {\n            return target.rollArmor(options);\n\n        } else if (opposed.skill && opposed.attribute) {\n            const skill = target.getSkill(opposed.skill);\n\n            if (!skill) {\n                ui.notifications?.error(game.i18n.localize(\"SR5.Errors.MissingSkill\"));\n                return;\n            }\n\n            return target.rollSkill(skill, {\n                ...options,\n                attribute: opposed.attribute,\n            });\n\n        } else if (opposed.attribute && opposed.attribute2) {\n            return target.rollTwoAttributes([opposed.attribute, opposed.attribute2], options);\n\n        } else if (opposed.attribute) {\n            return target.rollSingleAttribute(opposed.attribute, options);\n\n        }\n    }\n\n    async rollTestType(type: string, attack: AttackData, event, target: SR5Actor) {\n        if (type === 'opposed') {\n            await this.rollOpposedTest(target, attack, event);\n        }\n        if (type === 'action') {\n            await this.castAction(event);\n        }\n    }\n\n    /**\n     * Rolls a test using the latest stored data on the item (force, fireMode, level)\n     * @param event - mouse event\n     * @param actionTestData\n     */\n    async rollTest(event, actionTestData?: ActionTestData): Promise<ShadowrunRoll | undefined> {\n\n        const roll = await ShadowrunRoller.itemRoll(event, this, actionTestData);\n        if (!roll) return;\n\n        await ShadowrunRoller.resultingItemRolls(event, this, actionTestData);\n\n        return roll;\n    }\n\n    /**\n     * The item can be stored on a token on the current or another, given, scene.\n     *\n     * The chat message must contain a data attribute containing a 'SceneId.TokenId' mapping.\n     * See chat.ts#getTokenSceneId for further context.\n     *\n     *\n     * @param html\n     */\n    static getItemFromMessage(html): SR5Item | undefined {\n        if (!game || !game.scenes || !game.ready || !canvas || !canvas.ready || !canvas.scene) return;\n\n        const card = html.find('.chat-card');\n        let actor;\n        const sceneTokenId = card.data('tokenId');\n        if (sceneTokenId) actor = Helpers.getSceneTokenActor(sceneTokenId);\n        else actor = game.actors.get(card.data('actorId'));\n\n        if (!actor) return;\n        const itemId = card.data('itemId');\n        return actor.items.get(itemId);\n    }\n\n    static getTargets() {\n        if (!game.ready || !game.user) return;\n        const { character } = game.user;\n        // @ts-ignore\n        const { controlled } = canvas.tokens;\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\n        if (character && controlled.length === 0) targets.push(character);\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\n        return targets;\n    }\n\n    getActionTests(): Test[] {\n        if (!this.hasRoll) return []\n\n        return [{\n            label: this.getActionTestName(),\n            type: 'action',\n        }];\n    }\n\n    getOpposedTests(): Test[] {\n        if (!this.hasOpposedRoll) {\n            return [];\n        }\n        return [{\n            label: this.getOpposedTestName(),\n            type: 'opposed',\n        }];\n    }\n\n    /**\n     * Create an item in this item\n     * @param itemData\n     * @param options\n     */\n    async createOwnedItem(itemData, options = {}) {\n        if (!Array.isArray(itemData)) itemData = [itemData];\n        // weapons accept items\n        if (this.type === 'weapon') {\n            const currentItems = duplicate(this.getEmbeddedItems());\n\n            itemData.forEach((ogItem) => {\n                const item = duplicate(ogItem);\n                item._id = randomID(16);\n                if (item.type === 'ammo' || item.type === 'modification') {\n                    if (item?.data?.technology?.equipped) {\n                        item.data.technology.equipped = false;\n                    }\n                    currentItems.push(item);\n                }\n            });\n\n            await this.setEmbeddedItems(currentItems);\n        }\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n\n        return true;\n    }\n\n    /**\n     * Prepare embeddedItems\n     */\n    prepareEmbeddedEntities() {\n        super.prepareEmbeddedEntities();\n        let items = this.getEmbeddedItems();\n\n        // Templates and further logic need a items HashMap, yet the flag provides an array.\n        if (items) {\n\n            const existing = (this.items || []).reduce((object, i) => {\n                object[i.id] = i;\n                return object;\n            }, {});\n\n            // Merge and overwrite existing owned items with new changes.\n            this.items = items.map((item) => {\n                if (item._id in existing) {\n                    const currentItem = existing[item._id];\n\n                    // Update DocumentData directly, since we're not really having database items here.\n                    currentItem.data.update(item);\n                    currentItem.prepareData();\n                    return currentItem;\n\n                } else {\n                    // NOTE: createdOwned expects an Actor instance as the second parameter.\n                    //       HOWEVER the legacy approach for embeddedItems in other items relies upon this.actor\n                    //       returning an SR5Item instance to call .updateEmbeddedEntities, when Foundry expects an actor\n                    //@ts-ignore // this should be an Actor instance, but we deliberately use an Item instance.\n                    return Item.createOwned(item, this);\n                }\n            });\n        }\n    }\n\n    getOwnedItem(itemId): SR5Item | undefined {\n        const items = this.items;\n        if (!items) return;\n        return items.find((item) => item.id === itemId);\n    }\n\n    // TODO: Rework this method. It's complicated and obvious optimizations can be made. (find vs findIndex)\n    async updateOwnedItem(changes) {\n        const items = duplicate(this.getEmbeddedItems());\n        if (!items) return;\n        changes = Array.isArray(changes) ? changes : [changes];\n        if (!changes || changes.length === 0) return;\n        changes.forEach((itemChanges) => {\n            const index = items.findIndex((i) => i._id === itemChanges._id);\n            if (index === -1) return;\n            const item = items[index];\n            // TODO: The _id field has been added by the system. Even so, don't change the id to avoid any byproducts.\n            delete itemChanges._id;\n\n            if (item) {\n                itemChanges = expandObject(itemChanges);\n                mergeObject(item, itemChanges);\n                items[index] = item;\n                // this.items[index].data = items[index];\n            }\n        });\n\n        await this.setEmbeddedItems(items);\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    /**\n     * This method hooks into the Foundry Item.update approach and is called using this<Item>.actor.updateEmbeddedEntity.\n     *\n     * @param embeddedName\n     * @param data\n     * @param options\n     */\n    // @ts-ignore\n    async updateEmbeddedEntity(embeddedName,data, options?): Promise<any> {\n        await this.updateOwnedItem(data);\n        return this;\n    }\n\n    /**\n     * Remove an owned item\n     * @param deleted\n     * @returns {Promise<boolean>}\n     */\n    async deleteOwnedItem(deleted) {\n        const items = duplicate(this.getEmbeddedItems());\n        if (!items) return;\n\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\n        items.splice(idx, 1);\n        // we need to clear the items when one is deleted or it won't actually be deleted\n        await this.clearEmbeddedItems();\n        await this.setEmbeddedItems(items);\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    async openPdfSource() {\n        // Check for PDFoundry module hook: https://github.com/Djphoenix719/PDFoundry\n        if (!ui['PDFoundry']) {\n            ui.notifications?.warn(game.i18n.localize('SR5.DIALOG.MissingModuleContent'));\n            return;\n        }\n\n        const source = this.getBookSource();\n        if (source === '') {\n            // @ts-ignore\n            ui.notifications?.error(game.i18n.localize('SR5.SourceFieldEmptyError'));\n        }\n        // TODO open PDF to correct location\n        // parse however you need, all \"buttons\" will lead to this function\n        const [code, page] = source.split(' ');\n\n        //@ts-ignore\n        ui.PDFoundry.openPDFByCode(code, { page: parseInt(page) });\n    }\n\n    _canDealDamage(): boolean {\n        // NOTE: Double negation to force boolean comparison casting.\n        const action = this.getAction();\n        if (!action) return false;\n        return !!action.damage.type.base;\n    }\n\n    getAction(): ActionRollData|undefined {\n        return this.wrapper.getAction();\n    }\n\n    getExtended(): boolean {\n        const action = this.getAction();\n        if (!action) return false;\n        return action.extended;\n    }\n\n    getTechnology(): TechnologyData|undefined {\n        return this.wrapper.getTechnology();\n    }\n\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\n        return this.wrapper.getRange();\n    }\n\n    getWeaponRange(): RangeWeaponData|undefined {\n        if (this.isRangedWeapon())\n            return this.getRange() as RangeWeaponData;\n    }\n\n    getAttackData(hits: number, actionTestData?: ActionTestData): AttackData | undefined {\n        if (!this._canDealDamage()) {\n            return;\n        }\n\n        const action = this.getAction();\n        if (!action) return;\n\n        const damage = ActionFlow.calcDamage(action.damage, this.actor);\n\n        const data: AttackData = {\n            hits,\n            damage,\n        };\n\n        // Modify action damage by spell damage.\n        if (this.isCombatSpell() && actionTestData?.spell) {\n            const force = actionTestData.spell.force;\n            const damageParts = new PartsList(data.damage.mod);\n            const spellDamage = this.getSpellDamage(force, hits);\n\n            if (spellDamage) {\n                data.force = force;\n                data.damage.base = spellDamage.base;\n                data.damage.value = spellDamage.base + damageParts.total;\n                data.damage.ap.value = -spellDamage.ap.value + damageParts.total;\n                data.damage.ap.base = -spellDamage.ap.value;\n            }\n        }\n\n        if (this.isComplexForm() && actionTestData?.complexForm) {\n            data.level = actionTestData.complexForm.level;\n        }\n\n        if (this.isMeleeWeapon()) {\n            data.reach = this.getReach();\n            data.accuracy = this.getActionLimit();\n        }\n\n        if (this.isRangedWeapon()) {\n            data.fireMode = actionTestData?.rangedWeapon?.fireMode;\n            data.accuracy = this.getActionLimit();\n        }\n\n        const blastData = this.getBlastData(actionTestData);\n        if (blastData) data.blast = blastData;\n\n        return data;\n    }\n\n    getRollName(): string {\n        if (this.isRangedWeapon()) {\n            return game.i18n.localize('SR5.RangeWeaponAttack');\n        }\n        if (this.isMeleeWeapon()) {\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\n        }\n        if (this.isCombatSpell()) {\n            return game.i18n.localize('SR5.SpellAttack');\n        }\n        if (this.isSpell()) {\n            return game.i18n.localize('SR5.SpellCast');\n        }\n        if (this.hasRoll) {\n            return this.name\n        }\n\n        return DEFAULT_ROLL_NAME;\n    }\n\n    getLimit(): LimitField | undefined {\n        // @ts-ignore // TODO: This should use this.getAction(). However action.limit doesn't contain label field.\n        const limit = duplicate(this.data.data.action?.limit);\n        if (!limit) return undefined;\n        // go through and set the label correctly\n        if (this.data.type === 'weapon') {\n            limit.label = 'SR5.Accuracy';\n        } else if (limit?.attribute) {\n            limit.label = SR5.limits[limit.attribute];\n        } else if (this.isSpell()) {\n            limit.value = this.getLastSpellForce().value;\n            limit.label = 'SR5.Force';\n        } else if (this.isComplexForm()) {\n            limit.value = this.getLastComplexFormLevel().value;\n            limit.label = 'SR5.Level';\n        } else {\n            limit.label = 'SR5.Limit';\n        }\n\n        // adjust limit value for actor data\n        if (limit.attribute) {\n            const att = this.actor.findLimit(limit.attribute);\n            if (att) {\n                limit.mod = PartsList.AddUniquePart(limit.mod, att.label, att.value);\n                Helpers.calcTotal(limit);\n            }\n        }\n\n        return limit;\n    }\n\n    /**\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\n     * @param scope\n     * @param key\n     * @param value\n     */\n    setFlag(scope: string, key: string, value: any){\n        const newValue = Helpers.onSetFlag(value);\n        return super.setFlag(scope, key, newValue);\n    }\n\n    /**\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\n     * @param scope\n     * @param key\n     */\n    getFlag(scope: string, key: string): any {\n        const data = super.getFlag(scope, key);\n        return Helpers.onGetFlag(data);\n    }\n\n    /**\n     * Passthrough functions\n     */\n    isAreaOfEffect(): boolean {\n        return this.wrapper.isAreaOfEffect();\n    }\n\n    isArmor(): boolean {\n        return this.wrapper.isArmor();\n    }\n\n    asArmorData(): ArmorItemData | undefined {\n        if (this.isArmor()) {\n            return this.data as ArmorItemData;\n        }\n    }\n\n    hasArmorBase(): boolean {\n        return this.wrapper.hasArmorBase();\n    }\n\n    hasArmorAccessory(): boolean {\n        return this.wrapper.hasArmorAccessory();\n    }\n\n    hasArmor(): boolean {\n        return this.wrapper.hasArmor();\n    }\n\n    isGrenade(): boolean {\n        return this.wrapper.isGrenade();\n    }\n\n    isWeapon(): boolean {\n        return this.wrapper.isWeapon();\n    }\n\n    asWeaponData(): WeaponItemData | undefined {\n        if (this.wrapper.isWeapon()) {\n            return this.data as WeaponItemData;\n        }\n    }\n\n    isCyberware(): boolean {\n        return this.wrapper.isCyberware();\n    }\n\n    asCyberwareData(): CyberwareItemData | undefined {\n        if (this.isCyberware()) {\n            return this.data as CyberwareItemData;\n        }\n    }\n\n    isCombatSpell(): boolean {\n        return this.wrapper.isCombatSpell();\n    }\n\n    isDirectCombatSpell(): boolean {\n        return this.wrapper.isDirectCombatSpell();\n    }\n\n    isIndirectCombatSpell(): boolean {\n        return this.wrapper.isIndirectCombatSpell();\n    }\n\n    isManaSpell(): boolean {\n        return this.wrapper.isManaSpell();\n    }\n\n    isPhysicalSpell(): boolean {\n        return this.wrapper.isPhysicalSpell();\n    }\n\n    isRangedWeapon(): boolean {\n        return this.wrapper.isRangedWeapon();\n    }\n\n    isSpell(): boolean {\n        return this.wrapper.isSpell();\n    }\n\n    asSpellData(): SpellItemData | undefined {\n        if (this.isSpell()) {\n            return this.data as SpellItemData;\n        }\n    }\n\n    isSpritePower(): boolean {\n        return this.wrapper.isSpritePower();\n    }\n\n    asSpritePowerData(): SpritePowerItemData | undefined {\n        if (this.isSpritePower()) {\n            return this.data as SpritePowerItemData;\n        }\n    }\n\n    isBioware(): boolean {\n        return this.wrapper.isBioware();\n    }\n\n    isComplexForm(): boolean {\n        return this.wrapper.isComplexForm();\n    }\n\n    asComplexFormData(): ComplexFormItemData | undefined {\n        if (this.isComplexForm()) {\n            return this.data as ComplexFormItemData;\n        }\n    }\n\n    isContact(): boolean {\n        return this.wrapper.isContact();\n    }\n\n    asContactData(): ContactItemData | undefined {\n        if (this.isContact()) {\n            return this.data as ContactItemData;\n        }\n    }\n\n    isCritterPower(): boolean {\n        return this.wrapper.isCritterPower();\n    }\n\n    asCritterPowerData(): CritterPowerItemData | undefined {\n        if (this.isCritterPower()) {\n            return this.data as CritterPowerItemData;\n        }\n    }\n\n    isMeleeWeapon(): boolean {\n        return this.wrapper.isMeleeWeapon();\n    }\n\n    isDevice(): boolean {\n        return this.wrapper.isDevice();\n    }\n\n    asDeviceData(): DeviceItemData | undefined {\n        if (this.isDevice()) {\n            return this.data as DeviceItemData;\n        }\n    }\n\n    isEquipment(): boolean {\n        return this.wrapper.isEquipment();\n    }\n\n    asEquipmentData(): EquipmentItemData | undefined {\n        if (this.isEquipment()) {\n            return this.data as EquipmentItemData;\n        }\n    }\n\n    isEquipped(): boolean {\n        return this.wrapper.isEquipped();\n    }\n\n    isCyberdeck(): boolean {\n        return this.wrapper.isCyberdeck();\n    }\n\n    getBookSource(): string {\n        return this.wrapper.getBookSource();\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.wrapper.getConditionMonitor();\n    }\n\n    getRating(): number {\n        return this.wrapper.getRating();\n    }\n\n    getArmorValue(): number {\n        return this.wrapper.getArmorValue();\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        return this.wrapper.getArmorElements();\n    }\n\n    getEssenceLoss(): number {\n        return this.wrapper.getEssenceLoss();\n    }\n\n    getASDF() {\n        return this.wrapper.getASDF();\n    }\n\n    getActionSkill(): string | undefined {\n        return this.wrapper.getActionSkill();\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.wrapper.getActionAttribute();\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.wrapper.getActionAttribute2();\n    }\n\n    getActionLimit(): number | undefined {\n        let limit = this.wrapper.getActionLimit();\n        // get the limit modifiers from the actor if we have them\n        const action = this.wrapper.getAction();\n        if (action?.limit.attribute && limit && this.actor) {\n            const { attribute } = action.limit;\n            const att = this.actor.findAttribute(attribute);\n            if (att) {\n                limit += att.value;\n            }\n        }\n        return limit;\n    }\n\n    getModifierList(): ModList<number> {\n        return this.wrapper.getModifierList();\n    }\n\n    getActionSpecialization(): string | undefined {\n        return this.wrapper.getActionSpecialization();\n    }\n\n    getDrain(): number {\n        return this.wrapper.getDrain();\n    }\n\n    getFade(): number {\n        return this.wrapper.getFade();\n    }\n\n    getRecoilCompensation(includeActor: boolean = true): number {\n        let rc = this.wrapper.getRecoilCompensation();\n        if (includeActor && this.actor) {\n            rc += this.actor.getRecoilCompensation();\n        }\n        return rc;\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon()) {\n            const data = this.data.data as WeaponData;\n            return data.melee.reach ?? 0;\n        }\n        return 0;\n    }\n\n    getCondition(): ConditionData|undefined {\n        const technology = this.getTechnology();\n        if (technology && \"condition_monitor\" in technology)\n            return technology.condition_monitor;\n    }\n\n    hasDefenseTest(): boolean {\n        if (!this.hasOpposedRoll) return false;\n        const action = this.getAction();\n        if (!action) return false;\n        return action.opposed.type === 'defense';\n    }\n\n    /** Use this method to get the base damage of spell, before any opposing action\n     *\n     * NOTE: This will NOT give you modified damage for direct combat spells\n     */\n    getSpellDamage(force: number, hits: number): DamageData|undefined {\n        if (!this.isCombatSpell()) return;\n\n        const action = this.getAction();\n        if (!action) return;\n\n        if (this.isDirectCombatSpell()) {\n            const damage = hits;\n\n            return Helpers.createDamageData(damage, action.damage.type.value, 0, '', this);\n        } else if (this.isIndirectCombatSpell()) {\n            const damage = force;\n            const ap = -force;\n\n            return Helpers.createDamageData(damage, action.damage.type.value, -ap, '', this);\n        }\n    }\n\n    // TODO: Move into a rule section.\n    async rollDefense(target: SR5Actor, options: DefenseRollOptions): Promise<ShadowrunRoll | undefined> {\n        if (!target) {\n            console.error(\"The targeted actor couldn't be fetched.\");\n            return;\n        }\n        // TODO: Maybe move into defense methods and give the actor access to the item.\n        const opposedParts = this.getOpposedTestMod();\n\n        if (this.isWeapon()) {\n            options.cover = true;\n            if (options.attack?.fireMode?.defense) {\n                options.fireModeDefense = +options.attack.fireMode.defense;\n            }\n\n            return await target.rollAttackDefense(options, opposedParts.list);\n        }\n\n        if (this.isDirectCombatSpell()) {\n            return await target.rollDirectSpellDefense(this, options as SpellDefenseOptions);\n        }\n\n        if (this.isIndirectCombatSpell()) {\n            return await target.rollIndirectSpellDefense(this, options as SpellDefenseOptions);\n        }\n    }\n\n    /** Should environmental modifiers apply an action by this item?\n     */\n    applyEnvironmentalModifiers(): boolean {\n        if (this.isRangedWeapon()) return true;\n        if (this.isMeleeWeapon()) return true;\n        if (this.isIndirectCombatSpell()) return true;\n\n        return false;\n    }\n\n    get _isEmbeddedItem(): boolean {\n        // @ts-ignore // TODO: foundry-vtt-types 0.8 Document hasn't be implemented yet\n        return this.hasOwnProperty('parent') && this.parent instanceof SR5Item;\n    }\n\n    /**\n     * Hook into the Item.update process for embedded items.\n     *\n     * @param data changes made to the SR5ItemData\n     */\n    async updateEmbeddedItem(data): Promise<this> {\n        // Inform the parent item about changes to one of it's embedded items.\n        // TODO: updateOwnedItem needs the id of the update item. hand the item itself over, to the hack within updateOwnedItem for this.\n        data._id = this.id;\n        // @ts-ignore // TODO: foundry-vtt-types 0.8 Document hasn't be implemented yet\n        await this.parent.updateOwnedItem(data)\n\n        // After updating all item embedded data, rerender the sheet to trigger the whole rerender workflow.\n        // Otherwise changes in the template of an hiddenItem will show for some fields, while not rerendering all\n        // #if statements (hidden fields for other values, won't show)\n        await this.sheet.render(false);\n\n        return this;\n    }\n\n    async update(data, options?): Promise<this> {\n        // Item.item => Embedded item into another item!\n        if (this._isEmbeddedItem) {\n            return this.updateEmbeddedItem(data);\n        }\n\n        // Actor.item => Directly owned item by an actor!\n        // @ts-ignore\n        return await super.update(data, options);\n    }\n}\n","import { Helpers } from '../helpers';\nimport { SR5Item } from './SR5Item';\nimport {SR5} from \"../config\";\n\n/**\n * Extend the basic ItemSheet with some very simple modifications\n */\n// TODO: Check foundry-vtt-types systems for how to do typing...\nexport class SR5ItemSheet extends ItemSheet<any, any> {\n    private _shownDesc: any[] = [];\n    private _scroll: string;\n\n    getEmbeddedItems() {\n        return this.item.items || [];\n    }\n\n    /**\n     * Extend and override the default options used by the Simple Item Sheet\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n        // @ts-ignore // mergeObject breaks TypeScript typing. Should be fine.\n        return mergeObject(super.defaultOptions, {\n            classes: ['sr5', 'sheet', 'item'],\n            width: 650,\n            height: 450,\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\n        });\n    }\n\n    get template() {\n        const path = 'systems/shadowrun5e/dist/templates/item/';\n        return `${path}${this.item.data.type}.html`;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Prepare data for rendering the Item sheet\n     * The prepared data object contains both the actor data as well as additional sheet options\n     */\n    async getData() {\n        const data = await super.getData();\n        // Foundry 0.8 will return data as an sheet data while Foundry 0.7 will return data as an item data.\n        // Therefore data is nested one deeper. The alternative would be to rework all references with one more data...\n        data.data = data.data.data;\n        const itemData = data.data;\n\n        if (itemData.action) {\n            try {\n                const { action } = itemData;\n                if (action.mod === 0) delete action.mod;\n                if (action.limit === 0) delete action.limit;\n                if (action.damage) {\n                    if (action.damage.mod === 0) delete action.damage.mod;\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\n                }\n                if (action.limit) {\n                    if (action.limit.mod === 0) delete action.limit.mod;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n\n        if (itemData.technology) {\n            try {\n                const tech = itemData.technology;\n                if (tech.rating === 0) delete tech.rating;\n                if (tech.quantity === 0) delete tech.quantity;\n                if (tech.cost === 0) delete tech.cost;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        data['config'] = SR5;\n        const items = this.getEmbeddedItems();\n        const [ammunition, weaponMods, armorMods] = items.reduce(\n            (parts: [Item.Data[], Item.Data[], Item.Data[]], item: SR5Item) => {\n                if (item.type === 'ammo') parts[0].push(item.data);\n                if (item.type === 'modification' && \"type\" in item.data.data && item.data.data.type === 'weapon') parts[1].push(item.data);\n                if (item.type === 'modification' && \"type\" in item.data.data && item.data.data.type === 'armor') parts[2].push(item.data);\n                return parts;\n            },\n            [[], [], []],\n        );\n        data['ammunition'] = ammunition;\n        data['weaponMods'] = weaponMods;\n        data['armorMods'] = armorMods;\n        data['activeSkills'] = this._getSortedActiveSkillsForSelect();\n        data['attributes'] = this._getSortedAttributesForSelect();\n        data['limits'] = this._getSortedLimitsForSelect();\n\n        return data;\n    }\n\n    /**\n     * Action limits currently contain limits for all action types. Be it matrix, magic or physical.\n     */\n    _getSortedLimitsForSelect(): Record<string, string> {\n        return Helpers.sortConfigValuesByTranslation(SR5.limits);\n    }\n\n    /**\n     * Sorted (by translation) actor attributes.\n     */\n    _getSortedAttributesForSelect(): Record<string, string> {\n        return Helpers.sortConfigValuesByTranslation(SR5.attributes);\n    }\n\n    /**\n     * Sorted (by translation) active skills either from the owning actor or general configuration.\n     */\n    _getSortedActiveSkillsForSelect() {\n        // We need the actor owner, instead of the item owner. See actorOwner jsdoc for details.\n        const actor = this.item.actorOwner;\n        if (!actor) return Helpers.sortConfigValuesByTranslation(SR5.activeSkills);\n\n        const activeSkills = Helpers.sortSkills(actor.getActiveSkills());\n\n        const activeSkillsForSelect = {};\n        for (const [id, skill] of Object.entries(activeSkills)) {\n            // Legacy skills have no name, but their name is their id!\n            // Custom skills have a name and their id is random.\n            const key = skill.name || id;\n            const label = skill.label || skill.name;\n            activeSkillsForSelect[key] = label;\n        }\n\n        return activeSkillsForSelect;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Activate event listeners using the prepared sheet HTML\n     * @param html -  The prepared HTML object ready to be rendered into the DOM\n     */\n    activateListeners(html) {\n        super.activateListeners(html);\n        if (this.item.type === 'weapon') {\n            //@ts-ignore // TODO: Somehow Jquery doesn't have drag/drop in typing\n            this.form.ondragover = (event) => this._onDragOver(event);\n            //@ts-ignore // TODO: Somehow Jquery doesn't have drag/drop in typing\n            this.form.ondrop = (event) => this._onDrop(event);\n        }\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\n\n        html.find('.edit-item').click(this._onEditItem.bind(this));\n\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\n\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\n\n        html.find('.open-source-pdf').on('click', this._onOpenSourcePdf.bind(this));\n\n        html.find('.has-desc').click((event) => {\n            event.preventDefault();\n            const item = $(event.currentTarget).parents('.list-item');\n            const iid = $(item).data().item;\n            const field = item.next();\n            field.toggle();\n            if (iid) {\n                if (field.is(':visible')) this._shownDesc.push(iid);\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n            }\n        });\n\n        html.find('.hidden').hide();\n    }\n\n    _onDragOver(event) {\n        event.preventDefault();\n        return false;\n    }\n\n    async _onDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        let data;\n        try {\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\n            if (data.type !== 'Item') {\n                console.log('Shadowrun5e | Can only drop Items');\n            }\n        } catch (err) {\n            console.log('Shadowrun5e | drop error');\n        }\n        let item;\n        // Case 1 - Data explicitly provided\n        if (data.data) {\n            // TODO test\n            if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\n                console.log('Shadowrun5e | Cant drop item on itself');\n                // @ts-ignore\n                ui.notifications?.error('Are you trying to break the game??');\n            }\n            item = data;\n        } else if (data.pack) {\n            console.log(data);\n            // Case 2 - From a Compendium Pack\n            // TODO test\n            item = await this._getItemFromCollection(data.pack, data.id);\n        } else {\n            // Case 3 - From a World Entity\n            item = game.items?.get(data.id);\n        }\n\n        this.item.createOwnedItem(item.data);\n    }\n\n    _getItemFromCollection(collection, itemId) {\n        const pack = game.packs?.find((p) => p.collection === collection);\n        if (!pack) return;\n        return pack.getEntity(itemId);\n    }\n\n    _eventId(event) {\n        event.preventDefault();\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    async _onOpenSourcePdf(event) {\n        event.preventDefault();\n        await this.item.openPdfSource();\n    }\n\n    async _onEditItem(event) {\n        const item = this.item.getOwnedItem(this._eventId(event));\n        if (item) {\n            item.sheet.render(true);\n        }\n    }\n\n    async _onAddLicense(event) {\n        event.preventDefault();\n        await this.item.addNewLicense();\n    }\n\n    async _onRemoveLicense(event) {\n        event.preventDefault();\n        const index = event.currentTarget.dataset.index;\n        if (index >= 0) await this.item.removeLicense(index);\n    }\n\n    async _onWeaponModRemove(event) {\n        await this._onOwnedItemRemove(event);\n    }\n\n    async _onWeaponModEquip(event) {\n        await this.item.equipWeaponMod(this._eventId(event));\n    }\n\n    async _onAddWeaponMod(event) {\n        event.preventDefault();\n        const type = 'modification';\n        // TODO: Move this into DefaultValues...\n        const itemData = {\n            name: `New ${Helpers.label(type)}`,\n            type: type,\n            data: duplicate(game.system.model.Item.modification),\n        };\n        // @ts-ignore\n        itemData.data.type = 'weapon';\n        // @ts-ignore\n        const item = Item.createOwned(itemData, this.item);\n        await this.item.createOwnedItem(item.data);\n    }\n\n    async _onAmmoReload(event) {\n        event.preventDefault();\n        await this.item.reloadAmmo();\n    }\n\n    async _onAmmoRemove(event) {\n        await this._onOwnedItemRemove(event);\n    }\n\n    async _onAmmoEquip(event) {\n        await this.item.equipAmmo(this._eventId(event));\n    }\n\n    async _onAddNewAmmo(event) {\n        event.preventDefault();\n        const type = 'ammo';\n        const itemData = {\n            name: `New ${Helpers.label(type)}`,\n            type: type,\n            data: duplicate(game.system.model.Item.ammo),\n        };\n        // @ts-ignore\n        const item = Item.createOwned(itemData, this.item);\n        await this.item.createOwnedItem(item.data);\n    }\n\n    async _onOwnedItemRemove(event) {\n         event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.item.deleteOwnedItem(this._eventId(event));\n    }\n\n    /**\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    /** This is needed to circumvent Application.close setting closed state early, due to it's async animation\n     * - The length of the closing animation can't be longer then any await time in the closing cycle\n     * - FormApplication._onSubmit will otherwise set ._state to RENDERED even if the Application window has closed already\n     * - Subsequent render calls then will show the window again, due to it's state\n     *\n     * @private\n     */\n    private fixStaleRenderedState() {\n        if (this._state === Application.RENDER_STATES.RENDERED && ui.windows[this.appId] === undefined) {\n            // @ts-ignore // TODO: 0.8 foundry-vtt-types doesn't know of DocumentSheet.document yet.\n            console.warn(`SR5ItemSheet app for ${this.document.name} is set as RENDERED but has no window registered. Fixing app internal render state. This is a known bug.`);\n            // Hotfixing instead of this.close() since FormApplication.close() expects form elements, which don't exist anymore.\n            this._state = Application.RENDER_STATES.CLOSED;\n        }\n    }\n\n    /**\n     * @private\n     */\n    async _render(force = false, options = {}) {\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\n        // this.fixStaleRenderedState();\n\n        this._saveScrollPositions();\n        await super._render(force, options);\n        this._restoreScrollPositions();\n    }\n\n    /**\n     * @private\n     */\n    _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n}\n","/**\n * Handle all things related to the action template (template.json)\n */\nimport {SR5Actor} from \"../../actor/SR5Actor\";\nimport DamageData = Shadowrun.DamageData;\nimport {Helpers} from \"../../helpers\";\nimport FormulaOperator = Shadowrun.FormulaOperator;\n\nexport class ActionFlow {\n    static calcDamage(damage: DamageData, actor: SR5Actor): DamageData {\n        // Avoid manipulation on original data, which might come from database values.\n        damage = duplicate(damage) as DamageData;\n\n        const attribute = actor.findAttribute(damage.attribute);\n\n        if (!attribute) return damage;\n\n        damage.base = ActionFlow._applyFormulaOperatorToValues(damage.base, attribute.value, damage.base_formula_operator);\n\n        // Rather reduce damage to the next full decimal.\n        damage.base = Helpers.applyValueRange(Math.floor(damage.base), {min: 0});\n        damage.value = damage.base;\n\n        return damage;\n    }\n\n    /** Calculate the result of operating on two values with basic formula operators.\n     *\n     * @param base The basic value operated opon.\n     * @param value The value doing the operation with. If order is important, this value will be after the operator.\n     * @param operator A formula operator (basic) to be used within a simple calculation.\n     */\n    static _applyFormulaOperatorToValues(base: number, value: number, operator:FormulaOperator): number {\n        switch (operator) {\n            case \"add\":\n                return base + value;\n            case \"subtract\":\n                return base - value;\n            case \"multiply\":\n                return base * value;\n            case \"divide\":\n                return base / value;\n            default:\n                console.error(`Unsupported base damage formula operator: '${operator}' used. Falling back to 'add'.`);\n                return base + value;\n        }\n    }\n}","/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {Object} item     The item data\n * @param {number} slot     The hotbar slot to use\n * @returns {Promise}\n */\nimport {Helpers} from \"./helpers\";\nimport SkillField = Shadowrun.SkillField;\nimport {SR5Actor} from \"./actor/SR5Actor\";\n\nexport async function createItemMacro(item, slot) {\n    if (!game || !game.macros) return;\n\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\n    // @ts-ignore // TODO: foundry-vtt-types 0.8 Does not support DocumentCollection yet.\n    let macro = game.macros.contents.find((m) => m.name === item.name);\n    if (!macro) {\n        macro = (await Macro.create(\n            {\n                name: item.name,\n                type: 'script',\n                img: item.img,\n                command: command,\n                flags: { 'shadowrun5e.itemMacro': true },\n            },\n            { displaySheet: false },\n        )) as Macro;\n    }\n\n    if (macro) game.user?.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {string} itemName\n * @return {Promise}\n */\nexport function rollItemMacro(itemName) {\n    if (!game || !game.actors) return;\n\n    const speaker = ChatMessage.getSpeaker();\n    let actor;\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\n    if (!speaker.actor) return;\n    if (!actor) actor = game.actors.get(speaker.actor);\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\n    if (!item) {\n        return ui.notifications?.warn(`Your controlled Actor does not have an item named ${itemName}`);\n    }\n\n    return item.castAction();\n}\n\n/**\n * Create a macro from an skill drop.\n *\n * @param data A data object for skill macros.\n * @param slot The hotbar slot to use.\n */\nexport async function createSkillMacro(data: {skillId: string, skill: SkillField}, slot) {\n    if (!game || !game.macros) return;\n\n    const {skillId, skill} = data;\n\n    // Abort when skill macro already exists. This is done for consistency with createItemMacro behavior.\n    const name = Helpers.getSkillLabelOrName(skill);\n    // @ts-ignore\n    const existingMacro = game.macros.contents.find(macro => macro.name === name);\n    if (existingMacro) return;\n\n    // Setup macro data.\n    const command = `game.shadowrun5e.rollSkillMacro(\"${name}\");`;\n    const macro = await Macro.create({\n        name,\n        type: 'script',\n        command,\n        // TODO: Is flags needed here? See createItemMacro\n    });\n    if (macro) await game.user.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Roll a skill test from a macro for an Actor.\n *\n * @param skillLabel Custom skill names must be supported and legacy skill names might be translated.\n */\nexport async function rollSkillMacro(skillLabel) {\n    if (!game || !game.actors) return;\n    if (!skillLabel) return;\n\n    // Fetch the actor from the current users token or the actor collection.\n    const speaker = ChatMessage.getSpeaker();\n    const actor =  (game.actors.tokens[speaker.token] || game.actors.get(speaker.actor)) as SR5Actor\n\n    if (!actor) return;\n\n    const skill = actor.getSkill(skillLabel, {byLabel: true});\n\n    if (!skill) return ui.notifications.warn(game.i18n.localize('SR5.Warnings.MissingSkillOnActor'))\n\n    await actor.rollSkill(skill);\n}","import { HandlebarManager } from './handlebars/HandlebarManager';\nimport {HooksManager} from \"./hooks\";\n\n/* -------------------------------------------- */\n/*  Foundry VTT Initialization                  */\n/* -------------------------------------------- */\n\n\nHooksManager.registerHooks();\nHandlebarManager.registerHelpers();","import { VersionMigration } from './VersionMigration';\nimport { LegacyMigration } from './versions/LegacyMigration';\nimport { Version0_6_5 } from './versions/Version0_6_5';\nimport { Version0_6_10 } from './versions/Version0_6_10';\nimport {Version0_7_2} from \"./versions/Version0_7_2\";\n\ntype VersionDefinition = {\n    versionNumber: string;\n    migration: VersionMigration;\n};\nexport class Migrator {\n    // Map of all version migrations to their target version numbers.\n    private static readonly s_Versions: VersionDefinition[] = [\n        { versionNumber: LegacyMigration.TargetVersion, migration: new LegacyMigration() },\n        { versionNumber: Version0_6_5.TargetVersion, migration: new Version0_6_5() },\n        { versionNumber: Version0_6_10.TargetVersion, migration: new Version0_6_10() },\n        { versionNumber: Version0_7_2.TargetVersion, migration: new Version0_7_2() },\n    ];\n\n    //TODO: Call on Init()\n    public static async BeginMigration() {\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION) as string;\n        if (currentVersion === undefined || currentVersion === null) {\n            currentVersion = VersionMigration.NO_VERSION;\n        }\n\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\n            return this.compareVersion(versionNumber, currentVersion) === 1;\n        });\n\n        // No migrations are required, exit.\n        if (migrations.length === 0) {\n            return;\n        }\n\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\n\n        const d = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\n                `<p>${localizedWarningDescription}</p>` +\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\n            buttons: {\n                ok: {\n                    label: localizedWarningBegin,\n                    callback: () => this.migrate(migrations),\n                },\n            },\n            default: 'ok',\n        });\n        d.render(true);\n    }\n\n    private static async migrate(migrations: VersionDefinition[]) {\n        // we want to apply migrations in ascending order until we're up to the latest\n        migrations.sort((a, b) => {\n            return this.compareVersion(a.versionNumber, b.versionNumber);\n        });\n\n        await this.migrateWorld(game, migrations);\n        await this.migrateCompendium(game, migrations);\n\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\n        const packsDialog = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\n                `<p>${localizedSuccessDescription}</p>` +\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: localizedSuccessConfirm,\n                },\n            },\n            default: 'ok',\n        });\n        packsDialog.render(true);\n    }\n\n    /**\n     * Migrate all world objects\n     * @param game\n     * @param migrations\n     */\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\n        // Run the migrations in order\n        for (const { migration } of migrations) {\n            await migration.Migrate(game);\n        }\n    }\n\n    /**\n     * Iterate over all world compendium packs\n     * @param game Game that will be migrated\n     * @param migrations Instances of the version migration\n     */\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\n        // Migrate World Compendium Packs\n        // @ts-ignore // TODO: TYPE: Possibly undefined\n        const packs = game.packs?.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.entity));\n\n        if (!packs) return;\n\n        // Run the migrations in order on each pack.\n        for (const pack of packs) {\n            for (const { migration } of migrations) {\n                await migration.MigrateCompendiumPack(pack);\n            }\n        }\n    }\n\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\n    // updated for typescript\n    /**\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\n     * @param v1\n     * @param v2\n     */\n    public static compareVersion(v1: string, v2: string) {\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\n        const k = Math.min(v1.length, v2.length);\n        for (let i = 0; i < k; ++i) {\n            if (s1[i] > s2[i]) return 1;\n            if (s1[i] < s2[i]) return -1;\n        }\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\n    }\n}\n","import { SR5Actor } from '../actor/SR5Actor';\n\n/**\n * Converts a game's data model from source version to a target version.\n * Extending classes are only required to handle items, actors, and scenes,\n *  other methods are implementable purely for convenience and atomicity.\n */\nexport abstract class VersionMigration {\n    static readonly MODULE_NAME = 'shadowrun5e';\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\n    static readonly NO_VERSION = '0';\n\n    private m_Abort: boolean = false;\n    private m_AbortReason: string;\n\n    /**\n     * The allowed version this migrator should be able to operate on.\n     */\n    public abstract get SourceVersion(): string;\n    /**\n     * The resulting version this migrator will produce.\n     */\n    public abstract get TargetVersion(): string;\n\n    public get SourceVersionFriendlyName(): string {\n        return `v${this.SourceVersion}`;\n    }\n    public get TargetVersionFriendlyName(): string {\n        return `v${this.TargetVersion}`;\n    }\n\n    /**\n     * Flag the migration to be aborted.\n     * @param reason The reason that the migration must be aborted, to be displayed\n     *  to the user and returned from the migration call.\n     */\n    protected abort(reason: string): void {\n        this.m_Abort = true;\n        this.m_AbortReason = reason;\n        ui.notifications.error(`Data migration has been aborted: ${reason}`, { permanent: true });\n    }\n\n    /**\n     * Begin migration for the specified game.\n     * @param game The world that should be migrated.\n     */\n    public async Migrate(game: Game) {\n        ui.notifications.info(`${game.i18n.localize('SR5.MIGRATION.BeginNotification')} ${this.SourceVersionFriendlyName} -> ${this.TargetVersionFriendlyName}.`);\n        ui.notifications.warn(game.i18n.localize('SR5.MIGRATION.DoNotCloseNotification'), {\n            permanent: true,\n        });\n\n        // Map of entities to update, store until later to reduce chance of partial updates\n        // which may result in impossible game states.\n        const entityUpdates: Map<Entity, EntityUpdate> = new Map<Entity, EntityUpdate>();\n\n        // Migrate World Items\n        await this.PreMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateItems(game, entityUpdates);\n        await this.PostMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate World Actors\n        await this.PreMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateActors(game, entityUpdates);\n        await this.PostMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate Actor Tokens\n        await this.PreMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateScenes(game, entityUpdates);\n        await this.PostMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Apply the updates, this should *always* work, now that parsing is complete.\n        await this.Apply(entityUpdates);\n\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\n        ui.notifications.info(`${game.i18n.localize('SR5.MIGRATION.SuccessNotification')} ${this.TargetVersion}.`, { permanent: true });\n    }\n\n    /**\n     * Applies the specified mapping of entities, iteratively updating each.\n     * @param entityUpdates A mapping of document updateData pairs.\n     */\n    protected async Apply(entityUpdates: Map<Entity, EntityUpdate>) {\n        for (const [entity, { updateData, embeddedItems }] of entityUpdates) {\n            if (embeddedItems !== null) {\n                const actor = entity as SR5Actor;\n                await actor.updateOwnedItem(embeddedItems);\n            }\n            await entity.update(updateData, { enforceTypes: false });\n        }\n    }\n\n    /**\n     * Iterate through all scenes and migrate each if needed.\n     * @param game\n     * @param entityUpdates\n     */\n    protected async IterateScenes(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        // @ts-ignore // TODO: foundry-vtt-types 0.8 Does not support DocumentCollection yet.\n        for (const scene of game.scenes.contents) {\n            try {\n                if (!(await this.ShouldMigrateSceneData(scene))) {\n                    continue;\n                }\n\n                if (scene.id === 'MAwSFhlXRipixOWw') {\n                    console.log('Scene Pre-Update');\n                    console.log(scene);\n                }\n\n                console.log(`Migrating Scene entity ${scene.name}`);\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\n\n                let hasTokenUpdates = false;\n                updateData.tokens = await Promise.all(\n                    // @ts-ignore\n                    scene.data.tokens.map(async (token) => {\n                        if (isObjectEmpty(token.actorData)) {\n                            return token;\n                        }\n\n                        // @ts-ignore\n                        let tokenDataUpdate = await this.MigrateActorData(token.actorData);\n                        if (!isObjectEmpty(tokenDataUpdate)) {\n                            hasTokenUpdates = true;\n                            tokenDataUpdate['_id'] = token.id;\n\n                            const newToken = duplicate(token);\n                            newToken.actorData = await mergeObject(token.actorData, tokenDataUpdate, {\n                                enforceTypes: false,\n                                inplace: false,\n                            });\n                            console.log(newToken);\n                            return newToken;\n                        } else {\n                            return token;\n                        }\n                    }),\n                );\n                if (scene.id === 'MAwSFhlXRipixOWw') {\n                    console.log('Scene Pre-Update');\n                    console.log(scene);\n                }\n\n                if (isObjectEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(scene, {\n                    updateData,\n                    embeddedItems: null,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all items and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async IterateItems(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        //@ts-ignore // TODO: foundry-vtt-types 0.8 Doesn't support Documents yet\n        for (const item of game.items.contents) {\n            try {\n                if (!(await this.ShouldMigrateItemData(item.data))) {\n                    continue;\n                }\n\n                console.log(`Migrating Item: ${item.name}`);\n                const updateData = await this.MigrateItemData(item.data);\n\n                if (isObjectEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(item, {\n                    updateData,\n                    embeddedItems: null,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all actors and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async IterateActors(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        // @ts-ignore // TODO: foundry-vtt-types 0.8 Doesn't support Documents yet\n        for (const actor of game.actors.contents) {\n            try {\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\n                    continue;\n                }\n\n                console.log(`Migrating Actor ${actor.name}`);\n                console.log(actor);\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\n                console.log(updateData);\n                let items = [];\n                if (updateData.items) {\n                    items = updateData.items;\n                    delete updateData.items;\n                }\n\n                expandObject(updateData);\n\n                entityUpdates.set(actor, {\n                    updateData,\n                    embeddedItems: items,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n\n    /**\n     * Iterate over an actor's items, updating those that need updating.\n     * @param actorData The actor to iterate over\n     * @param updateData The existing update data to merge into\n     */\n    protected async IterateActorItems(actorData: Actor.Data, updateData) {\n        let hasItemUpdates = false;\n        // @ts-ignore\n        if (actorData.items !== undefined) {\n            const items = await Promise.all(\n                // @ts-ignore\n                actorData.items.map(async (itemData) => {\n                    let itemUpdate = await this.MigrateItemData(itemData);\n\n                    if (!isObjectEmpty(itemUpdate)) {\n                        hasItemUpdates = true;\n                        itemUpdate['_id'] = itemData._id;\n                        return await mergeObject(itemData, itemUpdate, {\n                            enforceTypes: false,\n                            inplace: false,\n                        });\n                    } else {\n                        return itemData;\n                    }\n                }),\n            );\n            if (hasItemUpdates) {\n                updateData.items = items;\n            }\n        }\n\n        return updateData;\n    }\n\n    /**\n     * Check if a scene requires updates.\n     * @param scene The scene to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified scene's data.\n     * @param scene The scene to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateSceneData(scene: any): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Check if an item requires updates.\n     * @param item The item to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateItemData(item: Entity.Data): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified item's data.\n     * @param item The item to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateItemData(item: Entity.Data): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Check if an actor requires updates.\n     * @param actor The actor to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateActorData(actor: Actor.Data): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified actor's data.\n     * @param actor The actor to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateActorData(actor: Actor.Data): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right after actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Migrate a compendium pack\n     * @param pack\n     */\n    public async MigrateCompendiumPack(pack: Compendium) {\n        const entity = pack.metadata.entity;\n        if (!['Actor', 'Item', 'Scene'].includes(entity)) return;\n\n        // Begin by requesting server-side data model migration and get the migrated content\n        await pack.migrate({});\n        const content = await pack.getContent();\n\n        // Iterate over compendium entries - applying fine-tuned migration functions\n        for (let ent of content) {\n            try {\n                let updateData: any = null;\n                if (entity === 'Item') {\n                    updateData = await this.MigrateItemData(ent.data);\n\n                    if (isObjectEmpty(updateData)) {\n                        continue;\n                    }\n\n                    expandObject(updateData);\n                    updateData['_id'] = ent.id;\n                    await pack.updateEntity(updateData);\n                    // TODO: Uncomment when foundry allows embeddeds to be updated in packs\n                    // } else if (document === 'Actor') {\n                    //     updateData = await this.MigrateActorData(ent.data);\n                    //\n                    //     if (isObjectEmpty(updateData)) {\n                    //         continue;\n                    //     }\n                    //\n                    //     updateData['_id'] = ent._id;\n                    //     await pack.updateEntity(updateData);\n                } else if (entity === 'Scene') {\n                    updateData = await this.MigrateSceneData(ent.data);\n\n                    if (isObjectEmpty(updateData)) {\n                        continue;\n                    }\n\n                    expandObject(updateData);\n                    updateData['_id'] = ent.id;\n                    await pack.updateEntity(updateData);\n                }\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\n    }\n}\n\ntype EntityUpdate = {\n    updateData: any;\n    embeddedItems: null | any[];\n};\n","import { VersionMigration } from '../VersionMigration';\n\n/**\n * Migrates the data model for Legacy migrations prior to 0.6.4\n */\nexport class LegacyMigration extends VersionMigration {\n    get SourceVersion(): string {\n        return '0';\n    }\n    get TargetVersion(): string {\n        return LegacyMigration.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.4';\n    }\n\n    protected async MigrateActorData(actorData: Actor.Data): Promise<any> {\n        let updateData: any = {};\n        LegacyMigration.migrateActorOverflow(actorData, updateData);\n        LegacyMigration.migrateActorSkills(actorData, updateData);\n\n        updateData = await this.IterateActorItems(actorData, updateData);\n\n        return updateData;\n    }\n\n    protected async MigrateItemData(item: Entity.Data): Promise<any> {\n        const updateData = {};\n        LegacyMigration.migrateDamageTypeAndElement(item, updateData);\n        LegacyMigration.migrateItemsAddActions(item, updateData);\n        LegacyMigration.migrateActorOverflow(item, updateData);\n        LegacyMigration.migrateItemsAddCapacity(item, updateData);\n        LegacyMigration.migrateItemsAmmo(item, updateData);\n        LegacyMigration.migrateItemsConceal(item, updateData);\n        return updateData;\n    }\n\n    protected async MigrateSceneData(scene: any): Promise<any> {\n        return {};\n    }\n\n    protected async ShouldMigrateActorData(actorData: Actor.Data): Promise<boolean> {\n        return true;\n    }\n\n    protected async ShouldMigrateItemData(item: Entity.Data): Promise<boolean> {\n        return true;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n\n    /**\n     * Migrate actor overflow from an integer to an object\n     * - it wasn't even displayed before so we know it is 0\n     * @param actorData\n     * @param updateData\n     */\n    private static migrateActorOverflow(actorData, updateData) {\n        if (getProperty(actorData.data, 'track.physical.overflow') === 0) {\n            updateData['data.track.physical.overflow.value'] = 0;\n            updateData['data.track.physical.overflow.max'] = 0;\n        }\n    }\n\n    /**\n     * Migrate actor skills specializations to be a list instead of string\n     * @param actorData\n     * @param updateData\n     */\n    private static migrateActorSkills(actorData, updateData) {\n        if (!actorData.data?.skills?.active) return;\n        const splitRegex = /[,\\/|.]+/;\n\n        const reducer = (running, [key, val]) => {\n            if (!Array.isArray(val.specs) && val.specs) {\n                running[key] = {\n                    specs: val.specs.split(splitRegex).filter((s) => s !== ''),\n                };\n            }\n            return running;\n        };\n\n        if (actorData.data.skills) {\n            updateData['data.skills.active'] = Object.entries(actorData.data.skills.active).reduce(reducer, {});\n            if (actorData.data.skills.knowledge) {\n                updateData['data.skills.knowledge.street.value'] = Object.entries(actorData.data.skills?.knowledge?.street?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.professional.value'] = Object.entries(actorData.data.skills?.knowledge?.professional?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.academic.value'] = Object.entries(actorData.data.skills?.knowledge?.academic?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.interests.value'] = Object.entries(actorData.data.skills?.knowledge?.interests?.value).reduce(reducer, {});\n            }\n            if (actorData.data.skills.language) {\n                updateData['data.skills.language.value'] = Object.entries(actorData.data.skills?.language?.value).reduce(reducer, {});\n            }\n        }\n    }\n\n    /**\n     *\n     * @param item\n     * @param updateData\n     */\n    private static migrateDamageTypeAndElement(item, updateData) {\n        // console.log('Migrating Damage and Elements');\n        if (item.data.action) {\n            const action = item.data.action;\n            if (typeof action.damage.type === 'string') {\n                updateData['data.action.damage.type.base'] = item.data.action.damage.type;\n            }\n            if (typeof action.damage.element === 'string') {\n                updateData['data.action.damage.element.base'] = item.data.action.damage.element;\n            }\n        }\n    }\n\n    /**\n     * Migrate ammo from ranged weapons only to all weapons\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAmmo(item, updateData) {\n        // console.log('Migrating Ammo');\n        if (item.type === 'weapon' && item.data.ammo === undefined) {\n            let currentAmmo = { value: 0, max: 0 };\n            if (item.data.category === 'range' && item.data.range && item.data.range.ammo) {\n                // copy over ammo count\n                const oldAmmo = item.data.range.ammo;\n                currentAmmo.value = oldAmmo.value;\n                currentAmmo.max = oldAmmo.max;\n            }\n            updateData['data.ammo'] = {\n                spare_clips: {\n                    value: 0,\n                    max: 0,\n                },\n                current: {\n                    value: currentAmmo.value,\n                    max: currentAmmo.max,\n                },\n            };\n        }\n    }\n\n    /**\n     * Migrate conceal name\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsConceal(item, updateData) {\n        if (item.data.technology?.concealability !== undefined) {\n            updateData['data.technology.conceal'] = {\n                base: item.data.technology.concealability,\n            };\n        }\n    }\n\n    /**\n     * Add capacity to items\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAddCapacity(item, updateData) {\n        if (['cyberware'].includes(item.type)) {\n            if (item.data.capacity === undefined) {\n                updateData.data.capacity = 0;\n            }\n        }\n    }\n\n    /**\n     * Add actions to needed items\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAddActions(item, updateData) {\n        if (['quality', 'cyberware'].includes(item.type)) {\n            if (item.data.action === undefined) {\n                const action = {\n                    type: '',\n                    category: '',\n                    attribute: '',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                    },\n                    extended: false,\n                    damage: {\n                        type: '',\n                        element: '',\n                        value: 0,\n                        ap: {\n                            value: 0,\n                        },\n                        attribute: '',\n                    },\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                };\n                if (!updateData.data) updateData.data = {};\n                updateData.data.action = action;\n            }\n        }\n    }\n}\n","import { VersionMigration } from '../VersionMigration';\nimport ShadowrunActorData = Shadowrun.ShadowrunActorData;\n\n/**\n * Add default value of willpower to the full_defense_attribute field\n */\nexport class Version0_6_10 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.6.9';\n    }\n    get TargetVersion(): string {\n        return Version0_6_10.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.10';\n    }\n\n    protected async MigrateActorData(actorData: ShadowrunActorData): Promise<any> {\n        if (actorData.data?.attributes?.edge === undefined) return {};\n        return {\n            data: {\n                attributes: {\n                    edge: {\n                        base: actorData.data.attributes.edge.max,\n                        value: actorData.data.attributes.edge.max,\n                        uses: actorData.data.attributes.edge.value,\n                    },\n                },\n            },\n        };\n    }\n\n    protected async ShouldMigrateActorData(actorData: ShadowrunActorData): Promise<boolean> {\n        return actorData.data.attributes.edge?.uses === undefined;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n}\n","import { VersionMigration } from '../VersionMigration';\n\n/**\n * Add default value of willpower to the full_defense_attribute field\n */\nexport class Version0_6_5 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.6.4';\n    }\n    get TargetVersion(): string {\n        return Version0_6_5.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.5';\n    }\n\n    protected async MigrateActorData(actorData: Actor.Data): Promise<any> {\n        let updateData: any = {};\n        if (updateData.data === undefined) updateData.data = {};\n        updateData.data.full_defense_attribute = 'willpower';\n        return updateData;\n    }\n\n    protected async ShouldMigrateActorData(actorData: any): Promise<boolean> {\n        return actorData.data.full_defense_attribute === undefined;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n}\n","// TODO: How to trigger test migration.\n// TODO: How to test migration results?\n\n\nimport {VersionMigration} from \"../VersionMigration\";\nimport {SR5} from \"../../config\";\nimport ShadowrunActorData = Shadowrun.ShadowrunActorData;\nimport CharacterActorData = Shadowrun.CharacterActorData;\n\n/** NPC / Grunt feature set\n * - Add npc character data.\n * - Add track disabled feature\n */\nexport class Version0_7_2 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.7.1';\n    }\n\n    get TargetVersion(): string {\n        return Version0_7_2.TargetVersion;\n    }\n\n    static get TargetVersion(): string {\n        return '0.7.2';\n    }\n\n    static NoNPCDataForCharacter(actorData: ShadowrunActorData): boolean {\n        // Use in operator since TypeScript can handle that for union types instead of property usage.\n        return actorData.type === 'character' && (\n            !(\"is_npc\" in actorData?.data) ||\n            !(\"npc\" in actorData?.data)\n        );\n    }\n\n    static UnsupportedMetatype(actorData: ShadowrunActorData): boolean {\n        // TODO: Check on CharacterData.metatype typing (see ts-ignore)\n        // @ts-ignore // TODO: TYPING metatype can never be a number... but that's breaking\n        const type = (actorData as CharacterActorData).data.metatype?.toLowerCase() ?? '';\n        return actorData.type === 'character' &&\n            SR5.character.types.hasOwnProperty(type);\n    }\n\n    protected async MigrateActorData(actorData: ShadowrunActorData): Promise<any> {\n        const updateData: {\n            data?: object,\n            attributes?: object\n        } = {};\n\n        if (Version0_7_2.UnsupportedMetatype(actorData)) {\n            // TODO: Check on CharacterData.metatype typing (see ts-ignore)\n            //@ts-ignore // in-operator doesn't work here, as the underlying typing for metatype will result in string | number | undefined\n            const type = actorData.data.metatype?.toLowerCase() ?? '';\n            // TODO: What to do with custom metatypes?\n            const metatypeData = {metatype: SR5.character.types.hasOwnProperty(type) ? type : 'human'};\n            updateData.data = {...updateData.data, ...metatypeData};\n        }\n\n        if (Version0_7_2.NoNPCDataForCharacter(actorData)) {\n            updateData.data = updateData.data ? updateData.data : {};\n            const npcData = {\n                is_npc: false,\n                npc: {\n                    is_grunt: false,\n                    professional_rating: 0\n                }\n            }\n            updateData.data = {...updateData.data, ...npcData};\n        }\n\n        return updateData;\n    }\n\n    protected async ShouldMigrateActorData(actorData: ShadowrunActorData): Promise<boolean> {\n        return Version0_7_2.UnsupportedMetatype(actorData) || Version0_7_2.NoNPCDataForCharacter(actorData);\n    }\n}","import ModList = Shadowrun.ModList;\nimport ModListEntry = Shadowrun.ModListEntry;\n\nexport class PartsList<TType> {\n    get list(): ModList<TType> {\n        return this._list.slice();\n    }\n\n    get length(): number {\n        return this._list.length;\n    }\n\n    get total(): number {\n        let total = 0;\n        for (const part of this._list) {\n            if (typeof part.value === 'number') {\n                total += part.value;\n            }\n        }\n        return total;\n    }\n\n    get isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    getPartValue(name: string): TType | undefined {\n        return this._list.find((part) => part.name === name)?.value;\n    }\n\n    clear(): void {\n        this._list.length = 0;\n    }\n\n    private _list: ModList<TType>;\n\n    constructor(parts?: ModList<TType>) {\n        let actualParts = [] as ModList<TType>;\n        if (parts) {\n            if (Array.isArray(parts)) {\n                actualParts = parts;\n            } else if (typeof parts === 'object') {\n                for (const [name, value] of Object.entries(parts)) {\n                    if (value !== null && value !== undefined) {\n                        // if it's a number, we are dealing with an array as an object\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\n                            actualParts.push({\n                                name: (value as ModListEntry<TType>).name,\n                                value: (value as ModListEntry<TType>).value,\n                            });\n                        } else {\n                            actualParts.push({\n                                name,\n                                value,\n                            } as ModListEntry<TType>);\n                        }\n                    }\n                }\n            }\n        }\n        this._list = actualParts;\n    }\n\n    addPart(name: string, value: TType): void {\n        this._list.push({\n            name,\n            value,\n        });\n    }\n\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\n        const index = this._list.findIndex((part) => part.name === name);\n        if (index > -1) {\n            // if we exist and should've overwrite, return\n            if (!overwrite) return;\n\n            this._list.splice(index, 1);\n            // if we are passed undefined, remove the value\n            if (value === undefined || value === null) return;\n            // recursively go through until we no longer have a part of this name\n            this.addUniquePart(name, value);\n        } else if (value) {\n            this.addPart(name, value);\n        }\n    }\n\n    removePart(name: string): boolean {\n        const index = this._list.findIndex((part) => part.name === name);\n        if (index > -1) {\n            this._list.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    getMessageOutput() {\n        return this.list;\n    }\n\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\n        const parts = new PartsList(list);\n        parts.addUniquePart(name, value, overwrite);\n        return parts._list;\n    }\n\n    static Total(list: ModList<number>) {\n        const parts = new PartsList(list);\n        return parts.total;\n    }\n}\n","import ModList = Shadowrun.ModList;\nimport RollEvent = Shadowrun.RollEvent;\nimport BaseValuePair = Shadowrun.BaseValuePair;\nimport LabelField = Shadowrun.LabelField;\nimport AttackData = Shadowrun.AttackData;\nimport DamageData = Shadowrun.DamageData;\nimport { Helpers } from '../helpers';\nimport { SR5Actor } from '../actor/SR5Actor';\nimport { SR5Item } from '../item/SR5Item';\nimport {\n    createRollChatMessage, createTargetChatMessage, RollTargetChatMessage,\n    TargetChatMessageOptions\n} from '../chat';\nimport {CORE_FLAGS, CORE_NAME, DEFAULT_ROLL_NAME, FLAGS, SR, SYSTEM_NAME} from '../constants';\nimport { PartsList } from '../parts/PartsList';\nimport {ActionTestData} from \"../apps/dialogs/ShadowrunItemDialog\";\nimport BlastData = Shadowrun.BlastData;\nimport FireModeData = Shadowrun.FireModeData;\nimport DrainData = Shadowrun.DrainData;\nimport {ShadowrunTestDialog} from \"../apps/dialogs/ShadowrunTestDialog\";\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport LimitField = Shadowrun.LimitField;\nimport CombatData = Shadowrun.CombatData;\n\n// item, actor, dicePool, attack, defense, spell, form\nexport type Test =  {\n    label: string;\n    type: string;\n}\n\nexport interface TestDialogData {\n    parts: PartsList<number>\n    limit: number\n    wounds: boolean\n    extended: boolean\n    rollMode: keyof typeof CONFIG.Dice.rollModes;\n}\n\ninterface RollProps {\n    parts?: ModList<number>,\n    limit?: any,\n    explodeSixes?: boolean\n}\n\n// TODO: Separate into 'roll data' and 'template data', which only passes through but isn't used.\nexport interface BasicRollProps {\n    parts?: ModList<number>;\n    limit?: LimitField;\n    explodeSixes?: boolean;\n    title?: string;\n    actor?: SR5Actor;\n    target?: Token;\n    item?: SR5Item;\n    // Personal attack\n    attack?: AttackData\n    // Incoming attack for a defense test\n    incomingAttack?: AttackData;\n    damage?: ModifiedDamageData;\n    tests?: Test[];\n    description?: object;\n    previewTemplate?: boolean;\n    hideRollMessage?: boolean;\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\n    combat?: CombatData\n}\n\n/** Provide a clear interface of which value are guaranteed to be defined.\n     */\nexport interface BasicRollPropsDefaulted extends BasicRollProps {\n    title: string\n    parts: ModList<number>\n    explodeSixes: boolean\n    hideRollMessage: boolean\n    previewTemplate: boolean\n    rollMode: keyof typeof CONFIG.Dice.rollModes\n}\n\nexport interface RollDialogOptions {\n    environmental?: number\n    pool?: boolean\n    extended?: boolean\n    limit?: boolean\n    wounds?: boolean\n}\n\nexport interface AdvancedRollProps extends BasicRollProps {\n    event?: RollEvent;\n    extended?: boolean;\n    wounds?: boolean;\n    after?: (roll: ShadowrunRoll | undefined) => void;\n    attack?: AttackData;\n    fireMode?: FireModeData\n    combat?: CombatData\n}\n\n/** Provide a clear interface of which value are guaranteed to be defined.\n     */\nexport interface AdvancedRollPropsDefaulted extends AdvancedRollProps {\n    parts: ModList<number>\n    wounds: boolean\n}\n\ntype ShadowrunRollData = {\n    limit: number\n    threshold: number\n    parts: ModList<number>\n    explodeSixes: boolean\n}\nexport class ShadowrunRoll extends Roll {\n    data: ShadowrunRollData\n    // add class Roll to the json so dice-so-nice works\n    toJSON(): any {\n        const data = super.toJSON();\n        data.class = 'Roll';\n        return data;\n    }\n\n    get sides(): number[] {\n        //@ts-ignore\n        // 0.7.x foundryVTT\n        if (this.terms) {\n            //@ts-ignore\n            return this.terms[0].results.map(result => result.result);\n        }\n\n        //@ts-ignore\n        // 0.6.x foundryVTT\n        return this.parts[0].rolls.map(roll => roll.roll);\n    }\n\n    get limit(): number {\n        return this.data.limit;\n    }\n\n    get threshold(): number {\n        return this.data.threshold;\n    }\n\n    //@ts-ignore // TODO: This overwrites Roll.parts with very different return types...\n    get parts(): ModList<number> {\n        return this.data.parts;\n    }\n\n    get explodeSixes(): boolean {\n        return this.data.explodeSixes;\n    }\n\n    count(side: number): number {\n        const results = this.sides;\n        return results.reduce((counted, result) => result === side ? counted + 1 : counted, 0);\n    }\n\n    get hits(): number {\n        return this.total || 0;\n    }\n\n    get pool(): number {\n        //@ts-ignore\n        // 0.7.x foundryVTT\n        if (this.terms) {\n            //@ts-ignore\n            return this.dice[0].number;\n        }\n\n        //@ts-ignore\n        // 0.6.x foundryVTT\n        return this.parts[0].rolls.length;\n    }\n\n    get glitched(): boolean {\n        let glitched = 0;\n        SR.die.glitch.forEach(die => glitched += this.count(die));\n        return glitched > Math.floor(this.pool / 2);\n    }\n}\n\nexport class ShadowrunRoller {\n    static async itemRoll(event, item: SR5Item, actionTestData?: ActionTestData): Promise<ShadowrunRoll | undefined> {\n        // Create common data for all item types.\n        const title = item.getRollName();\n        const actor = item.actor;\n        const attack =  item.getAttackData(0, actionTestData);\n        const parts = item.getRollPartsList();\n        const limit = item.getLimit();\n        const extended = item.getExtended();\n        const previewTemplate = item.hasTemplate;\n        const description = item.getChatData();\n        const tests = item.getOpposedTests();\n        const modifiers = await actor.getModifiers();\n\n        // Prepare the roll and dialog.\n        const advancedRollProps = {\n            hideRollMessage: true,\n            event: event,\n            actor,\n            parts,\n            limit,\n            extended,\n            tests\n        } as AdvancedRollProps;\n\n\n        // Reset dialog options to default values and set each according to item types.\n        const advancedDialogOptions = {\n            environmental: 0,\n        } as RollDialogOptions;\n        if (item.applyEnvironmentalModifiers()) {\n            advancedDialogOptions.environmental = modifiers.environmental.total;\n        }\n\n        const roll = await ShadowrunRoller.advancedRoll(advancedRollProps, advancedDialogOptions);\n\n        if (!roll) return;\n\n        if (attack) {\n            attack.hits = roll.hits;\n        }\n\n        // TODO: Separation of concerns. 'Roller' should only roll and prepare to roll.\n        //       Rules should be handled elsewhere. Attack Handler? Ranged, Melee, DirectSpell, IndirectSpell...\n        if (attack && item.isCombatSpell()) {\n            const spellAttack = item.getAttackData(roll.hits, actionTestData);\n            if (spellAttack) attack.damage = spellAttack.damage;\n        }\n\n\n        // Handle user targeting for for targeted messages and display.\n        const targets: Token[] = Helpers.getUserTargets();\n        // Allow for direct defense without token selection for ONE token targeted.\n        const target = targets.length === 1 ? targets[0] : undefined;\n\n        const rollChatOptions = {title, roll, actor, item, attack, previewTemplate, targets, target, description, tests};\n        await createRollChatMessage(rollChatOptions);\n\n        if (tests) {\n            const targetChatOptions = {actor, item, tests, roll, attack}\n            await ShadowrunRoller.targetsChatMessages(targets, targetChatOptions);\n        }\n\n        return roll;\n    }\n\n    static async resultingItemRolls(event, item: SR5Item, actionTestData? : ActionTestData) {\n        // Cast resulting tests from above Success Test depending on item type.\n        if (item.isComplexForm() && actionTestData?.complexForm) {\n            const level = actionTestData.complexForm.level;\n            const fade = item.getFade() + level;\n            const minFade = 2;\n            const totalFade = Math.max(fade, minFade);\n            await item.actor.rollFade({ event }, totalFade);\n        }\n        else if (item.isSpell()) {\n            // if (item.isCombatSpell() && roll) {\n            //     // TODO: isCombatSpell and roll does something but isn't handled.\n            // }\n            if (actionTestData?.spell) {\n                const force = actionTestData.spell.force;\n                const reckless = actionTestData.spell.reckless;\n                const drain = item.getDrain() + force + (reckless ? 3 : 0);\n                const minDrain = 2;\n                const totalDrain = Math.max(drain, minDrain);\n\n                await item.actor.rollDrain({ event }, totalDrain);\n            }\n        }\n        else if (item.isWeapon()) {\n            if (item.hasAmmo() && actionTestData?.rangedWeapon) {\n                // Try using fire mode for ammunition consumption.\n                const fireMode = actionTestData?.rangedWeapon?.fireMode?.value || 0;\n                await item.useAmmo(fireMode);\n            }\n        }\n    }\n\n    static shadowrunFormula({\n        parts: partsProps,\n        limit,\n        explode,\n    }: {\n        parts: ModList<number>;\n        limit?: BaseValuePair<number> & LabelField;\n        explode?: boolean;\n    }): string {\n        const parts = new PartsList(partsProps);\n        const count = parts.total;\n        if (count <= 0) {\n            ui.notifications?.warn(game.i18n.localize('SR5.RollOneDie'));\n            return '0d6cs>=5';\n        }\n        let formula = `${count}d6`;\n        if (explode) {\n            formula += 'x6';\n        }\n        if (limit?.value) {\n            formula += `kh${limit.value}`;\n        }\n        formula += 'cs>=5';\n        return formula;\n    }\n\n    static roll(props: RollProps): ShadowrunRoll|undefined {\n        const parts = new PartsList(props.parts);\n\n        // Prepare SR Success Test with foundry formula.\n        const formulaOptions = { parts: parts.list, limit: props.limit, explode: props.explodeSixes };\n        const formula = this.shadowrunFormula(formulaOptions);\n        if (!formula) {\n            return;\n        }\n\n        // Execute the Success Test.\n        const rollData = {parts: parts.list, limit: props.limit, explodeSixes: props.explodeSixes};\n        const roll = new ShadowrunRoll(formula, rollData);\n\n        // Return roll reference instead roll() return to avoid typing issues.\n        // @ts-ignore // TODO: foundry-vtt-types 0.8.2 is missing Roll.evaluate parameter typing.\n        roll.evaluate({async: false});\n\n        return roll;\n    }\n\n    static async basicRoll(basicProps: BasicRollProps): Promise<ShadowrunRoll | undefined> {\n        const props = ShadowrunRoller.basicRollPropsDefaults(basicProps);\n\n        const roll = ShadowrunRoller.roll({parts: props.parts, limit: props.limit, explodeSixes: props.explodeSixes});\n        if (!roll) return;\n\n        if (!props.hideRollMessage) {\n            await ShadowrunRoller.rollChatMessage(roll, props);\n        }\n\n        return roll;\n    }\n\n    /** Provide a clear interface of which value are guaranteed to be defined.\n     */\n    static basicRollPropsDefaults(props: BasicRollProps): BasicRollPropsDefaulted {\n        props.title = props.title ?? DEFAULT_ROLL_NAME;\n        props.parts = props.parts ?? [];\n        props.explodeSixes = props.explodeSixes ?? false;\n        props.hideRollMessage = props.hideRollMessage ?? false;\n        props.rollMode = props.rollMode ?? CONFIG.Dice.rollModes.roll;\n        props.previewTemplate = props.previewTemplate ?? false;\n\n        return {...props} as BasicRollPropsDefaulted;\n    }\n\n    /** Provide a clear interface of which value are guaranteed to be defined.\n     */\n    static advancedRollPropsDefaults(props: AdvancedRollProps): AdvancedRollPropsDefaulted {\n        props.parts = props.parts ?? [];\n        props.wounds = props.wounds ?? true;\n\n        return {...props} as AdvancedRollPropsDefaulted;\n    }\n\n    /**\n     * Prompt a roll for the user\n     */\n    static promptRoll(): Promise<ShadowrunRoll | undefined> {\n        const value = game.user?.getFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue) || 0;\n        const parts = [{ name: 'SR5.LastRoll', value }];\n        const advancedRollProps = { parts, title: game.i18n.localize(\"SR5.Test\")} as AdvancedRollProps;\n        const dialogOptions = { pool: true }\n        return ShadowrunRoller.advancedRoll(advancedRollProps, dialogOptions);\n    }\n\n    /**\n     * Start an advanced roll\n     * - Prompts the user for modifiers\n     */\n    static async advancedRoll(advancedProps: AdvancedRollProps, dialogOptions?: RollDialogOptions): Promise<ShadowrunRoll | undefined> {\n        // Remove after roll callback as to not move it further into other function calls.\n        const {after} = advancedProps;\n\n        const props = ShadowrunRoller.advancedRollPropsDefaults(advancedProps);\n\n        // remove limits if game settings is set\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.ApplyLimits)) {\n            delete props.limit;\n        } else {\n            ShadowrunRoller._errorOnInvalidLimit(props.limit);\n        }\n\n        // Ask user for additional, general success test role modifiers.\n        const testDialogOptions = {\n            title: props.title,\n            dialogOptions,\n            extended: props.extended,\n            limit: props.limit,\n            wounds: props.wounds,\n        };\n\n        const testDialog = await ShadowrunTestDialog.create(props.actor, testDialogOptions, props.parts);\n        const testData = await testDialog.select();\n\n        if (testDialog.canceled) return;\n\n\n        // Prepare Test Roll.\n        const basicRollProps = {...props} as BasicRollPropsDefaulted;\n        // basicRollProps.wounds = testData.wounds;\n        // basicRollProps.dialogOptions = testData.dialogOptions;\n        basicRollProps.rollMode = testData.rollMode;\n        // TODO: This is needed a hotfix... basicRoll is used secondChance and pushTheLimit chat actions.\n        //       If those are handled by advancedRoll (without a dialog) basicRoll message creation can be removed\n        //       and this line as well...\n        basicRollProps.hideRollMessage = true;\n\n\n        if (testDialog.selectedButton === 'edge' && props.actor) {\n            await ShadowrunRoller.handleExplodingSixes(props.actor, basicRollProps, testData);\n        }\n\n        // Build basic roll parts as the LAST step, to avoid missing any parts.\n        basicRollProps.parts = testData.parts.list;\n\n        // Execute Test roll...\n        const roll = await this.basicRoll(basicRollProps);\n        if (!roll) return;\n\n\n        if (!props.hideRollMessage) {\n            await ShadowrunRoller.rollChatMessage(roll, basicRollProps);\n        }\n\n\n        if (testData.extended) {\n            ShadowrunRoller.handleExtendedRoll(props, testData);\n        }\n\n\n        // Call any provided callbacks to be executed after this roll.\n        if (after) await after(roll);\n\n        return roll;\n    }\n\n    static async rollChatMessage(roll: ShadowrunRoll, props: BasicRollPropsDefaulted) {\n        const {actor, target, item, rollMode, description, title, previewTemplate, attack, incomingAttack, damage, tests, combat} = props;\n        const rollChatMessageOptions = {roll, actor, target, item, rollMode, description, title, previewTemplate, attack, incomingAttack, damage, tests, combat};\n        await createRollChatMessage(rollChatMessageOptions);\n    }\n\n    /** Send a message to the specific targeted player given.\n     *\n     * Use targetsChatMessages for a simple way to send to all active player targets.\n     *\n     * Should a target have multiple user owners, each will get a message.\n     *\n     * @param options\n     */\n    static async targetChatMessage(options: RollTargetChatMessage) {\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers)) return;\n\n        const rollMode = options.rollMode ?? game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\n        if (rollMode === 'roll') return;\n\n        // @ts-ignore // Token.actor is of type Actor instead of SR5Actor\n        const users = options.target.actor.getActivePlayerOwners();\n\n        for (const user of users) {\n            if (user.isGM) continue;\n            if (user === game.user) continue;\n\n            const targetChatMessage = {\n                actor: options.actor, target: options.target, targets: [options.target], item: options.item,\n                tests: options.tests, whisperTo: user, attack: options.attack\n            } as TargetChatMessageOptions;\n            await createTargetChatMessage(targetChatMessage);\n        }\n    }\n\n    /** Send messages to ALL targets, no matter if specifically targeted in a action dialog.\n     *\n     * This can cause for multiple target whispers to happen, even if the active player only selected one\n     * during, for example, the ranged weapon dialog (which gives a selection and returns one)\n     *\n     *\n     * @param options\n     */\n    static async targetsChatMessages(targets: Token[], options: RollTargetChatMessage) {\n        if (!game.settings.get(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers)) return;\n\n        targets.forEach(target => {\n            // @ts-ignore // Token.actor is of type Actor instead of SR5Actor\n            if (!target.actor.hasActivePlayerOwner()) return;\n\n            options = {...options, target};\n            ShadowrunRoller.targetChatMessage(options);\n        })\n    }\n\n    static _errorOnInvalidLimit(limit?: LimitField) {\n        if (limit && limit.value < 0) {\n            ui.notifications?.error(game.i18n.localize('SR5.Warnings.NegativeLimitValue'));\n        }\n    }\n\n    static handleExtendedRoll(advancedProps: AdvancedRollPropsDefaulted, testData: TestDialogData) {\n        const currentExtended = testData.parts.getPartValue('SR5.Extended') ?? 0;\n        testData.parts.addUniquePart('SR5.Extended', currentExtended - 1);\n\n        // Prepare the next, extended test roll.\n        advancedProps.parts = testData.parts.list;\n        advancedProps.extended = true;\n        advancedProps.hideRollMessage = false;\n        const delayInMs = 400;\n        setTimeout(() => this.advancedRoll(advancedProps), delayInMs);\n    }\n\n    static async handleExplodingSixes(actor: SR5Actor, basicProps: BasicRollProps, testData: TestDialogData) {\n        basicProps.explodeSixes = true;\n        delete basicProps.limit;\n        testData.parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\n\n        await actor.useEdge();\n    }\n}\n","import {SR} from \"../constants\";\n\nexport class CombatRules {\n    static iniOrderCanDoAnotherPass(scores: number[]): boolean {\n        for (const score of scores) {\n            if (CombatRules.iniScoreCanDoAnotherPass(score)) return true;\n        }\n        return false;\n    }\n    /**\n     * Check if there is another initiative pass possible with the given score.\n     * @param score\n     * @return true means another initiative pass is possible\n     */\n    static iniScoreCanDoAnotherPass(score: number): boolean {\n        return CombatRules.reduceIniResultAfterPass(score) > 0;\n    }\n    /**\n     * Reduce the given initiative score according to @PDF SR5#159\n     * @param score This given score can't be reduced under zero.\n     */\n    static reduceIniResultAfterPass(score: number): number {\n        return Math.max(score + SR.combat.INI_RESULT_MOD_AFTER_INI_PASS, 0);\n    }\n\n    /**\n     * Reduce the initiative score according to the current initiative pass @PDF SR5#160.\n     * @param score\n     * @param pass The current initiative pass. Each combat round starts at the initiative pass of 1.\n     */\n    static reduceIniOnLateSpawn(score: number, pass: number): number {\n        // Assure valid score ranges.\n        // Shift initiative pass value range from min 1 to min 0 for multiplication.\n        pass = Math.max(pass - 1, 0);\n        score = Math.max(score, 0);\n\n        // Reduce the new score according to. NOTE: Modifier is negative\n        const reducedScore = score + pass * SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\n        return Math.max(reducedScore, 0);\n    }\n}","import {FLAGS, SR, SYSTEM_NAME} from \"../constants\";\nimport SituationModifiers = Shadowrun.SituationModifiers;\nimport EnvironmentalModifiers = Shadowrun.EnvironmentalModifiers;\nimport EnvironmentalModifierLevels = Shadowrun.EnvironmentalModifierLevels;\nimport EnvironmentalModifierCategories = Shadowrun.EnvironmentalModifierCategories;\n\nexport class Modifiers {\n    data: SituationModifiers;\n\n    constructor(data: SituationModifiers|undefined) {\n        // Fail gracefully for no modifiers given.\n        // This can happen as Foundry returns empty objects for no flags set.\n        if (!data || typeof data !== 'object' || !(\"environmental\" in data)) {\n            data = Modifiers.getDefaultModifiers();\n        }\n\n        // Duplicate data to avoid cross talk between different entities over different Modifier instances.\n        // @ts-ignore\n        this.data = duplicate(data);\n    }\n\n    get hasActiveEnvironmental(): boolean {\n        return Object.keys(this.environmental.active).length > 0;\n    }\n\n    get modifiers(): SituationModifiers {\n        return this.data;\n    }\n\n    set modifiers(modifiers: SituationModifiers) {\n        this.data = modifiers;\n    }\n\n    get environmental(): EnvironmentalModifiers {\n        return this.data.environmental;\n    }\n\n    set environmental(modifiers: EnvironmentalModifiers) {\n        this.data.environmental = modifiers;\n    }\n\n    _matchingActiveEnvironmental(category: keyof EnvironmentalModifierCategories, level: number): boolean {\n        return this.environmental.active[category] === level;\n    }\n\n    _setEnvironmentalCategoryActive(category: keyof EnvironmentalModifierCategories, level: number) {\n        this.environmental.active[category] = level;\n    }\n\n    _setEnvironmentalCategoryInactive(category: keyof EnvironmentalModifierCategories) {\n        delete this.environmental.active[category];\n    }\n\n    _disableEnvironmentalOverwrite() {\n        this._setEnvironmentalCategoryInactive('value');\n    }\n\n    /** Actiavte a environmental modifier category (wind) with a value and recalculate the total modifier\n     *\n     * @param category\n     * @param level\n     */\n    activateEnvironmentalCategory(category: keyof EnvironmentalModifierCategories, level: number) {\n        if (!this._environmentalCategoryIsOverwrite(category)) {\n            this._disableEnvironmentalOverwrite();\n        }\n\n        this._setEnvironmentalCategoryActive(category, level);\n        this.calcEnvironmentalTotal();\n    }\n\n    toggleEnvironmentalCategory(category: keyof EnvironmentalModifierCategories, level: number) {\n        if (this._matchingActiveEnvironmental(category, level)) {\n            this._setEnvironmentalCategoryInactive(category);\n        } else if (this._environmentalCategoryIsOverwrite(category)) {\n            this._setEnvironmentalOverwriteActive(level);\n        } else {\n            this._setEnvironmentalCategoryActive(category, level);\n        }\n\n        // Remove a lingering overwrite if anything is set active.\n        if (!this._environmentalCategoryIsOverwrite(category)) {\n            this._setEnvironmentalOverwriteInactive();\n        }\n\n        this.calcEnvironmentalTotal();\n    }\n\n    calcEnvironmentalTotal() {\n        // Manual selection will overwrite all else...\n        if (this.hasActiveEnvironmentalOverwrite) {\n            const modifier = this._activeEnvironmentalOverwrite;\n\n            if (modifier === undefined) {\n                console.error('An active overwrite modifier was returned as undefined');\n                return;\n            }\n\n            this._resetEnvironmental();\n            this._setEnvironmentalOverwriteActive(modifier);\n            this._setEnvironmentalTotal(modifier);\n\n        } else {\n            // Calculation based on active modifier categories, excluding manual overwrite.\n            const activeCategories = Object.entries(this.environmental.active).filter(([category, level]) => category !== 'value');\n            // Should an active category miss a level set, ignore and fail gracefully.\n            const activeLevels = activeCategories.map(([category, level]) => level ? level : 0);\n\n            const count = this._countActiveModifierLevels(activeLevels);\n\n            const modifiers = Modifiers.getEnvironmentalModifierLevels();\n\n            if (count.extreme > 0 || count.heavy >= 2) {\n                this._setEnvironmentalTotal(modifiers.extreme);\n            }\n            else if (count.heavy === 1 || count.moderate >= 2) {\n                this._setEnvironmentalTotal(modifiers.heavy);\n            }\n            else if (count.moderate === 1 || count.light >= 2) {\n                this._setEnvironmentalTotal(modifiers.moderate);\n            }\n            else if (count.light === 1) {\n                this._setEnvironmentalTotal(modifiers.light);\n            } else {\n                this._setEnvironmentalTotal(modifiers.good);\n            }\n        }\n    }\n\n    static async clearOnEntity(entity: Entity): Promise<Modifiers> {\n        await entity.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\n        return new Modifiers(Modifiers.getDefaultModifiers());\n    }\n\n    static async clearEnvironmentalOnEntity(entity: Entity): Promise<Modifiers> {\n        const modifiers = await Modifiers.getModifiersFromEntity(entity);\n\n        modifiers.data.environmental = Modifiers.getDefaultEnvironmentalModifiers();\n\n        await Modifiers.setModifiersOnEntity(entity, modifiers.data);\n\n        return modifiers;\n    }\n\n    _environmentalCategoryIsOverwrite(category: keyof EnvironmentalModifierCategories): boolean {\n        return category === 'value';\n    }\n\n    _resetEnvironmental() {\n        Object.keys(this.environmental.active).forEach(category => delete this.environmental.active[category]);\n    }\n\n    _setEnvironmentalOverwriteActive(value: number) {\n        this._resetEnvironmental();\n        this._setEnvironmentalCategoryActive('value', value);\n    }\n\n    _setEnvironmentalOverwriteInactive() {\n        this._setEnvironmentalCategoryInactive('value');\n    }\n\n    _setEnvironmentalTotal(value: number) {\n        this.environmental.total = value;\n    }\n\n    get _activeEnvironmentalOverwrite(): number|undefined {\n        return this.modifiers.environmental.active.value;\n    }\n\n    get hasActiveEnvironmentalOverwrite(): boolean {\n        return this.environmental.active.value !== undefined;\n    }\n\n    /** Count the amount each level (modifier value) appears in the array of modifiers\n     *\n     * @param values Active environmental modifiers\n     */\n    _countActiveModifierLevels(values: Number[]) {\n        const modifiers = Modifiers.getEnvironmentalModifierLevels();\n\n        return {\n            light: values.reduce((count: number, value: number) => (value === modifiers.light ? count + 1 : count), 0),\n            moderate: values.reduce((count: number, value: number) => (value === modifiers.moderate ? count + 1 : count), 0),\n            heavy: values.reduce((count: number, value: number) => (value === modifiers.heavy ? count + 1 : count), 0),\n            extreme: values.reduce((count: number, value: number) => (value === modifiers.extreme ? count + 1 : count), 0)\n        }\n    }\n\n    static getDefaultEnvironmentalModifiers(): EnvironmentalModifiers  {\n        return {\n            total: 0,\n            active: {}\n        }\n    }\n\n    static getDefaultModifiers(): SituationModifiers {\n        return {\n            environmental: Modifiers.getDefaultEnvironmentalModifiers()\n        }\n    }\n\n    static getEnvironmentalModifierLevels(): EnvironmentalModifierLevels {\n        return SR.combat.environmental.levels;\n    }\n\n    static async getModifiersFromEntity(entity: Entity): Promise<Modifiers> {\n        // It's possible for scene modifiers to chosen, while no scene is actually opened.\n        // if (!document) return new Modifiers(Modifiers.getDefaultModifiers());\n\n        const data = await entity.getFlag(SYSTEM_NAME, FLAGS.Modifier) as SituationModifiers;\n        return new Modifiers(data);\n    }\n\n    static async setModifiersOnEntity(entity: Entity, modifiers: SituationModifiers) {\n        // TODO: Ask league about unsetFlag behavoir...\n        // NOTE: Check if JSON stringifier works or not.\n        await entity.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\n        await entity.setFlag(SYSTEM_NAME, FLAGS.Modifier, modifiers);\n    }\n}","import SkillField = Shadowrun.SkillField;\nimport {PartsList} from \"../parts/PartsList\";\nimport {SR5} from \"../config\";\nimport {SR} from \"../constants\";\n\nexport class SkillRules {\n\n    static mustDefaultToRoll(skill: SkillField): boolean {\n        return skill.base === 0;\n    }\n    /**\n     * Allow defaulting a skill role.\n     * @PDF SR5#130\n     * @param skill Check for this skills ability to be defaulted.\n     * @return true will allow for a SuccessTest / role to proceed.\n     */\n    static allowDefaultingRoll(skill: SkillField): boolean {\n        // Check for skill defaulting at the base, since modifiers or bonus can cause a positive pool, while\n        // still defaulting.\n        return skill.canDefault;\n    }\n\n    /**\n     * Allow a skill role.\n     * @PDF SR5#130\n     * @param skill Check for this skills ability to be rolled.\n     * @return true will allow for a SuccessTest / role to proceed.\n     */\n    static allowRoll(skill: SkillField): boolean {\n        return !SkillRules.mustDefaultToRoll(skill) || SkillRules.allowDefaultingRoll(skill);\n    }\n\n    /**\n     * Add the defaulting modifier part to a parts list\n     * @param parts Should be a PartsList involved with skills.\n     */\n    static addDefaultingPart(parts: PartsList<number>) {\n        parts.addUniquePart('SR5.Defaulting', SkillRules.getDefaultingModifier());\n    }\n\n    static getDefaultingModifier(): number {\n        return SR.skill.DEFAULTING_MODIFIER;\n    }\n}","import { SR5Actor } from '../actor/SR5Actor';\nimport { SR5 } from '../config';\nimport { Helpers } from '../helpers';\nimport { PartsList } from '../parts/PartsList';\nimport DamageData = Shadowrun.DamageData;\nimport ActorArmorData = Shadowrun.ActorArmorData;\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport ModifiableValue = Shadowrun.ModifiableValue;\nimport CharacterActorData = Shadowrun.CharacterData;\nimport SpellItemData = Shadowrun.SpellItemData;\n\n/**\n * Soaking rules for actors\n */\nexport class SoakRules {\n\n    /**\n     * Determines the soak parts based on the damage and the actor type\n     * @param soakParts List of (potentially prefilled) soak parts\n     * @param actor The actor affected by the damage\n     * @param damageData The damage\n     */\n    static applyAllSoakParts(soakParts: PartsList<number>, actor: SR5Actor, damageData: DamageData) {\n        if (damageData.type.base !== 'matrix') {\n            SoakRules.applyPhysicalAndStunSoakParts(soakParts, actor, damageData);\n        } else {\n            SoakRules.applyMatrixSoakParts(soakParts, actor);\n        }\n    }\n\n    private static applyPhysicalAndStunSoakParts(soakParts: PartsList<number>, actor: SR5Actor, damageData: DamageData) {\n        // Apply special rules for direct combat spells\n        const damageSourceItem = Helpers.findDamageSource(damageData);\n        if (damageSourceItem && damageSourceItem.isDirectCombatSpell()) {\n            return SoakRules.applyDirectCombatSpellParts(damageSourceItem.data as SpellItemData, soakParts, actor);\n        }\n\n        SoakRules.applyBodyAndArmorParts(soakParts, actor);\n\n        const armor = actor.getArmor();\n        SoakRules.applyArmorPenetration(soakParts, armor, damageData);\n        SoakRules.applyElementalArmor(soakParts, armor, damageData.element.base);\n    }\n\n    private static applyDirectCombatSpellParts(spellItem: SpellItemData, soakParts: PartsList<number>, actor: SR5Actor) {\n        if (spellItem.data.type === 'mana') {\n            SoakRules.addUniquePart(soakParts, actor.getAttribute('willpower'), SR5.attributes.willpower);\n        }\n\n        else {\n            SoakRules.addUniquePart(soakParts, actor.getAttribute('body'), SR5.attributes.body);\n        }\n\n        return;\n    }\n\n    private static applyBodyAndArmorParts(soakParts: PartsList<number>, actor: SR5Actor) {\n        const body = actor.findAttribute('body');\n        if (body) {\n            soakParts.addUniquePart(body.label || 'SR5.Body', body.value);\n        }\n\n        const mod = actor.getModifier('soak');\n        if (mod) {\n            soakParts.addUniquePart('SR5.Bonus', mod);\n        }\n\n        actor._addArmorParts(soakParts);\n    }\n\n    private static applyArmorPenetration(soakParts: PartsList<number>, armor: ActorArmorData, damageData: DamageData) {\n        const bonusArmor = armor[damageData.element.value] ?? 0;\n        const totalArmor = armor.value + bonusArmor;\n        const ap = Helpers.calcTotal(damageData.ap);\n\n        soakParts.addUniquePart('SR5.AP', Math.max(ap, -totalArmor));\n    }\n\n    private static applyElementalArmor(soakParts: PartsList<number>, armor: ActorArmorData, element: string) {\n        const bonusArmor = armor[element] ?? 0;\n        if (bonusArmor) {\n            soakParts.addUniquePart(SR5.elementTypes[element], bonusArmor);\n        }\n    }\n\n    private static applyMatrixSoakParts(soakParts: PartsList<number>, actor: SR5Actor) {\n        const actorData = actor.data.data as CharacterActorData;\n\n        // All actors have the same soak rules when they are not active in the matrix\n        // TODO Technomancer and Sprites special rules?\n        if (actorData.initiative.perception === 'matrix') {\n            if (actor.isVehicle()){\n                // Vehicles can have a matrix initiative but do not take biofeedback\n                SoakRules.applyRatingAndFirewallParts(actorData, soakParts);\n            }\n            else {\n                SoakRules.applyBiofeedbackParts(soakParts, actor, actorData);\n            }\n        }\n\n        else {\n            SoakRules.applyRatingAndFirewallParts(actorData, soakParts);\n        }\n    }\n\n    private static applyBiofeedbackParts(soakParts: PartsList<number>, actor: SR5Actor, actorData: CharacterActorData) {\n        SoakRules.addUniquePart(soakParts, actor.getAttribute('willpower'), SR5.attributes.willpower);\n\n        if (!actorData.matrix) {\n            return;\n        }\n\n        SoakRules.addUniquePart(soakParts, actorData.matrix.firewall, SR5.matrixAttributes.firewall);\n    }\n\n    private static applyRatingAndFirewallParts(actorData: CharacterActorData, soakParts: PartsList<number>) {\n        if (!actorData.matrix) {\n            return;\n        }\n\n        const deviceRating = actorData.matrix.rating;\n        if (deviceRating) {\n            soakParts.addUniquePart('SR5.Labels.ActorSheet.DeviceRating', deviceRating);\n        }\n\n        this.addUniquePart(soakParts, actorData.matrix.firewall, SR5.matrixAttributes.firewall);\n    }\n\n    private static addUniquePart(partsList: PartsList<number>, modifiableValue : ModifiableValue, label : string) {\n        const totalValue = Helpers.calcTotal(modifiableValue);\n        partsList.addUniquePart(label, totalValue);\n    }\n\n    /**\n     * Reduces the damage value based on net hits and damage data and actor special rules\n     *\n     * @remarks\n     * Make sure that you first call modifyDamageType before you call this method\n     * to determine the correct damage type (physical, stun, matrix)\n     *\n     * @param damageData The incoming damage\n     * @param hits The number of hits on the soak tests\n     * @returns The updated damage data\n     */\n    static reduceDamage(actor: SR5Actor, damageData: DamageData, hits: number): ModifiedDamageData {\n\n        // Vehicles are immune to stun damage (electricity stun damage is handled in a different place)\n        // Note: This also takes care of the vehicle immunity, since physical damage that does not exceed armor\n        // will be converted to stun damage and then reduced to 0. This does not work with drones wearing armor\n        // but we do not support this.\n        if (damageData.type.value === 'stun' && actor.isVehicle()) {\n            return Helpers.reduceDamageByHits(damageData, damageData.value, 'SR5.VehicleStunImmunity');\n        }\n\n        return Helpers.reduceDamageByHits(damageData, hits, 'SR5.SoakTest');\n    }\n\n    /**\n     * Changes the damage type based on the incoming damage type and the actor state (armor, matrix perception..)\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n    static modifyDamageType(damage: DamageData, actor : SR5Actor) : DamageData {\n        // Careful, order of damage conversion is very important\n        // Electricity stun damage is considered physical for vehicles\n        let updatedDamage = duplicate(damage) as DamageData;\n        if (actor.isVehicle() && updatedDamage.element.value === 'electricity' && updatedDamage.type.value === 'stun') {\n            updatedDamage.type.value = 'physical';\n        }\n\n        const damageSourceItem = Helpers.findDamageSource(damage);\n        if (damageSourceItem && damageSourceItem.isDirectCombatSpell()) {\n            // Damage from direct combat spells is never converted\n            return updatedDamage;\n        }\n\n        updatedDamage = SoakRules.modifyPhysicalDamageForArmor(updatedDamage, actor);\n        return SoakRules.modifyMatrixDamageForBiofeedback(updatedDamage, actor);\n    }\n\n    /**\n     * Turns physical damage to stun damage based on the damage and armor\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n     static modifyPhysicalDamageForArmor(damage: DamageData, actor : SR5Actor): DamageData {\n        const updatedDamage = duplicate(damage) as DamageData;\n\n        if (damage.type.value === 'physical') {\n            // Physical damage is only transformed for some actors\n            if (!actor.isCharacter() && !actor.isSpirit() && !actor.isCritter() && !actor.isVehicle()) {\n                return updatedDamage;\n            }\n\n            const modifiedArmor = actor.getModifiedArmor(damage);\n            if (modifiedArmor) {\n                const armorWillChangeDamageType = modifiedArmor.value > damage.value;\n\n                if (armorWillChangeDamageType) {\n                    updatedDamage.type.value = 'stun';\n                }\n            }\n        }\n\n        return updatedDamage;\n    }\n\n    /**\n     * Turns matrix damage to biofeedback based on the actor state\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n    static modifyMatrixDamageForBiofeedback(damage: DamageData, actor : SR5Actor): DamageData {\n        const updatedDamage = duplicate(damage) as DamageData;\n\n        if (damage.type.value === 'matrix') {\n            const actorData = actor.data.data as CharacterActorData;\n\n            // Only characters can receive biofeedback damage at the moment.\n            // TODO Technomancer and Sprites special rules?\n            if (!actor.isCharacter()) {\n                return updatedDamage;\n            }\n\n            if (actorData.initiative.perception === 'matrix') {\n                if (actorData.matrix.hot_sim) {\n                    updatedDamage.type.value = 'physical';\n                }\n                else {\n                    updatedDamage.type.value = 'stun';\n                }\n            }\n        }\n\n        return updatedDamage;\n    }\n}","// game settings for shadowrun 5e\n\nimport { VersionMigration } from './migrator/VersionMigration';\nimport { FLAGS, SYSTEM_NAME } from './constants';\n\nexport const registerSystemSettings = () => {\n    /**\n     * Register diagonal movement rule setting\n     */\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\n        name: 'SETTINGS.DiagonalMovementName',\n        hint: 'SETTINGS.DiagonalMovementDescription',\n        scope: 'world',\n        config: true,\n        type: String,\n        default: '1-2-1',\n        choices: {\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\n            'EUCL': 'SETTINGS.Euclidean',\n        },\n        onChange: (rule) => {\n            if (canvas.ready){\n                // @ts-ignore // TODO: foundry-vtt-types diagonalRule doesn't exist anymore. Is it even working?\n                canvas.grid.diagonalRule = rule\n            }\n        },\n    });\n\n    /**\n     * Default limit behavior\n     */\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\n        name: 'SETTINGS.ApplyLimitsName',\n        hint: 'SETTINGS.ApplyLimitsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\n        name: 'SETTINGS.DisplayDefaultRollCardName',\n        hint: 'SETTINGS.DisplayDefaultRollCardDescription',\n        scope: 'user',\n        config: true,\n        type: Boolean,\n        default: false,\n    });\n\n    /**\n     * Track system version upon which a migration was last applied\n     */\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\n        name: 'System Data Version.',\n        scope: 'world',\n        config: false,\n        type: String,\n        default: '0',\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\n        name: 'SETTINGS.ShowGlitchAnimationName',\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\n        scope: 'user',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput, {\n        name: 'SETTINGS.ShowTokenNameForChatOutputName',\n        hint: 'SETTINGS.ShowTokenNameForChatOutputDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers, {\n        name: 'SETTINGS.WhisperOpposedTestsToTargetedPlayers',\n        hint: 'SETTINGS.WhisperOpposedTestsToTargetedPlayersDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills, {\n         name: 'SETTINGS.OnlyAllowRollOnDefaultableSkills',\n        hint: 'SETTINGS.OnlyAllowRollOnDefaultableSkillsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails, {\n         name: 'SETTINGS.ShowSkillsWithDetails',\n        hint: 'SETTINGS.ShowSkillsWithDetailsDescription',\n        scope: 'user',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat, {\n         name: 'SETTINGS.OnlyAutoRollNPCInCombat',\n        hint: 'SETTINGS.OnlyAutoRollNPCInCombatDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n};\n","import { SR5Item } from './item/SR5Item';\n\n\nexport default // @ts-ignore\nclass Template extends MeasuredTemplate {\n    x: number;\n    y: number;\n    item?: SR5Item;\n    onComplete?: () => void;\n\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\n        const templateShape = 'circle';\n\n        const templateData = {\n            t: templateShape,\n            user: game.user?.id,\n            direction: 0,\n            x: 0,\n            y: 0,\n            // @ts-ignore\n            fillColor: game.user?.color,\n        };\n        const blast = item.getBlastData();\n        templateData['distance'] = blast?.radius;\n        templateData['dropoff'] = blast?.dropoff;\n\n        // @ts-ignore\n        // TODO: Just trying stuff out.\n        // canvas.scene.createEmbeddedDocuments('MeasuredTemplate', [templateData]);\n\n        const document = new MeasuredTemplateDocument(templateData, {parent: canvas.scene});\n        // @ts-ignore\n        const template = new Template(document);\n        template.item = item;\n        template.onComplete = onComplete;\n        return template;\n    }\n\n    async drawPreview() {\n        if (!canvas?.ready) return;\n\n        const initialLayer = canvas.activeLayer;\n        if (!initialLayer) return;\n\n        await this.draw();\n        this.layer.activate();\n        this.layer.preview.addChild(this);\n        this.activatePreviewListeners(initialLayer);\n    }\n\n    activatePreviewListeners(initialLayer: CanvasLayer) {\n        if (!canvas.ready) return;\n\n        const handlers = {};\n        let moveTime = 0;\n\n        // Update placement (mouse-move)\n        handlers['mm'] = (event) => {\n            event.stopPropagation();\n            if (!canvas.ready) return;\n            let now = Date.now(); // Apply a 20ms throttle\n            if (now - moveTime <= 20) return;\n            const center = event.data.getLocalPosition(this.layer);\n            const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\n            this.data.x = snapped.x;\n            this.data.y = snapped.y;\n            this.refresh();\n            moveTime = now;\n        };\n\n        // Cancel the workflow (right-click)\n        handlers['rc'] = () => {\n            if (!canvas.ready) return;\n\n            this.layer.preview.removeChildren();\n            canvas.stage.off('mousemove', handlers['mm']);\n            canvas.stage.off('mousedown', handlers['lc']);\n            canvas.app.view.oncontextmenu = null;\n            canvas.app.view.onwheel = null;\n            initialLayer.activate();\n\n            if (this.onComplete) this.onComplete();\n        };\n\n        // Confirm the workflow (left-click)\n        handlers['lc'] = (event) => {\n            handlers['rc'](event);\n            if (!canvas.ready) return;\n\n            // Confirm final snapped position\n            const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\n            // @ts-ignore // foundry-vtt-types 0.8 DocumentData support\n            this.data.update({x: destination.x, y: destination.y});\n\n            // Create the template\n            // @ts-ignore // foundry-vtt-types 0.8 support\n            canvas.scene.createEmbeddedDocuments('MeasuredTemplate', [this.data]);\n        };\n\n        // Rotate the template by 3 degree increments (mouse-wheel)\n        handlers['mw'] = (event) => {\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\n            event.stopPropagation();\n            if (canvas === null || !canvas.ready) return;\n\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\n            let snap = event.shiftKey ? delta : 5;\n            this.data.direction += snap * Math.sign(event.deltaY);\n            // @ts-ignore\n            this.refresh();\n        };\n\n        // Activate listeners\n        canvas.stage.on('mousemove', handlers['mm']);\n        canvas.stage.on('mousedown', handlers['lc']);\n        canvas.app.view.oncontextmenu = handlers['rc'];\n        canvas.app.view.onwheel = handlers['mw'];\n    }\n}\n","import {shadowrunRulesModifiers} from \"./sr5.Modifiers.spec\";\nimport {shadowrunSR5Item} from \"./sr5.SR5Item.spec\";\n\nexport const quenchRegister = quench => {\n    quench.registerBatch(\"shadowrun5e.rules.modifiers\", shadowrunRulesModifiers);\n    quench.registerBatch(\"shadowrun5e.entities.items\", shadowrunSR5Item);\n};\n","import {Modifiers} from \"../module/rules/Modifiers\";\n\nexport const shadowrunRulesModifiers = context => {\n    const {describe, it, assert} = context;\n\n\n    const defaultModifiers = {\n        environmental: {\n            active: {},\n            total: 0\n        }\n    };\n\n    const activeModifiers = {\n        environmental: {\n            active: {\n                wind: -1,\n                light: -1\n            },\n            total: -3\n        }\n    };\n\n    describe('SR5 Modifiers', () => {\n        it('should create default modifier values', () => {\n            const modifiers = Modifiers.getDefaultModifiers();\n\n            assert.deepEqual(modifiers, defaultModifiers)\n        })\n        it('should use default modifiers for faulty constructor params', () => {\n            //@ts-ignore\n            assert.deepEqual(new Modifiers({}).data, defaultModifiers);\n            //@ts-ignore\n            assert.deepEqual(new Modifiers(undefined).data, defaultModifiers);\n            //@ts-ignore\n            assert.deepEqual(new Modifiers(null).data, defaultModifiers);\n            //@ts-ignore\n            assert.deepEqual(new Modifiers(0).data, defaultModifiers);\n            //@ts-ignore\n            assert.deepEqual(new Modifiers(1).data, defaultModifiers);\n            //@ts-ignore\n            assert.deepEqual(new Modifiers().data, defaultModifiers);\n        })\n        it('should set an environmental modifier active', () => {\n            const modifiers = new Modifiers(defaultModifiers);\n            modifiers._setEnvironmentalCategoryActive('wind', -1);\n\n            //@ts-ignore(modifiers.environmental.active).to.eql({wind: -1});\n        })\n        it('should set an environmental modifier inactive', () => {\n            const modifiers = new Modifiers({\n                environmental: {\n                    active: {\n                        wind: -1,\n                        light: -3\n                    },\n                    total: 0\n                }\n            });\n            modifiers._setEnvironmentalCategoryInactive('wind');\n\n            assert.deepEqual(modifiers.environmental.active, {light: -3});\n        })\n        it('should understand active environmental modifiers', () => {\n            const modifiersActive = new Modifiers({\n                environmental: {\n                    active: {\n                        wind: -1,\n                        light: -3\n                    },\n                    total: 0\n                }\n            });\n            assert.equal(modifiersActive.hasActiveEnvironmental, true);\n            const modifiersInactive = new Modifiers({\n                environmental: {\n                    active: {},\n                    total: 0\n                }\n            });\n            assert.equal(modifiersInactive.hasActiveEnvironmental, false);\n        })\n        it('should calculate the total according to sr5 rules', () => {\n            const modifiers = new Modifiers(defaultModifiers);\n\n            assert.equal(modifiers.environmental.total, 0);\n            modifiers.environmental.active.wind = -1;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -1);\n            modifiers.environmental.active.light = -1;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n            modifiers.environmental.active.range = -1;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n            delete modifiers.environmental.active.light;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n            modifiers.environmental.active.light = 0;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n\n            modifiers.environmental.active.wind = -3;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n            modifiers.environmental.active.light = -3;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n            modifiers.environmental.active.range = -3;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n            delete modifiers.environmental.active.light;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n            modifiers.environmental.active.light = 0;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n\n            modifiers.environmental.active.wind = -6;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n            modifiers.environmental.active.light = -6;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -10);\n            modifiers.environmental.active.range = -6;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -10);\n            delete modifiers.environmental.active.light;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -10);\n            modifiers.environmental.active.light = 0;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -10);\n\n            modifiers.environmental.active.value = 0;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, 0);\n            modifiers.environmental.active.value = -1;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -1);\n            modifiers.environmental.active.value = -3;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -3);\n            modifiers.environmental.active.value = -6;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -6);\n            modifiers.environmental.active.value = -10;\n            modifiers.calcEnvironmentalTotal();\n            assert.equal(modifiers.environmental.total, -10);\n        })\n\n        it('should reset active environmental modifiers', () => {\n            const modifiers = new Modifiers(activeModifiers);\n            modifiers._resetEnvironmental();\n\n            assert.deepEqual(modifiers.environmental.active, {});\n        })\n\n        it('should calculate total for faulty active', () => {\n            const modifiers = new Modifiers({\n                environmental: {\n                    total: -1,\n                    active: {\n                        //@ts-ignore\n                        light: null,\n                        wind: undefined,\n                        //@ts-ignore\n                        range: '',\n                        //@ts-ignore\n                        visibility: 'string'\n                    }\n                }\n            });\n\n            modifiers.calcEnvironmentalTotal();\n\n            assert.equal(modifiers.environmental.total, 0);\n        })\n    })\n}\n\n","import {SR5Item} from \"../module/item/SR5Item\";\n\nexport const shadowrunSR5Item = context => {\n    /**\n     * Setup handling for all items within this test.\n     */\n    class TestingItems {\n        items: Record<string, SR5Item> = {};\n        async create(data) {\n            // @ts-ignore\n            const item = await Item.create({name: '#QUENCH_TEST_ITEM_SHOULD_HAVE_BEEN_DELETED', ...data}) as SR5Item;\n            this.items[item.id] = item;\n            return item;\n        }\n        async delete(id) {\n            const item = this.items[id];\n            if (!item) return;\n            await Item.delete(item.data._id);\n            delete this.items[item.id];\n        }\n\n        async teardown() {\n            Object.values(this.items).forEach(item => this.delete(item.id));\n        }\n    }\n\n\n    const {describe, it, assert, before, after} = context;\n    let testing;\n\n    before(async () => {\n        testing = new TestingItems();\n    })\n\n    after(async () => {\n        await testing.teardown();\n    })\n\n    describe('SR5Items', () => {\n        it('Should create a naked item of any type', async () => {\n            const item = await testing.create({type: 'action'});\n\n            // Check basic foundry data integrity\n            assert.notStrictEqual(item.id, '');\n            assert.notStrictEqual(item.id, undefined);\n            assert.notStrictEqual(item.id, null);\n\n            // Check foundry item collection integrity\n            const itemFromCollection = game.items.get(item.id);\n            assert.notStrictEqual(itemFromCollection, null);\n            assert.strictEqual(item.id, itemFromCollection.id);\n        });\n\n        it('Should update an item of any type', async () => {\n            const item = await testing.create({type: 'action'});\n\n            assert.notProperty(item.data.data, 'test');\n            await item.update({'data.test': true});\n\n            assert.property(item.data.data, 'test');\n            assert.propertyVal(item.data.data, 'test', true);\n        });\n\n        it('Should embedd an ammo into a weapon and not the global item collection', async () => {\n            const weapon = await testing.create({type: 'weapon'});\n            const ammo = await testing.create({type: 'ammo'});\n\n            await weapon.createOwnedItem(ammo.data);\n\n            const embeddedItemDatas = weapon.getEmbeddedItems();\n            assert.isNotEmpty(embeddedItemDatas);\n            assert.lengthOf(embeddedItemDatas, 1);\n\n            const embeddedAmmoData = embeddedItemDatas[0];\n            assert.strictEqual(embeddedAmmoData.type, ammo.data.type);\n\n            // An embedded item should NOT appear in the items collection.\n            const embeddedAmmoInCollection = game.items.get(embeddedAmmoData._id);\n            assert.strictEqual(embeddedAmmoInCollection, null);\n        });\n\n        it('Should update an embedded ammo', async () => {\n            const weapon = await testing.create({type: 'weapon'});\n            const ammo = await testing.create({type: 'ammo'});\n\n            // Embed the item and get\n            await weapon.createOwnedItem(ammo.data);\n            const embeddedItemDatas = weapon.getEmbeddedItems();\n            assert.lengthOf(embeddedItemDatas, 1);\n            const embeddedAmmoData = embeddedItemDatas[0];\n            const embeddedAmmo = weapon.getOwnedItem(embeddedAmmoData._id);\n\n            assert.notStrictEqual(embeddedAmmo, undefined);\n            assert.instanceOf(embeddedAmmo, SR5Item);\n            if (!embeddedAmmo) return; //type script gate...\n\n            // Set an testing property.\n            assert.notProperty(embeddedAmmo.data.data, 'test');\n            await embeddedAmmo.update({'data.test': true});\n            assert.property(embeddedAmmo.data.data, 'test');\n            assert.propertyVal(embeddedAmmo.data.data, 'test', true);\n        });\n    });\n};"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}